<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SAKURA</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.leezy.top/"/>
  <updated>2020-12-17T16:15:27.396Z</updated>
  <id>https://www.leezy.top/</id>
  
  <author>
    <name>LEEZY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM拆解</title>
    <link href="https://www.leezy.top/2020/12/18/JVM%E6%8B%86%E8%A7%A3/"/>
    <id>https://www.leezy.top/2020/12/18/JVM拆解/</id>
    <published>2020-12-17T16:15:00.000Z</published>
    <updated>2020-12-17T16:15:27.396Z</updated>
    
    <content type="html"><![CDATA[<p>JVM学习笔记</p><a id="more"></a><h3 id="JVM-加载类"><a href="#JVM-加载类" class="headerlink" title="JVM 加载类"></a>JVM 加载类</h3><p>加载 -&gt; 链接 -&gt; 初始化</p><ul><li><p>加载<br>是指查找字节流，并且据此创建类的过程。加载需要借助类加载器，在 Java 虚拟机中，类加载器使用了双亲委派模型，即接收到加载请求时，会先将请求转发给父类加载器。数组类是JVM虚拟机直接生成的，其他类需要借助类加载器完成查找字节流的过程的。在 Java 虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。</p></li><li><p>链接<br>链接: 是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。<br>验证: 在于确保被加载类能够满足 Java 虚拟机的约束条件<br>准备: 为被加载类的静态字段分配内存</p></li><li><p>初始化<br>如果直接赋值的静态字段被 final 所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue），其初始化直接由 Java 虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 Java 编译器置于同一方法中，并把它命名为 &lt; clinit &gt;。</p></li><li><p>JAVA中获取类的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 四种</span></span><br><span class="line">Calss c1 = Class.forName(<span class="string">"com.leezy.top.Coder"</span>);</span><br><span class="line">Class c2 = Coder.getClass();</span><br><span class="line">Class c3 = Coder.class;</span><br><span class="line"><span class="comment">// 基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">Class&lt;Integer&gt; type = Integer.TYPE;</span><br><span class="line"><span class="comment">// 获取父类</span></span><br><span class="line">Class superClass = c1.getSuperClass();</span><br></pre></td></tr></table></figure></li></ul><h3 id="JVM处理异常"><a href="#JVM处理异常" class="headerlink" title="JVM处理异常"></a>JVM处理异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 异常监控的代码</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line">      <span class="comment">// catch 代码块所捕获的异常类型不能覆盖后边的，否则编译器会报错</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 必定会运行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常分为检查异常(checked exception)和非检查异常(unchecked exception), RuntimeException 和 Error是非检查异常，其他继承Throwable的Exception都是检查异常，需要程序显式的捕获或者在方法头用throws关键字声明;<br>需要注意的是异常的捕获是比较耗费性能的一件事，这是由于在构造异常实例时，Java 虚拟机便需要生成该异常的栈轨迹(stack trace);<br>在编译生成的字节码中，每个方法都附带一个异常表。异常表中的每一个条目代表一个异常处理器，并且由 from 指针、to 指针、target 指针以及所捕获的异常类型构成。这些指针的值是字节码索引，用以定位字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tryBlock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> catchBlock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> finallyBlock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> methodExit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tryBlock = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            catchBlock = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            finallyBlock = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        methodExit = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字节码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_0</span><br><span class="line">       1: putstatic     #2                  // Field tryBlock:I</span><br><span class="line">       <span class="number">4</span>: iconst_2</span><br><span class="line">       5: putstatic     #3                  // Field finallyBlock:I - 1</span><br><span class="line">       <span class="number">8</span>: goto          <span class="number">30</span></span><br><span class="line">      <span class="number">11</span>: astore_1</span><br><span class="line">      <span class="number">12</span>: iconst_1</span><br><span class="line">      13: putstatic     #5                  // Field catchBlock:I</span><br><span class="line">      <span class="number">16</span>: iconst_2</span><br><span class="line">      17: putstatic     #3                  // Field finallyBlock:I - 2</span><br><span class="line">      <span class="number">20</span>: goto          <span class="number">30</span></span><br><span class="line">      <span class="number">23</span>: astore_2</span><br><span class="line">      <span class="number">24</span>: iconst_2</span><br><span class="line">      25: putstatic     #3                  // Field finallyBlock:I - 3</span><br><span class="line">      <span class="number">28</span>: aload_2</span><br><span class="line">      <span class="number">29</span>: athrow</span><br><span class="line">      <span class="number">30</span>: iconst_3</span><br><span class="line">      31: putstatic     #6                  // Field methodExit:I</span><br><span class="line">      <span class="number">34</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">0</span>     <span class="number">4</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">           <span class="number">0</span>     <span class="number">4</span>    <span class="number">23</span>   any <span class="comment">// 指向复制的finally代码块</span></span><br><span class="line">          <span class="number">11</span>    <span class="number">16</span>    <span class="number">23</span>   any <span class="comment">// 指向复制的finally代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finally方法一定会执行，因为JVM虚拟机会复制finally代码块的内容，分别放在try-catch代码块所有正常执行路径以及异常执行路径的出口中。</p><h3 id="JVM反射机制"><a href="#JVM反射机制" class="headerlink" title="JVM反射机制"></a>JVM反射机制</h3><p>反射是 Java 语言中一个相当重要的特性，它允许正在运行的 Java 程序观测，甚至是修改程序的动态行为。<br>在默认情况下，方法的反射调用为委派实现，委派给本地实现来进行方法调用。在调用超过 15 次之后，委派实现便会将委派对象切换至动态实现。这个动态实现的字节码是自动生成的，它将直接使用 invoke 指令来调用目标方法。<br>拿到类后如何使用反射</p><ol><li>使用 newInstance() 来生成一个该类的实例。它要求该类中拥有一个无参数的构造器。P.S. 可以提高软件的可伸缩性、可扩展性。</li><li>使用 isInstance(Object) 来判断一个对象是否该类的实例，语法上等同于 instanceof 关键字。</li><li>使用 Array.newInstance(Class,int) 来构造该类型的数组。</li><li>使用 getFields()/getConstructors()/getMethods() 来访问该类的成员。方法名中带 Declared 的不会返回父类的成员，但是会返回私有成员；而不带 Declared 的则相反。<br>拿到类后可以做：</li></ol><ul><li>使用 Constructor/Field/Method.setAccessible(true) 来绕开 Java 语言的访问限制。</li><li>使用 Constructor.newInstance(Object[]) 来生成该类的实例。</li><li>使用 Field.get/set(Object) 来访问字段的值。</li><li>使用 Method.invoke(Object, Object[]) 来调用方法。</li></ul><h3 id="JVM执行方法调用"><a href="#JVM执行方法调用" class="headerlink" title="JVM执行方法调用"></a>JVM执行方法调用</h3><ul><li>重载与重写，重载指的是方法名相同而参数类型不相同的方法之间的关系，重写指的是方法名相同并且参数类型也相同的方法之间的关系。<br>如果子类定义了与父类中非私有方法同名的方法，而且这两个方法的参数类型相同，如果这两个方法都是静态的，那么子类中的方法隐藏了父类中的方法。如果这两个方法都不是静态的，且都不是私有的，那么子类的方法重写了父类中的方法。</li><li>JAVA编译器对重载方法的选取规则：</li></ul><ol><li>在不考虑对基本类型自动装拆箱，以及可变长参数的情况下选取重载方法；</li><li>如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法；</li><li>如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。<br>Java识别方法只看方法名和参数类型，而JVM识别方法类名、方法名以及方法描述符。 在Java中，返回类型不一致而其他全部一致不算重载。Java 虚拟机中的静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。</li></ol><ul><li>静态绑定和动态绑定<br>具体来说，Java 字节码中与调用相关的指令共有五种。</li></ul><ol><li>invokestatic：用于调用静态方法。</li><li>invokespecial：用于调用私有实例方法、构造器，以及使用 super 关键字调用父类的实例方法或构造器，和所实现接口的默认方法。</li><li>invokevirtual：用于调用非私有实例方法。</li><li>invokeinterface：用于调用接口方法。</li><li>invokedynamic：用于调用动态方法。</li></ol><h3 id="JAVA对象的内存分布"><a href="#JAVA对象的内存分布" class="headerlink" title="JAVA对象的内存分布"></a>JAVA对象的内存分布</h3><p>JAVA程序中新建对象的方式有：</p><ul><li>new方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo foo = new Foo(); 编译而成的字节码</span></span><br><span class="line">  <span class="number">0</span> <span class="keyword">new</span> Foo</span><br><span class="line">  <span class="number">3</span> dup</span><br><span class="line">  <span class="number">4</span> <span class="function">invokespecial <span class="title">Foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  7 astore_1</span></span><br></pre></td></tr></table></figure></li></ul><p>当我们调用一个构造器时，它将优先调用父类的构造器，直至 Object 类。这些构造器的调用者皆为同一对象，也就是通过 new 指令新建而来的对象。通过 new 指令新建出来的对象，它的内存其实涵盖了所有父类中的实例字段。也就是说，虽然子类无法访问父类的私有实例字段，或者子类的实例字段隐藏了父类的同名实例字段，但是子类的实例还是会为这些父类实例字段分配内存的。</p><ul><li>反射机制<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = (User) Class.forName(<span class="string">"com.leezy.top.User"</span>).newInstance(); </span><br><span class="line"><span class="comment">// 当需要调用类的带参数的构造函数时，应该采用 Constructor.newInstance()，</span></span><br></pre></td></tr></table></figure></li></ul><p>newInstance创建对象实例的时候仅能调用<code>无参的构造函数</code>，所以必需确保类中有无参数的构造函数，否则将会抛出java.lang.InstantiationException异常，无法进行实例化。</p><ul><li>Object.clone<br>需要被克隆的对象需要实现<code>Cloneable</code>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User u1 = <span class="keyword">new</span> User();</span><br><span class="line">User u2 = (User)u1.clone();</span><br></pre></td></tr></table></figure></li></ul><p>需要注意的是，基于克隆(原型模式)创建对象的方式是浅拷贝，如果对象的属性为引用类型，则仅复制地址。</p><ul><li><p>反序列化<br>序列化需要实现<code>Serializable</code>接口，反序列化获取对象的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream o1 = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"User.txt"</span>));</span><br><span class="line">User u1 = (User)o1.readObject();</span><br></pre></td></tr></table></figure></li><li><p>Unsafe.allocateInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会绕过对象初始化阶段并绕过构造器的安全检查，慎用</span></span><br><span class="line">User instance = (User) UNSAFE.allocateInstance(User.class);</span><br></pre></td></tr></table></figure></li></ul><p>在 Java 虚拟机中，每个 Java 对象都有一个对象头（object header），这个由标记字段和类型指针所构成。其中，标记字段用以存储 Java 虚拟机有关该对象的运行数据，如哈希码、GC 信息以及锁信息，而类型指针则指向该对象的类。在 64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java 对象在内存中的额外开销就是 16 个字节。为了节约空间，减少对象内存的使用量，64 位 Java 虚拟机引入了<code>压缩指针</code>的概念（对应虚拟机选项 -XX:+UseCompressedOops，默认开启），对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节。同事默认情况下，Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数，（对应虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 8），同时压缩指针会让虚拟机在分配字段的顺序时进行<code>字段重排列</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> l;</span><br><span class="line">  <span class="keyword">int</span> i；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> l;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用压缩指针时，B类的字段分布</span></span><br><span class="line">B object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>    <span class="keyword">int</span> A.i                                       <span class="number">0</span></span><br><span class="line">     <span class="number">16</span>     <span class="number">8</span>   <span class="keyword">long</span> A.l                                       <span class="number">0</span></span><br><span class="line">     <span class="number">24</span>     <span class="number">8</span>   <span class="keyword">long</span> B.l                                       <span class="number">0</span></span><br><span class="line">     <span class="number">32</span>     <span class="number">4</span>    <span class="keyword">int</span> B.i                                       <span class="number">0</span></span><br><span class="line">     <span class="number">36</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭压缩指针时，B类的字段分布</span></span><br><span class="line">B object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>        (object header)</span><br><span class="line">     <span class="number">16</span>     <span class="number">8</span>   <span class="keyword">long</span> A.l</span><br><span class="line">     <span class="number">24</span>     <span class="number">4</span>    <span class="keyword">int</span> A.i</span><br><span class="line">     <span class="number">28</span>     <span class="number">4</span>        (alignment/padding gap)                  </span><br><span class="line">     <span class="number">32</span>     <span class="number">8</span>   <span class="keyword">long</span> B.l</span><br><span class="line">     <span class="number">40</span>     <span class="number">4</span>    <span class="keyword">int</span> B.i</span><br><span class="line">     <span class="number">44</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br></pre></td></tr></table></figure><h3 id="JVM垃圾回收机制"><a href="#JVM垃圾回收机制" class="headerlink" title="JVM垃圾回收机制"></a>JVM垃圾回收机制</h3><p>在JVM中，垃圾就是无引用对象所占用的堆内存空间, 比如对象a和对象b相互引用, 但是再没有其他引用指向a或者b, 此时a和b对象占用的内存空间就是垃圾。目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（live set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。传统的垃圾回收算法采用的是一种简单粗暴的方式，那便是 Stop-the-world，停止其他非垃圾回收线程的工作，直到完成垃圾回收。这也就造成了垃圾回收所谓的暂停时间（GC pause）。Java 虚拟机中的 Stop-the-world 是通过安全点（safepoint）机制来实现的。当 Java 虚拟机收到 Stop-the-world 请求，它便会等待所有的线程都到达安全点，才允许请求 Stop-the-world 的线程进行独占的工作。<br>具体垃圾回收的方式：</p><ul><li>清除： 即把死亡对象所占据的内存标记为空闲内存，并记录在一个空闲列表（free list）之中。当需要新建对象时，内存管理模块便会从该空闲列表中寻找空闲内存，并划分给新建的对象。一是会造成内存碎片。由于 Java 虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。二是分配效率较低。如果是一块连续的内存空间，那么我们可以通过指针加法（pointer bumping）来做分配。而对于空闲列表，Java 虚拟机则需要逐个访问列表中的项，来查找能够放入新建对象的空闲内存。</li><li>压缩： 即把存活的对象聚集到内存区域的起始位置，从而留下一段连续的内存空间。这种做法能够解决内存碎片化的问题，但代价是压缩算法的性能开销。</li><li>复制：把内存区域分为两等分，分别用两个指针 from 和 to 来维护，并且只是用 from 指针指向的内存区域来分配内存。当发生垃圾回收时，便把存活的对象复制到 to 指针指向的内存区域中，并且交换 from 指针和 to 指针的内容。但缺点是空间使用率低。</li></ul><p>JVM堆内存的使用是符合二八原则的，JVM将堆内存划分为了新生代和老生代，新生代用来存储新建的对象。当对象存活时间够长时，则将其移动到老年代。其中，新生代又被划分为<code>Eden区</code>，以及两个大小相同的<code>Survivor区</code>, 非空的那个用<code>form</code>指针指向，空的那个用<code>to</code>指针指向。为了解决Eden区堆内存线程共享导致两个对象共同引用一段内存的问题，JVM使用了一种叫Thread Local Allocation Buffer，对应虚拟机参数 -XX:+UseTLAB，默认开启）。具体来说，每个线程可以向 Java 虚拟机申请一段连续的内存，比如 2048 字节，作为线程私有的 TLAB。这个操作需要加锁，线程需要维护两个指针（实际上可能更多，但重要也就两个），一个指向 TLAB 中空余内存的起始位置，一个则指向 TLAB 末尾。如果加法后空余内存指针的值仍小于或等于指向末尾的指针，则代表分配成功。否则，TLAB 已经没有足够的空间来满足本次新建操作。这个时候，便需要当前线程重新申请新的 TLAB。<br>默认情况下，Java 虚拟机采取的是一种动态分配的策略（对应 Java 虚拟机参数 -XX:+UsePSAdaptiveSurvivorSizePolicy），根据生成对象的速率，以及 Survivor 区的使用情况动态调整 Eden 区和 Survivor 区的比例。当Eden区空间耗尽时，Java 虚拟机便会触发一次 Minor GC，来收集新生代的垃圾。存活下来的对象，则会被送到 Survivor 区。MonitorGC其实就是上面的<code>复制</code>操作。<br>Java 虚拟机会记录 Survivor 区中的对象一共被来回复制了几次。如果一个对象被复制的次数为 15（对应虚拟机参数 -XX:+MaxTenuringThreshold），那么该对象将被晋升（promote）至老年代。另外，如果单个 Survivor 区已经被占用了 50%（对应虚拟机参数 -XX:TargetSurvivorRatio），那么较高复制次数的对象也会被晋升至老年代。<br>MonitorGC避免了垃圾回收中的全堆扫描问题，但是老年代的对象可能引用新生代的对象还是会导致全堆扫描，所以JVM引入了一个卡表的概念，即将整个堆划分为一个个大小为 512 字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。在进行 Minor GC 的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到 Minor GC 的 GC Roots 里。当完成所有脏卡的扫描之后，Java 虚拟机便会将所有脏卡的标识位清零。</p><h3 id="JAVA常用工具"><a href="#JAVA常用工具" class="headerlink" title="JAVA常用工具"></a>JAVA常用工具</h3><ul><li><p>jps 打印所有正在运行的 Java 进程的相关信息</p></li><li><p>jstat 打印目标 Java 进程的性能数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil  17079 5000 10</span><br></pre></td></tr></table></figure></li><li><p>jmap 允许用户统计目标 Java 进程的堆中存放的 Java 对象，并将它们导出成二进制文件。配合<code>eclipse MAT</code>使用比较好，可以图形展示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -clstats，该子命令将打印被加载类的信息。</span><br><span class="line"><span class="meta">#</span> -histo 该子命令将统计各个类的实例数目以及占用内存，并按照内存使用量从多至少的顺序排列。此外，-histo:live只统计堆中的存活对象。</span><br><span class="line">jmap -dump:live,format=b,file=filename.bin</span><br></pre></td></tr></table></figure></li><li><p>jinfo 查看和修改目标 Java 进程的参数</p></li><li><p>jstack 用来打印目标 Java 进程中各个线程的栈轨迹，以及这些线程所持有的锁。</p></li><li><p>javap java-&gt;javac-&gt;javap 查阅 Java 字节码</p></li><li><p>OPENJDK工具集<br><a href="http://openjdk.java.net/projects/code-tools/" target="_blank" rel="noopener">http://openjdk.java.net/projects/code-tools/</a></p></li><li><p>jcmd 可以替换除了jstat外的所有命令<br><a href="https://docs.oracle.com/en/java/javase/11/tools/jcmd.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/tools/jcmd.html</a></p></li><li><p>ASM </p></li><li><p>Java Mission Control</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> JFR 将在 Java 虚拟机启动之后持续收集数据，直至进程退出</span><br><span class="line">java -XX:StartFlightRecording=dumponexit=true,filename=myrecording.jfr MyApp</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JVM学习笔记&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://www.leezy.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Netty框架学习</title>
    <link href="https://www.leezy.top/2020/04/18/Netty%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.leezy.top/2020/04/18/Netty框架学习/</id>
    <published>2020-04-18T10:30:00.000Z</published>
    <updated>2020-11-28T08:46:52.502Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Netty" scheme="https://www.leezy.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习记录</title>
    <link href="https://www.leezy.top/2020/04/13/Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.leezy.top/2020/04/13/Maven基础知识/</id>
    <published>2020-04-13T13:55:00.000Z</published>
    <updated>2020-11-28T08:46:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>MAVEN常用基础知识。</p><a id="more"></a><p>命令<br>可以查看maven的依赖树，以树状结构输出打印maven的依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree</span><br></pre></td></tr></table></figure><p>Maven发布jar包的功能，默认该插件已经配置在Maven的deploy阶段使用，而且该插件也没有配置参数，所以无需在项目的POM中配置该插件，直接执行如下命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><!--跳过deploy --><plugin>    <groupid>org.apache.maven.plugins</groupid>    <artifactid>maven-deploy-plugin</artifactid>    <version>3.0.0-M1</version>    <configuration>        <skip>true</skip>    </configuration></plugin><p>maven-source-plugin提供项目自动将源码打包并发布的功能，而这个contract模块就是打成了三个<code>jar</code>包，注意在多项目模块中，必须将<code>maven-source-plugin</code>和<code>maven-javadoc-plugin</code>配置在具体模块的Pom中，否则不起作用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 发布到Maven仓库，多模块项目注意要在项目的根目录执行才能将父POM也上传，否则jar包不能正常下载。</span><br><span class="line">mvn clean deploy -Dmaven.test.skip=true -Dnexus.host=$&#123;NEXUS_HOST&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来生成Source Jar文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来生成 javadoc 文档--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven发布jar包的常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn install - 将jar包install到本地的maven仓库</span><br><span class="line">mvn deploy - 将jar包deploy到远程maven仓库</span><br><span class="line">mvn source:jar - 单独打包源码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MAVEN常用基础知识。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识-异步回调模式</title>
    <link href="https://www.leezy.top/2020/03/18/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-Future%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.leezy.top/2020/03/18/JAVA基础知识-Future异步回调模式/</id>
    <published>2020-03-18T03:06:00.000Z</published>
    <updated>2020-11-28T08:46:52.499Z</updated>
    
    <content type="html"><![CDATA[<p>异步回调模式。</p><a id="more"></a><h3 id="JOIN异步阻塞"><a href="#JOIN异步阻塞" class="headerlink" title="JOIN异步阻塞"></a>JOIN异步阻塞</h3><p>操作原理：阻塞当前的线程，直到准备合并的目标线程的执行完成；即线程A调用了线程B的join方法，合并线程B，线程A则进入阻塞状态，直到线程B执行完成。</p><p><img src="/assets/blogImg/Future%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F_%E6%B3%A1%E8%8C%B6%E6%A1%88%E4%BE%8B.png" alt="Future异步回调模式_泡茶案例"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOStudy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 异步阻塞JOIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LEEZY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-18 15:28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">500</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurThreadName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HotWaterThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HotWaterThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"烧水线程"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WashThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WashThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"清洗线程"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread hotWaterThread = <span class="keyword">new</span> HotWaterThread();</span><br><span class="line">        Thread washThread = <span class="keyword">new</span> WashThread();</span><br><span class="line">        hotWaterThread.start();</span><br><span class="line">        washThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程阻塞，开启烧水和清洗线程</span></span><br><span class="line">            <span class="comment">// 合并烧水线程</span></span><br><span class="line">            hotWaterThread.join();</span><br><span class="line">            <span class="comment">// 合并清洗线程</span></span><br><span class="line">            washThread.join();</span><br><span class="line">            Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join方法是有三个重载版本：</p><ul><li>void join():A线程等待B线程执行结束后，A线程重新恢复执行。</li><li>void join(long millis):A线程等待B线程执行一段时间，最长等待时间为millis毫秒。超过millis毫秒后，不论B线程是否结束，A线程重新恢复执行。</li><li>void join(long millis, int nanos)：等待B线程执行一段时间，最长等待时间为millis毫秒，加nanos纳秒。超过时间后，不论B线程是否结束，A线程重新恢复执行。</li></ul><p>JOIN被合并的线程没有返回值，如果需要异步线程的执行结果，就需要用到Java的FutureTask系列类。</p><h3 id="FutureTask异步回调"><a href="#FutureTask异步回调" class="headerlink" title="FutureTask异步回调"></a>FutureTask异步回调</h3><ul><li><p>Callable接口：Callable接口是个泛型接口，与Runnable接口类似，唯一的区别是，其抽象方法call有返回值，返回值的类型为泛型形参的实际类型。但是Callable接口的实例不能作为Thread线程实例的target来使用，而Runnable接口实例可以作为Thread线程实例的target构造参数，开启一个Thread线程。其内部进行的是异步执行的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>FutureTask类：就像一座搭在Callable实例与Thread线程实例之间的桥。FutureTask类的内部封装一个Callable实例，然后自身间接继承了Runnable接口可以作为Thread线程的target。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.callable = callable;</span><br><span class="line">        <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOStudy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: FutureTask类实现喝茶实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LEEZY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-19 11:40</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaFutureDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">500</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurThreadName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现Callable接口，并返回异步线程执行结果</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HotWaterJob</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WashJob</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drinkTea</span><span class="params">(<span class="keyword">boolean</span> waterOK, <span class="keyword">boolean</span> teacupOK)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (waterOK &amp;&amp; teacupOK) &#123;</span><br><span class="line">            System.out.println(<span class="string">"喝茶"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!waterOK) &#123;</span><br><span class="line">            System.out.println(<span class="string">"烧水失败"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"洗杯子失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 异步逻辑</span></span><br><span class="line">        Callable&lt;Boolean&gt; hotWaterJob = <span class="keyword">new</span> HotWaterJob();</span><br><span class="line">        <span class="comment">// 创建FutureTask实例，创建新的线程</span></span><br><span class="line">        FutureTask&lt;Boolean&gt; hotWaterTask = <span class="keyword">new</span> FutureTask&lt;&gt;(hotWaterJob);</span><br><span class="line">        Thread hotWaterThread = <span class="keyword">new</span> Thread(hotWaterTask, <span class="string">"烧水线程"</span>);</span><br><span class="line"></span><br><span class="line">        Callable&lt;Boolean&gt; washJob = <span class="keyword">new</span> WashJob();</span><br><span class="line">        FutureTask&lt;Boolean&gt; washTask = <span class="keyword">new</span> FutureTask&lt;&gt;(washJob);</span><br><span class="line">        Thread washThread = <span class="keyword">new</span> Thread(washTask, <span class="string">"清洁线程"</span>);</span><br><span class="line"></span><br><span class="line">        hotWaterThread.start();</span><br><span class="line">        washThread.start();</span><br><span class="line"></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Boolean waterOK = hotWaterTask.get();</span><br><span class="line">            Boolean teacupOK = washTask.get();</span><br><span class="line">            drinkTea(waterOK, teacupOK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>P.S.FutureTask和Callable都是泛型类，泛型参数表示返回结果的类型。所以，在使用的时候，它们两个实例的泛型参数一定需要保持一致</code></p><ul><li>Future接口<br>Java将FutureTask类的一系列操作，抽象出来作为一个重要的接口，Future接口。主要提供了三个功能</li></ul><ol><li>判断并发任务是否执行完成</li><li>获取并发的任务完成后的结果</li><li>取消并发执行中的任务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 取消并发任务执行</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="comment">// 获取并发任务取消状态</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取并发任务执行状态</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取并发任务执行结果；阻塞性的，如果并发任务没有执行完成，调用该方法会一直阻塞直到并发任务执行完成</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="comment">// 获取并发任务执行结果；阻塞性的，如果阻塞时间超过设定的timeout时间，该方法会抛出异常</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上2种办法，通过FutureTask类和Join方法都是异步阻塞模式，效率都是比较低的。</p><h3 id="Guava的异步调用"><a href="#Guava的异步调用" class="headerlink" title="Guava的异步调用"></a>Guava的异步调用</h3><p>Guava增强了java.util.concurrent包，为了实现非阻塞获取异步线程的结果，Guava对Java的异步回调机制做了2个方面的增强。</p><ol><li>ListenableFuture，继承了Java的Future接口，使Java的Future异步任务在Guava中能被监控和获取非阻塞异步执行的结果。</li><li>FutureCallback，新接口，该接口的目的是在异步任务执行完成后，根据异步结果，完成不同的回调处理，可以处理异步结果。</li></ol><ul><li>FutureCallBack</li></ul><ol><li>onSuccess()： 在异步任务执行成功后被回调；调用时，异步任务的执行结果，作为onSuccess方法的参数被传入。</li></ol><ol start="2"><li>onFailure()：在异步任务执行过程中，抛出异常时被回调；调用时，异步任务所抛出的异常，作为onFailure方法的参数被传入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FutureCallback</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(@Nullable V var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ListenableFuture</li></ul><p>继承自Java的Future接口，增加了一个addListener方法，作用是将FutureCallback的回调封装成一个内部的Runnable异步回调任务，在Callable异步任务完成后，回调FutureCallback进行处理。</p><p>在实际编程中，将FutureCallback回调逻辑绑定到ListenableFuture的异步任务，可以通过Guava的Futures工具类的addCallback静态方法。</p><p>获取Guava的ListenableFuture异步任务实例，主要通过线程池ThreadPool提交Callable任务的方式来获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeFuture</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Java自带的Future模式，实现异步</span></span><br><span class="line">    ExecutorService nativeExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">    Future&lt;String&gt; nativeFuture = nativeExecutor.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 使用sleep模拟调用耗时</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]: 并发包Future返回结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Future只实现了异步，没有实现回调。此时主线程get结果时阻塞，可以轮询获取异步调用是否完成</span></span><br><span class="line">    System.out.println(<span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"] ==&gt;"</span> + nativeFuture.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">guavaFuture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Guava异步回调</span></span><br><span class="line">    ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    ListeningExecutorService guavaExecutor = MoreExecutors.listeningDecorator(executorService);</span><br><span class="line">    <span class="keyword">final</span> ListenableFuture&lt;String&gt; listenableFuture = guavaExecutor.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]: guava的Future返回结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 注册监听器，即异步调用完成时回在指定的线程Executors.newSingleThreadExecutor()中执行注册的监听器</span></span><br><span class="line">    listenableFuture.addListener(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String str = <span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]: guava对返回结果进行异步CallBack(Runnable):"</span> + listenableFuture.get();</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Executors.newSingleThreadExecutor());</span><br><span class="line">    <span class="comment">// 主线程可以继续执行，异步完成后会执行注册的监听器任务.</span></span><br><span class="line">    System.out.println(<span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]: guavaFuture执行结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">guavaFuture2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 除了ListenableFuture，guava还提供了FutureCallback接口</span></span><br><span class="line">    ExecutorService executorService2 = Executors.newSingleThreadExecutor();</span><br><span class="line">    ListeningExecutorService guavaExecutor2 = MoreExecutors.listeningDecorator(executorService2);</span><br><span class="line">    <span class="keyword">final</span> ListenableFuture&lt;String&gt; listenableFuture2 = guavaExecutor2.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]: guava的Future返回结果"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Futures.addCallback(listenableFuture2, <span class="keyword">new</span> FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(@Nullable String result)</span> </span>&#123;</span><br><span class="line">            String str = <span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]=======&gt;对回调结果【"</span> + result + <span class="string">"】进行FutureCallback"</span>;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Executors.newSingleThreadExecutor());</span><br><span class="line">    <span class="comment">// 主线程可以继续执行,异步完成后会执行注册的监听器任务.</span></span><br><span class="line">    System.out.println( <span class="string">"["</span> + Thread.currentThread().getName() +<span class="string">"]: guavaFuture2执行结束"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main] ==&gt;[pool-1-thread-1]: 并发包Future返回结果</span><br><span class="line">[main]: guavaFuture执行结束</span><br><span class="line">[pool-3-thread-1]: guava对返回结果进行异步CallBack(Runnable):[pool-2-thread-1]: guava的Future返回结果</span><br><span class="line">[main]: guavaFuture2执行结束</span><br><span class="line">[pool-5-thread-1]=======&gt;对回调结果【[pool-4-thread-1]: guava的Future返回结果】进行FutureCallback</span><br></pre></td></tr></table></figure><h3 id="Netty的异步回调模式"><a href="#Netty的异步回调模式" class="headerlink" title="Netty的异步回调模式"></a>Netty的异步回调模式</h3><p>Netty对JavaFuture异步任务拓展如下：</p><ol><li>继承Java的Future接口；</li><li>定义GenericFutureListener接口，异步执行结果监听器。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步回调模式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识-Reactor反应器模式</title>
    <link href="https://www.leezy.top/2020/03/15/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-Reactor%E5%8F%8D%E5%BA%94%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.leezy.top/2020/03/15/JAVA基础知识-Reactor反应器模式/</id>
    <published>2020-03-15T03:06:00.000Z</published>
    <updated>2020-11-28T08:46:52.500Z</updated>
    
    <content type="html"><![CDATA[<p>高性能的网络编程都离不开反应器模式，Nginx、Redis、Netty都采用了反应器模式。</p><a id="more"></a><h3 id="Reactor反应器模式"><a href="#Reactor反应器模式" class="headerlink" title="Reactor反应器模式"></a>Reactor反应器模式</h3><p>反应器模式由Reactor反应器线程、Handlers处理器两大角色组成：</p><ol><li><p>Reactor反应器线程的职责：负责响应NIO选择器监控的IO事件，并且分发到Handlers处理器。</p></li><li><p>Handlers处理器的职责：非阻塞的执行业务处理逻辑。</p></li></ol><h3 id="单线程的Reactor反应器"><a href="#单线程的Reactor反应器" class="headerlink" title="单线程的Reactor反应器"></a>单线程的Reactor反应器</h3><ul><li><p>void attach(Object object): 此方法可以将任何Java的POJO对象作为附件添加到SelectionKey实例</p></li><li><p>Object attachement(): 此方法的作用是取出通过attach(Object)添加到SelectionKey选择键实例的附件</p></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reactor.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOStudy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单线程Reactor反应器模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LEEZY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-17 10:39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Selector selector;</span><br><span class="line">    <span class="keyword">final</span> ServerSocketChannel serverSocket;</span><br><span class="line"></span><br><span class="line">    Reactor(<span class="keyword">int</span> port) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 打开选择器、ServerSocketChannel连接监听通道</span></span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        serverSocket = ServerSocketChannel.open();</span><br><span class="line">        serverSocket.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        serverSocket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        SelectionKey selectionKey = serverSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">// 将新连接处理器作为附件，绑定到serverSocket选择键</span></span><br><span class="line">        selectionKey.attach(<span class="keyword">new</span> AcceptorHandler());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 选择器轮询</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set selected = selector.selectedKeys();</span><br><span class="line">                Iterator iterator = selected.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="comment">// 反应器负责dispatch收到的事件</span></span><br><span class="line">                    SelectionKey selectionKey = (SelectionKey) iterator.next();</span><br><span class="line">                    dispatcher(selectionKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反应器分发类</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatcher</span><span class="params">(SelectionKey selectionKey)</span> </span>&#123;</span><br><span class="line">        Runnable handler = (Runnable) (selectionKey.attachment());</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handler.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新连接处理类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AcceptorHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SocketChannel socketChannel = serverSocket.accept();</span><br><span class="line">                <span class="keyword">if</span> (socketChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 调用Handler的构造方法，将SocketChannel注册到反应器Reactor类的同一个选择器，保证Reactor类和Handler类在同一个线程执行</span></span><br><span class="line">                    <span class="keyword">new</span> Handler(selector, socketChannel);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.media.jfxmedia.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: NIOStudy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LEEZY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-17 12:08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">final</span> SelectionKey selectionKey;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READING = <span class="number">0</span>, SENDING = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> state = READING;</span><br><span class="line"></span><br><span class="line">    Handler(Selector selector, SocketChannel socketChannel) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">this</span>.socketChannel = socketChannel;</span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置感兴趣的IO事件</span></span><br><span class="line">        selectionKey = socketChannel.register(selector, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 将Handler自身作为选择键的附件，这样在Reactor类分发事件时能执行到该Handler的run方法</span></span><br><span class="line">        selectionKey.attach(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 注册Read就绪事件</span></span><br><span class="line">        selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        selector.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (state == SENDING) &#123;</span><br><span class="line">                <span class="comment">// 写入通道</span></span><br><span class="line">                socketChannel.write(byteBuffer);</span><br><span class="line">                <span class="comment">// 转换为写入模式</span></span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">                <span class="comment">// 写入完成后注册read就绪事件</span></span><br><span class="line">                selectionKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                <span class="comment">// 更改状态</span></span><br><span class="line">                state = READING;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 从通道读取</span></span><br><span class="line">                <span class="keyword">while</span>((length = socketChannel.read(byteBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, length));</span><br><span class="line">                &#125;</span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                selectionKey.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">                state = SENDING;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程Reactor反应器"><a href="#多线程Reactor反应器" class="headerlink" title="多线程Reactor反应器"></a>多线程Reactor反应器</h3><p>总体来说，多线程池反应器的模式，大致如下：</p><ul><li><p>将负责输入输出处理的IOHandler处理器的执行，放入独立的线程池中。这样，业务处理线程与负责服务监听和IO事件查询的反应器线程相隔离，避免服务器的连接监听受到阻塞。</p></li><li><p>如果服务器为多核的CPU，可以将反应器线程拆分为多个子反应器（SubReactor）线程；同时，引入多个选择器，每一个SubReactor子线程负责一个选择器。这样，充分释放了系统资源的能力；也提高了反应器管理大量连接，提升选择大量通道的能力。</p></li><li><p>多线程Reactor反应器实践</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...．反应器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiThreadEchoServerReactor</span> </span>&#123;</span><br><span class="line">    ServerSocketChannelserverSocket;</span><br><span class="line">    AtomicInteger next = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//选择器集合，引入多个选择器</span></span><br><span class="line">    Selector[] selectors = <span class="keyword">new</span> Selector[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//引入多个子反应器</span></span><br><span class="line">    SubReactor[] subReactors = <span class="keyword">null</span>;</span><br><span class="line">    MultiThreadEchoServerReactor() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//初始化多个选择器</span></span><br><span class="line">      selectors[<span class="number">0</span>] = Selector.open();</span><br><span class="line">      selectors[<span class="number">1</span>] = Selector.open();</span><br><span class="line">      serverSocket = ServerSocketChannel.open();</span><br><span class="line">      InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(NioDemoConfig.SOCKET_SERVER_IP, NioDemoConfig.SOCKET_SERVER_PORT);</span><br><span class="line">      serverSocket.socket().bind(address);</span><br><span class="line">      <span class="comment">//非阻塞</span></span><br><span class="line">      serverSocket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">//第一个选择器，负责监控新连接事件</span></span><br><span class="line">      SelectionKeysk = serverSocket.register(selectors[<span class="number">0</span>], SelectionKey.OP_ACCEPT);</span><br><span class="line">      <span class="comment">//绑定Handler:attach新连接监控handler处理器到SelectionKey（选择键）</span></span><br><span class="line">      sk.attach(<span class="keyword">new</span> AcceptorHandler());</span><br><span class="line">      <span class="comment">//第一个子反应器，一子反应器负责一个选择器</span></span><br><span class="line">      SubReactor subReactor1 = <span class="keyword">new</span> SubReactor(selectors[<span class="number">0</span>]);</span><br><span class="line">      <span class="comment">//第二个子反应器，一子反应器负责一个选择器</span></span><br><span class="line">      SubReactor subReactor2 = <span class="keyword">new</span> SubReactor(selectors[<span class="number">1</span>]);</span><br><span class="line">      subReactors = <span class="keyword">new</span> SubReactor[]&#123;subReactor1, subReactor2&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 一子反应器对应一个线程</span></span><br><span class="line">      <span class="keyword">new</span> Thread(subReactors[<span class="number">0</span>]).start();</span><br><span class="line">      <span class="keyword">new</span> Thread(subReactors[<span class="number">1</span>]).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//子反应器</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">SubReactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">      <span class="comment">//每个线程负责一个选择器的查询和选择</span></span><br><span class="line">      <span class="keyword">final</span> Selector selector;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">SubReactor</span><span class="params">(Selector selector)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.selector = selector;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (! Thread.interrupted()) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt;keySet = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; it = keySet.iterator();</span><br><span class="line">                <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                    <span class="comment">//反应器负责dispatch收到的事件</span></span><br><span class="line">                    SelectionKeysk = it.next();</span><br><span class="line">                    dispatch(sk);</span><br><span class="line">                &#125;</span><br><span class="line">            keySet.clear();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(SelectionKeysk)</span> </span>&#123;</span><br><span class="line">          Runnable handler = (Runnable) sk.attachment();</span><br><span class="line">          <span class="comment">//调用之前attach绑定到选择键的handler处理器对象</span></span><br><span class="line">          <span class="keyword">if</span> (handler ! = <span class="keyword">null</span>) &#123;</span><br><span class="line">            handler.run();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// Handler：新连接处理器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AcceptorHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              SocketChannel channel = serverSocket.accept();</span><br><span class="line">              <span class="keyword">if</span> (channel ! = <span class="keyword">null</span>)</span><br><span class="line">                  <span class="keyword">new</span> MultiThreadEchoHandler(selectors[next.get()], channel);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (next.incrementAndGet() == selectors.length) &#123;</span><br><span class="line">              next.set(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        MultiThreadEchoServerReactor server =</span><br><span class="line">                  <span class="keyword">new</span> MultiThreadEchoServerReactor();</span><br><span class="line">        server.startService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多线程Handler处理器实践</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiThreadEchoHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SocketChannel channel;</span><br><span class="line">    <span class="keyword">final</span> SelectionKeysk;</span><br><span class="line">    <span class="keyword">final</span> ByteBufferbyteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECIEVING = <span class="number">0</span>, SENDING = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> state = RECIEVING;</span><br><span class="line">    <span class="comment">//引入线程池</span></span><br><span class="line">    <span class="keyword">static</span> ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">    MultiThreadEchoHandler(Selector selector, SocketChannel c) <span class="keyword">throws</span></span><br><span class="line">IOException &#123;</span><br><span class="line">      channel = c;</span><br><span class="line">      c.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">//取得选择键，、再设置感兴趣的IO事件</span></span><br><span class="line">      sk = channel.register(selector, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//将本Handler作为sk选择键的附件，方便事件分发（dispatch）</span></span><br><span class="line">      sk.attach(<span class="keyword">this</span>);</span><br><span class="line">      <span class="comment">//向sk选择键注册Read就绪事件</span></span><br><span class="line">      sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">      selector.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//异步任务，在独立的线程池中执行</span></span><br><span class="line">      pool.execute(<span class="keyword">new</span> AsyncTask());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//业务处理，不在反应器线程中执行</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">asyncRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (state == SENDING) &#123;</span><br><span class="line">            <span class="comment">//写入通道</span></span><br><span class="line">            channel.write(byteBuffer);</span><br><span class="line">            <span class="comment">//写完后，准备开始从通道读，byteBuffer切换成写入模式</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            <span class="comment">//写完后，注册read就绪事件</span></span><br><span class="line">            sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">            <span class="comment">//写完后，进入接收的状态</span></span><br><span class="line">            state = RECIEVING;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == RECIEVING) &#123;</span><br><span class="line">            <span class="comment">//从通道读</span></span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = channel.read(byteBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Logger.info(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, length));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读完后，准备开始写入通道，byteBuffer切换成读取模式</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            <span class="comment">//读完后，注册write就绪事件</span></span><br><span class="line">            sk.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">            <span class="comment">//读完后，进入发送的状态</span></span><br><span class="line">            state = SENDING;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//处理结束了，这里不能关闭select key，需要重复使用</span></span><br><span class="line">          <span class="comment">//sk.cancel();</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">          ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//异步任务的内部类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          MultiThreadEchoHandler.<span class="keyword">this</span>.asyncRun();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高性能的网络编程都离不开反应器模式，Nginx、Redis、Netty都采用了反应器模式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识-NIO</title>
    <link href="https://www.leezy.top/2020/03/09/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-NIO/"/>
    <id>https://www.leezy.top/2020/03/09/JAVA基础知识-NIO/</id>
    <published>2020-03-09T03:06:00.000Z</published>
    <updated>2020-11-28T08:46:52.500Z</updated>
    
    <content type="html"><![CDATA[<p>Java中IO模型。</p><a id="more"></a><h2 id="常用的四种IO模型"><a href="#常用的四种IO模型" class="headerlink" title="常用的四种IO模型"></a>常用的四种IO模型</h2><h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><p>在Java应用程序进程中，默认情况下，所有的socket连接的IO操作都是同步阻塞IO(BlockingIO);在阻塞式IO模型中，Java应用程序从IO系统调用开始，直到系统调用返回，在这段时间内，Java进程是阻塞的。返回成功后，应用进程开始处理用户空间的缓存区数据。<br>在Java中发起一个socket的read读操作的系统调用，流程大致如下：</p><ol><li>从Java启动IO读read系统调用开始，用户线程就进入阻塞状态。</li><li>当系统内核收到read系统调用，就开始准备数据。一开始，数据可能还没开始到达内核缓冲区（例如，还没有收到一个完整的socket数据包），这个时候内核就要等待。</li><li>内核一直等到完整的数据到达，就会将数据从内核缓冲区中复制到用户缓冲区（用户空间的内存），然后内核返回结果（例如返回复制到用户缓冲区中的字节数）。</li><li>直到内核返回后，用户线程才会接触阻塞的状态，重新运行起来。<br>总之，阻塞IO的特点是：在内核进行IO执行的两个阶段，用户线程都被阻塞了。</li></ol><h3 id="同步非阻塞NIO"><a href="#同步非阻塞NIO" class="headerlink" title="同步非阻塞NIO"></a>同步非阻塞NIO</h3><p>socket连接默认是阻塞模式，在Linux系统下，可以通过设置将socket变成为非阻塞的模式（Non-Blocking）。使用非阻塞模式的IO读写，叫作同步非阻塞IO（None Blocking IO），简称为NIO模式。在NIO模型中，应用程序一旦开始IO系统调用，会出现以下两种情况：</p><ol><li>在内核数据没有准备好的阶段，用户线程发起IO请求时，立即返回。所以，为了读取到最终的数据，用户线程需要不断地发起IO系统调用。</li><li>在内核缓冲区中有数据的情况下，是阻塞的，直到数据从内核缓冲复制到用户进程缓冲。复制完成后，系统调用返回成功，应用进程开始处理用户空间的缓存数据。</li></ol><p>举个例子。发起一个非阻塞socket的read读操作的系统调用，流程如下：</p><ol><li>在内核数据没有准备好的阶段，用户线程发起IO请求时，立即返回。所以，为了读取到最终的数据，用户线程需要不断地发起IO系统调用。</li><li>内核数据到达后，用户线程发起系统调用，用户线程阻塞。内核开始复制数据，它会将数据从内核缓冲区复制到用户缓冲区（用户空间的内存），然后内核返回结果（例如返回复制到的用户缓冲区的字节数）。</li><li>用户线程读到数据后，才会解除阻塞状态，重新运行起来。也就是说，用户进程需要经过多次的尝试，才能保证最终真正读到数据，而后继续执行。同步非阻塞IO的特点：应用程序的线程需要不断地进行IO系统调用，轮询数据是否已经准备好，如果没有准备好，就继续轮询，直到完成IO系统调用为止。同步非阻塞IO的优点：每次发起的IO系统调用，在内核等待数据过程中可以立即返回。用户线程不会阻塞，实时性较好。同步非阻塞IO的缺点：不断地轮询内核，这将占用大量的CPU时间，效率低下。</li></ol><h3 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h3><p>举个例子来说明IO多路复用模型的流程。发起一个多路复用IO的read读操作的系统调用，流程如下：</p><ol><li>选择器注册。在这种模式中，首先，将需要read操作的目标socket网络连接，提前注册到select/epoll选择器中，Java中对应的选择器类是Selector类。然后，才可以开启整个IO多路复用模型的轮询流程。</li><li>就绪状态的轮询。通过选择器的查询方法，查询注册过的所有socket连接的就绪状态。通过查询的系统调用，内核会返回一个就绪的socket列表。当任何一个注册过的socket中的数据准备好了，内核缓冲区有数据（就绪）了，内核就将该socket加入到就绪的列表中。当用户进程调用了select查询方法，那么整个线程会被阻塞掉。</li><li>用户线程获得了就绪状态的列表后，根据其中的socket连接，发起read系统调用，用户线程阻塞。内核开始复制数据，将数据从内核缓冲区复制到用户缓冲区。</li><li>复制完成后，内核返回结果，用户线程才会解除阻塞的状态，用户线程读取到了数据，继续执行。</li></ol><p>IO多路复用模型的优点：与一个线程维护一个连接的阻塞IO模式相比，使用select/epoll的最大优势在于，一个选择器查询线程可以同时处理成千上万个连接（Connection）。系统不必创建大量的线程，也不必维护这些线程，从而大大减小了系统的开销。Java语言的NIO（New IO）技术，使用的就是IO多路复用模型。在Linux系统上，使用的是epoll系统调用。</p><p>IO多路复用模型的缺点：本质上，select/epoll系统调用是阻塞式的，属于同步IO。都需要在读写事件就绪后，由系统调用本身负责进行读写，也就是说这个读写过程是阻塞的。</p><h3 id="异步IO模型-AIO-Asynchronous-IO"><a href="#异步IO模型-AIO-Asynchronous-IO" class="headerlink" title="异步IO模型 - AIO (Asynchronous IO)"></a>异步IO模型 - AIO (Asynchronous IO)</h3><p>在异步IO模型中，在整个内核的数据处理过程中，包括内核将数据从网络物理设备（网卡）读取到内核缓冲区、将内核缓冲区的数据复制到用户缓冲区，用户程序都不需要阻塞。<br>发起一个异步IO的read读操作的系统调用，流程如下：</p><ol><li>当用户线程发起了read系统调用，立刻就可以开始去做其他事情，用户线程不阻塞。</li><li>内核就开始了IO的第一个阶段：准备数据。等到数据准备好了，内核就会将数据从内核缓冲区复制到用户缓冲区（用户空间的内存）。</li><li>内核会给用户线程发送一个信号（Signal），或者回调用户线程注册的回调接口，告诉用户线程read操作完成了。</li><li>用户线程读取用户缓冲区的数据，完成后续的业务操作。</li></ol><p>异步IO模型的特点：在内核等待数据和复制数据的两个阶段，用户线程都不是阻塞的。用户线程需要接收内核的IO操作完成的事件，或者用户线程需要注册一个IO操作完成的回调函数。正因为如此，异步IO有的时候也被称为信号驱动IO。</p><p>异步IO异步模型的缺点：应用程序仅需要进行事件的注册与接收，其余的工作都留给了操作系统，也就是说，需要底层内核提供支持。</p><h2 id="JAVA-NIO-模型"><a href="#JAVA-NIO-模型" class="headerlink" title="JAVA NIO 模型"></a>JAVA NIO 模型</h2><p>Java NIO由以下三个核心组件组成：</p><ol><li>Channel (通道)</li><li>Buffer (缓冲区)</li><li>Selector (选择器)</li></ol><p>从Java 1.4版本之后，Java的IO类库从阻塞IO升级为了非阻塞IO，即-JAVA NIO(New IO)，底层使用的是IO多路复用模型。</p><p>NIO与OIO的区别，主要体现在三个方面：</p><ol><li>OIO是面向流的，NIO是面向缓冲区的。</li></ol><p>OIO操作中，我们以流式的方式顺序地从一个流（stream）中读取字节，不能随意改变读取指针的位置。在NIO中，引入了Channel和Buffer的概念，读取和写入只需要从通道中读取数据到缓冲区，或将数据从缓冲区中写入到通道中。</p><ol start="2"><li>OIO的操作是阻塞的，而NIO的操作是非阻塞的。</li></ol><p>OIO的阻塞体现在调用一个read方法读取一个文件内容，那么调用read的线程会被阻塞，直到read操作完成。</p><ol start="3"><li>OIO没有选择器，而NIO是有选择器的概念的。</li></ol><p>NIO的实现，是基于底层的选择器的系统调用。NIO的选择器，需要底层操作系统提供支持, 而OIO不需要用到选择器。</p><h3 id="NIO-Buffer类"><a href="#NIO-Buffer类" class="headerlink" title="NIO Buffer类"></a>NIO Buffer类</h3><p>Buffer类是一个非线程安全的类，Buffer类是一个抽象类，对应于Java的主要数据类型，在NIO中有8种缓冲区类，分别如下：ByteBuffer、CharBuffer、DoubleBuffer、FloatBuffer、IntBuffer、LongBuffer、ShortBuffer、MappedByteBuffer。前7种Buffer类型，覆盖了能在IO中传输的所有的Java基本数据类型。第8种类型MappedByteBuffer是专门用于内存映射的一种ByteBuffer类型。<br>Buffer类的属性：</p><ul><li><p>capacity （容量）： capacity容量指的是写入的数据对象的数量；</p></li><li><p>positiohn （读写位置）： 缓冲区中喜爱一个要被读或者写的元素的索引；</p></li><li><p>limit （上限）： 缓冲区当前的数据量；</p></li><li><p>mark （标记）：调用mark()方法设置mark=position，再调用reset()可以让position恢复到mark标记的位置即postion=mark; </p></li></ul><h3 id="NIO-Buffer的操作方法"><a href="#NIO-Buffer的操作方法" class="headerlink" title="NIO Buffer的操作方法"></a>NIO Buffer的操作方法</h3><ul><li><code>allocate()</code> 创建缓冲区</li><li><code>put()</code> 写入到缓冲区；要写入缓冲区，需要调用put方法。put方法很简单，只有一个参数，即为所需要写入的对象。不过，写入的数据类型要求与缓冲区的类型保持一致。</li><li><code>flip()</code> 读写模式反转；调用flip方法后，之前写入模式的position的值会变成可读上限的值，新的读取模式下的position，会变成0，表示从头开始读取。清除之前的mark标记，因为mark保存的是写模式下的临时位置</li><li><code>get()</code> 从缓冲区读取；读取操作会改变可读位置position的值，而limit值不会改变。如果position值和limit的值相等，表示所有数据读取完成，position指向了一个没有数据的元素位置，已经不能再读了。此时再读，会抛出BufferUnderflowException异常。</li><li><code>rewind()</code> 数据倒带；已经读完的数据，如果需要再读一遍，可以调用rewind()方法。rewind调整了缓冲区position属性，position重置为0，可以重读缓冲区中所有的数据，limit保持不变，数据量还是一样的，仍然表示能从缓冲区中读取多少个元素。</li><li><code>mark()</code>和<code>reset()</code> mark()将当前的position的值保存起来，放到mark属性中，reset()方法将mark的值恢复到position中。</li><li><code>clear()</code> 清空缓冲区；在读取模式下，调用clear方法将缓冲区切换为写入模式，此方法会将position清零，limit设置为capacity最大容量值，可以一直写入，直到缓冲区写满。</li></ul><h3 id="NIO-Channel类"><a href="#NIO-Channel类" class="headerlink" title="NIO Channel类"></a>NIO Channel类</h3><p>最为重要的四种Channel（通道）实现：FileChannel、SocketChannel、ServerSocketChannel、DatagramChannel。</p><h3 id="FileChannel文件通道"><a href="#FileChannel文件通道" class="headerlink" title="FileChannel文件通道"></a>FileChannel文件通道</h3><ul><li><p>获取FileChannel文件通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件输入流</span></span><br><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"filePath"</span>);</span><br><span class="line"><span class="comment">// 获取文件流的通道</span></span><br><span class="line">FileChannel inChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件输出流</span></span><br><span class="line">FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"filePath"</span>);</span><br><span class="line"><span class="comment">// 获取文件流通道</span></span><br><span class="line">FileChannel outChannel = fileOutputStream.getChannel();</span><br></pre></td></tr></table></figure></li><li><p>读取FileChannel通道</p></li></ul><p>在大部分应用场景从通道读取数据都会调用通道的int read（ByteBufferbuf）方法，它从通道读取到数据写入到ByteBuffer缓冲区，并且返回读取到的数据量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个字节缓冲区 注意，新建的ByteBuffer默认是写入模式。在读取数据时需要调用flip或者clear方法切换</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 调用通道的read方法，读取数据并传入字节类型的缓冲区</span></span><br><span class="line"><span class="keyword">int</span> length = inChannel.read(byteBuffer);</span><br></pre></td></tr></table></figure><ul><li>写入FileChannel通道</li></ul><p>写入数据到通道，在大部分应用场景，都会调用通道的int write（ByteBufferbuf）方法。此方法的参数——ByteBuffer缓冲区，是数据的来源。write方法的作用，是从ByteBuffer缓冲区中读取数据，然后写入到通道自身，而返回值是写入成功的字节数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byteBuffer.flip();</span><br><span class="line"><span class="keyword">int</span> length = outChannel.write(byteBuffer);</span><br></pre></td></tr></table></figure><ul><li>关闭通道</li></ul><p>当通道使用完成后，必须将其关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.close();</span><br></pre></td></tr></table></figure><ul><li>强制刷新到磁盘</li></ul><p>由于性能原因，要保证写入的通道的缓存数据最终都写入磁盘，要调用FileChannel的force()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.force(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="SocketChannel套接字通道-ServerSocketChannel"><a href="#SocketChannel套接字通道-ServerSocketChannel" class="headerlink" title="SocketChannel套接字通道/ServerSocketChannel"></a>SocketChannel套接字通道/ServerSocketChannel</h3><p>在NIO中，涉及网络连接的通道有两个，一个是SocketChannel负责连接传输，一个ServerSocketChannel负责连接监听。<br>NIO的SocketChannel对应OIO的Socket类， 一般同时位于服务器端和客户端。对应于一个连接，两端都有一个负责传输的SocketChannel。<br>NIO的ServerSocket对应OIO的ServerSocket类，一般位于服务器端。<br>无论是SocketChannel还是ServerSocketChannel都支持阻塞和非阻塞两种模式，调用configureBlocking方法。socketChannel.configureBlocking(false)设置为非阻塞模式，socketChannel.configureBlocking(true)设置为阻塞模式。</p><ul><li>获取SocketChannel传输通道<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 客户端 */</span></span><br><span class="line"><span class="comment">// 获得一个套接字传输通道</span></span><br><span class="line">SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line"><span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 对服务器的IP和端口发起连接</span></span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">80</span>));</span><br><span class="line">```java</span><br><span class="line">非阻塞情况下，与服务器的连接可能还没有真正建立，socketChannel.connect方法就返回了，因此需要不断地自旋，检查当前是否是连接到了主机：</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">while</span>(!socketChannel.finishConnect()) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 服务器端 */</span></span><br><span class="line"><span class="comment">// 通过事件，获取服务器监听通道</span></span><br><span class="line">ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();</span><br><span class="line"><span class="comment">// 获取新连接的套接字通道</span></span><br><span class="line">SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"><span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li><p>读取SocketChannel传输通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个字节缓冲区 - 写入模式</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 如果返回-1，表示读取到了对方的输出结束标志</span></span><br><span class="line"><span class="keyword">int</span> read_length = socketChannel.read(byteBuffer);</span><br></pre></td></tr></table></figure></li><li><p>写入到SocketChannel传输通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的写入模式切换为读取模式</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line">socketChannel.write(buffer);</span><br></pre></td></tr></table></figure></li></ul><h3 id="关闭SocketChannel传输通道"><a href="#关闭SocketChannel传输通道" class="headerlink" title="关闭SocketChannel传输通道"></a>关闭SocketChannel传输通道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止输出方法，向对方发送一个输出的结束标志</span></span><br><span class="line">socketChannel.shutdownOutput();</span><br><span class="line"><span class="comment">// 关闭套接字连接</span></span><br><span class="line">IOUtil.closeQuietly(socketChannel);</span><br></pre></td></tr></table></figure><h3 id="DatagramChannel数据报通道"><a href="#DatagramChannel数据报通道" class="headerlink" title="DatagramChannel数据报通道"></a>DatagramChannel数据报通道</h3><p>DatagramChannel是采用UDP进行传输的面向非连接的协议，只要直到服务器的IP和端口，就可以直接向对方发送数据。</p><ul><li>获取DatagramChannel数据报通道</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取通道</span></span><br><span class="line">DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line"><span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">datagramChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">datagramChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">18080</span>));</span><br></pre></td></tr></table></figure><ul><li><p>读取DatagramChannel数据报通道数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">SocketAddress address = datagramChannel.receive(byteBuffer);</span><br></pre></td></tr></table></figure></li><li><p>写入DatagramChannel数据通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把缓冲区切换到读取模式</span></span><br><span class="line">byteBuffer.flip()</span><br><span class="line"><span class="comment">// 调用send方法，把数据发送到目标IP和端口</span></span><br><span class="line">datagramChannel.send(byteBuffer, <span class="keyword">new</span> InetSocketAddress(NIODemoConfig.SOCKET_SERVER_IP, NIODemoConfig.SOCKET+SERVER_PORT));</span><br><span class="line"><span class="comment">// 清空缓冲区，切换到写入模式</span></span><br><span class="line">byteBuffer,clear();</span><br></pre></td></tr></table></figure></li><li><p>关闭DatagramChannel数据报通道</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datagramChannel.close();</span><br></pre></td></tr></table></figure><h3 id="NIO-Selector-选择器"><a href="#NIO-Selector-选择器" class="headerlink" title="NIO Selector 选择器"></a>NIO Selector 选择器</h3><p>选择器的作用是完成IO的多路复用，一个通道代表一个连接通路，通过选择器可以同时监控多个通道的IO状况，选择器和通道的关系，是监控和被监控的关系。<br>通道和选择器之间的关系，通过<code>register（注册</code>）的方式完成。调用通道的<code>Channel.register(Selector selector, int ops)</code>方法，可以将通道实例注册到一个选择器中。</p><ul><li>Selector selector: 指定通道注册到的选择器实例；</li><li>int operation 指定选择器要监控的IO事件类型。可供选择器监控的通道IO事件类型，包括以下四种：</li></ul><ol><li>可读就绪：SelectionKey.OP_READ</li><li>可写就绪：SelectionKey.OP_WRITE</li><li>连接就绪：SelectionKey.OP_CONNECT</li><li>接收就绪：SelectionKey.OP_ACCEPT</li></ol><p>除了FileChannel文件通道外，其他选择器都是可选择的。这是因为其他三个通道都继承了一个SelectableChannel这个抽象类。</p><ul><li>SelectionKey选择键: 指的是被选择器选中的IO事件；一个IO事件发生（就绪状态达成）后，如果之前在选择器中注册过，就会被选择器选中，并放入SelectionKey选择键集合；如果之前没有注册过，即使发生了IO事件，也不会被选择器选中。</li></ul><p>选择器使用流程： </p><ul><li><p>获取选择器实例<br>Selector选择器的类方法open()的内部，是向选择器SPI（SelectorProvider）发出请求，通过默认的SelectorProvider（选择器提供者）对象，获取一个新的选择器实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用静态工厂方法open()来获取</span></span><br><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure></li><li><p>将通道注册到选择器中<br>其次，还需要注意：一个通道，并不一定要支持所有的四种IO事件。例如服务器监听通道ServerSocketChannel，仅仅支持Accept（接收到新连接）IO事件；而SocketChannel传输通道，则不支持Accept（接收到新连接）IO事件。如何判断通道支持哪些事件呢？可以在注册之前，可以通过通道的<code>validOps()</code>方法，来获取该通道所有支持的IO事件集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取通道</span></span><br><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"><span class="comment">// 设置为非阻塞</span></span><br><span class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 绑定连接</span></span><br><span class="line">serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(SystemConfig.SOCKET_SERVER_PORT));</span><br><span class="line"><span class="comment">// 将通道注册到选择器上，并制定监听事件为接收就绪事件</span></span><br><span class="line">serverSocketChannel.register(Selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure></li><li><p>轮询感兴趣的IO就绪事件<br>通过Selector选择器的select()方法，选出已经注册的、已经就绪的IO事件，保存到SelectionKey选择键集合中, 该方法返回int类型的<code>IO事件通道数量</code>；SelectionKey集合保存在选择器实例内部，是一个元素为SelectionKey类型的集合（Set）。调用选择器的selectedKeys()方法，可以取得选择键集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 轮询，选择IO就绪事件 有多个重载的实现方法</span></span><br><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Set selectKeys = selector.selectedKeys();</span><br><span class="line">    Iterator keyIterator = selectedKeys.iterator();</span><br><span class="line">    <span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">        SelectionKey key = keyIterator.next();</span><br><span class="line">        <span class="comment">// 根据具体IO事件类型，执行对应的业务逻辑</span></span><br><span class="line">        <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// IO事件：ServerSocketChannel服务器监听通道有新连接</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">            <span class="comment">// IO事件：传输通道连接成功</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// IO事件：传输通道可读</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">            <span class="comment">// IO事件：传输通道可写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理完成后，移除选择键</span></span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中IO模型。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kafka学习指南</title>
    <link href="https://www.leezy.top/2020/02/07/Kafka%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>https://www.leezy.top/2020/02/07/Kafka学习指南/</id>
    <published>2020-02-07T08:49:21.000Z</published>
    <updated>2020-11-28T08:46:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>Kafka相关的技术知识，本文内容均基于 Ubuntu 18.04 虚拟机进行。说明，本文档共涉及6台服务器<br>192.168.56.101 - kafka0<br>192.168.56.102 - kafka1<br>192.168.56.103 - kafka2<br>192.168.56.104 - zookeeper0<br>192.168.56.105 - zookeeper1<br>192.168.56.106 - zookeeper2</p><a id="more"></a><p>Kafka将所有消息组织成多个topic的形式存储，而每个topic又可以拆分为多个partition，每个partition又由一个一个的消息组成，每个消息都被标识了一个递增的序列号代表其进来的先后顺序，并按照顺序存储到partition；</p><ul><li><p>producer选择一个topic，生产消息，消息会通过分配策略append到某个partition末尾</p></li><li><p>consumer选择一个topic, 通过id指定从那个位置开始消费消息。消费完成之后保留id，下次可以从这个位置开始继续消费，也可以从其他任意位置开始消费，这里的id即为offset。<br>一个典型的 Kafka 体系架构包括若干 Producer、若干 Broker、若干 Consumer，以及一个ZooKeeper集群，其中ZooKeeper是Kafka用来负责集群元数据的管理、控制器的选举等操作的。Producer将消息发送到Broker，Broker负责将收到的消息存储到磁盘中，而Consumer负责从Broker订阅并消费消息。</p></li></ul><p><img src="/assets/blogImg/Kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" alt="Kafka基本概念"></p><h1 id="Kafka的安装配置"><a href="#Kafka的安装配置" class="headerlink" title="Kafka的安装配置"></a>Kafka的安装配置</h1><h2 id="Ubuntu服务器环境下Kafka安装与配置"><a href="#Ubuntu服务器环境下Kafka安装与配置" class="headerlink" title="Ubuntu服务器环境下Kafka安装与配置"></a>Ubuntu服务器环境下Kafka安装与配置</h2><h3 id="Zookeeper安装与配置-standalone模式"><a href="#Zookeeper安装与配置-standalone模式" class="headerlink" title="Zookeeper安装与配置 - standalone模式"></a>Zookeeper安装与配置 - standalone模式</h3><ol><li>首先安装JAVA环境，下载jdk tar.gz安装包，上传到<code>/usr/local</code>路径下，并执行<code>tar -zxvf jdk-8u241-linux-x64.tar.gz</code>解压。然后修改系统配置文件<code>vim /etc/profile</code>。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_241</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure></li></ol><p>使得配置文件生效<code>source /etc/profile</code></p><ol start="2"><li>下载zookeeper, <a href="https://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.5.6/" target="_blank" rel="noopener">这里</a>, 解压到<code>/usr/local/</code>, <code>tar -zxvf /usr/local/apache-zookeeper-3.5.6-bin.tar.gz</code>, 修改config目录下的<code>zoo_sample.cfg</code>重命名为<code>zoo.cfg</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> zk中的时间单元，zk中所有时间都以此时间单元为基准，进行整数倍配置</span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta">#</span> follower在启动过程中，会从leader同步所有最新数据，确定自己能够对外服务的起始状态。</span><br><span class="line"><span class="meta">#</span> 当follower在initLimit个tickTime还没完成数据同步时，则leader认为follower连接失败。</span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta">#</span> leader与Follower之间通信请求和应答的时间长度。</span><br><span class="line"><span class="meta">#</span> 当leader在syncLimit个tickTime还没有收到follower的应答，则认为leader已下线。</span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta">#</span> 快照文件存储目录，如果不配置dataLogDir，则事务日志也会保存在这个目录（不推荐）</span><br><span class="line">dataDir=/opt/data/zookeeper/data</span><br><span class="line"><span class="meta">#</span> 事务日志存储目录</span><br><span class="line">dataLogDir=/opt/data/zookeeper/logs</span><br><span class="line"><span class="meta">#</span> zk对外提供服务端口</span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta">#</span> the maximum number of client connections.</span><br><span class="line"><span class="meta">#</span> increase this if you need to handle more clients</span><br><span class="line"><span class="meta">#</span>maxClientCnxns=60</span><br></pre></td></tr></table></figure></li></ol><p>修改zookeeper环境变量，节省操作步骤<code>vim /etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/apache-zookeeper-3.5.6</span><br><span class="line"><span class="meta">#</span> 在文件的Path配置项里添加下列配置，注意有:号</span><br><span class="line">:$&#123;ZOOKEEPER_HOME&#125;/bin</span><br></pre></td></tr></table></figure><p>更新环境变量<code>source /etc/profile</code>。启动Zookeeper<code>zkServer.sh start</code>。如果遇到<code>Permission denied</code>的问题就授权给zk的安装目录<code>chmod -R 755 /usr/local/apache-zookeeper-3.5.6/</code>。可以通过<code>zkServer.sh status</code>查看运行状态。通过<code>jps</code>可以看到zk对应的java进程。</p><p><img src="/assets/blogImg/Zookeeper%E5%AE%89%E8%A3%85.png" alt="Zookeeper安装"><br>还可以通过以下命令通过zk客户端进行连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 登录zk服务器</span><br><span class="line">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>执行<code>ls /</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 0] ls /</span><br><span class="line"><span class="meta">#</span> 只有一个zookeeper节点</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><h3 id="Zookeeper安装与配置-集群模式"><a href="#Zookeeper安装与配置-集群模式" class="headerlink" title="Zookeeper安装与配置 - 集群模式"></a>Zookeeper安装与配置 - 集群模式</h3><p>与单机模式类似，集群模式需要对机器进行映射。我本地有三台zk的虚拟机，单机的配置，这三台集群都要有。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.104 - zookeeper0</span><br><span class="line">192.168.56.105 - zookeeper1</span><br><span class="line">192.168.56.106 - zookeeper2</span><br></pre></td></tr></table></figure><p>然后进入其中一台机器的ZooKeeper安装路径conf目录。这里我们选择先在<code>IP为192.168.56.104</code>的机器上进行配置，编辑<code>conf/zoo.cfg</code>文件，在该文件中添加以下配置：</p><p><em>server.N=N-server-IP:A:B 其中N是一个数字, 表示这是第几号server，它的值和myid文件中的值对应。N-server-IP是第N个server所在的IP地址。A是配置该server和集群中的leader交换消息所使用的端口。B配置选举leader时服务器相互通信所使用的端口。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在每个zk的配置文件里都同时配置三台机器</span><br><span class="line">server.1=192.168.56.104:2888:3888</span><br><span class="line">server.2=192.168.56.105:2888:3888</span><br><span class="line">server.3=192.168.56.106:2888:3888</span><br></pre></td></tr></table></figure><p>接着在<code>${dataDir}</code>路径下创建一个<code>myid文件</code>。myid里存放的值就是<code>服务器的编号</code>，即对应上述公式中的<code>N</code>，在这里第一台机器myid存放的值为1。ZooKeeper在启动时会读取myid文件中的值与zoo.cfg文件中的配置信息进行比较，以确定是哪台服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/data/zookeeper/data</span><br><span class="line">touch myid</span><br><span class="line">echo 1 &gt; myid</span><br></pre></td></tr></table></figure><p>同理在其它两个机器上分别修改<code>zoo.cfg</code>以及<code>myid</code>文件。<br>然后在三台机器上分别执行<code>zkServer.sh start</code>以及<code>zkServer.sh status</code>, 打印出如下日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 192.168.56.104 - zookeeper0</span><br><span class="line">root@zookeeper0:/opt/data/zookeeper/data# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">root@zookeeper0:/opt/data/zookeeper/data# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 192.168.56.105 - zookeeper1</span><br><span class="line">root@zookeeper1:/opt/data/zookeeper/data# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">root@zookeeper1:/opt/data/zookeeper/data# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 192.168.56.106 - zookeeper2</span><br><span class="line"> ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">root@zookeeper2:/opt/data/zookeeper/data# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/apache-zookeeper-3.5.6/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>可以看到，这3台机器中，一台机器作为Leader，其他两台服务器作为Follower。</p><h3 id="Kafka安装与配置-单机模式"><a href="#Kafka安装与配置-单机模式" class="headerlink" title="Kafka安装与配置 - 单机模式"></a>Kafka安装与配置 - 单机模式</h3><ol><li><p>下载kafka, <a href="https://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.5.6/" target="_blank" rel="noopener">这里</a>, 解压到<code>/usr/local/</code>, <code>tar -zxvf /usr/local/kafka_2.13-2.4.0.tgz</code></p></li><li><p>配置环境变量, <code>vim /etc/profile</code>，按照下图配置后保存文件退出，执行source /etc/profile命令让刚才新增的Kafka环境变量设置生效。再在任一路径下输入kafka然后按Tab键，会提示补全Kafka运行相关脚本．sh文件，表示Kafka环境变量配置成功。</p></li></ol><p><img src="/assets/blogImg/Kafka%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" alt="Kafka环境变量配置"></p><ol start="3"><li>修改kafka配置，修改<code>$KAFKA_HOME/config</code>目录下的<code>server.properties</code>文件，为了便于后续集群环境搭建的配置，需要保证同一个集群下broker.id要唯一，因此这里手动配置<code>broker.id</code>，直接保持与zk的myid值一致，同时配置日志存储路径。server.properties修改的配置如下：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 指定的代理ID，由于是单机模式，这里指定zk节点id为<span class="number">1</span>，及zookeeper0那台机器。</span><br><span class="line">broker.id=<span class="number">1</span></span><br><span class="line"># 指定Log存储路径</span><br><span class="line"><span class="built_in">log</span>.dirs=/<span class="keyword">opt</span>/data/kafka-logs</span><br><span class="line"># 指定kafka的安装路径，由于我zk没和kafka安装在同一台机器上所以这里要修改。</span><br><span class="line">zookeeper.connect=<span class="number">192.168</span>.<span class="number">56.104</span>:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li></ol><p>修改完后，保存文件然后启动Kafka，进入Kafka安装路径$KAFKA_HOME/bin目录下，执行启动KafkaServer命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -daemon参数表示使程序以守护进程的方式后台运行</span><br><span class="line">kafka-server-start.sh -daemon /usr/local/kafka_2.13-2.4.0/config/server.properties</span><br></pre></td></tr></table></figure><p>执行jps命令查看Java进程，可以看到kafka的进程名，同时进入$KAFKA_HOME/logs目录下，查看server.log会看到KafkaServer启动日志，在启动日志中会记录KafkaServer启动时加载的配置信息。<br>此时登录<code>192.168.56.104</code>这台zk可以再次查看目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh -server 192.168.56.104:2181</span><br></pre></td></tr></table></figure><p>通过zk客户端登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在Kafka启动之前ZooKeeper中只有一个zookeeper目录节点，Kafka启动后目录节点如下：</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 0] ls /</span><br><span class="line">[admin, brokers, cluster, config, consumers, controller, controller_epoch, isr_change_notification, latest_producer_id_block, log_dir_event_notification, zookeeper]</span><br><span class="line"><span class="meta">#</span> 查看当前已启动的Kafka代理节点：输出信息显示当前只有一个Kafka代理节点，当前代理的brokerId为1</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 1] ls /brokers/ids</span><br><span class="line">[1]</span><br></pre></td></tr></table></figure><h3 id="Kafka安装与配置-集群模式"><a href="#Kafka安装与配置-集群模式" class="headerlink" title="Kafka安装与配置 - 集群模式"></a>Kafka安装与配置 - 集群模式</h3><p>集群与单机类似，这里只需修改<code>server.properties</code>文件中Kafka连接ZooKeeper的配置，将Kafka连接到ZooKeeper集群，配置格式为<code>ZooKeeper服务器IP:ZooKeeper的客户端端口</code>，多个ZooKeeper机器之间以逗号分隔开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.connect=192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181</span><br></pre></td></tr></table></figure><p>执行下列命令复制kafka整个目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"># 复制文件到kafka1</span><br><span class="line">scp -r kafka_2.13-2.4.0 root@192.168.56.102:/usr/local/</span><br><span class="line"># 复制文件到kafka2</span><br><span class="line">scp -r kafka_2.13-2.4.0 root@192.168.56.103:/usr/local/</span><br></pre></td></tr></table></figure><p>分别登录另外两台机器，修改<code>server.properties</code>文件中的<code>broker.id</code>依次为<code>2</code>和<code>3</code>, 并安装java环境，配置环境变量，同时也添加上述zk配置。<br>同样的，修改三台机器的<code>advertised.listeners=PLAINTEXT://your.host.name:9092</code>属性为具体的ip和端口。</p><p><em>listeners：kafka的连接协议名、主机名和端口，如果没有配置，将使用java.net.InetAddress.getCanonicalHostName()的返回值作为主机名<br>advertised.listeners：生产者和消费者使用的主机名和端口，如果没有配置，将使用listeners的配置，如果listeners也没有配置，将使用java.net.InetAddress.getCanonicalHostName()的返回值</em><br>然后在3台机器上启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /usr/local/kafka_2.13-2.4.0/config/server.properties</span><br></pre></td></tr></table></figure><p>这个时候在任意一台zk服务器上执行<code>ls /brokers/ids</code>都会得到一下结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 4] ls /brokers/ids</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="Docker环境安装与配置"><a href="#Docker环境安装与配置" class="headerlink" title="Docker环境安装与配置"></a>Docker环境安装与配置</h2><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull wurstmeister/zookeeper</span><br><span class="line"></span><br><span class="line">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure><h3 id="zookeeper容器启动"><a href="#zookeeper容器启动" class="headerlink" title="zookeeper容器启动"></a>zookeeper容器启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -d参数 表示后台运行容器，并返回容器ID</span><br><span class="line">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br><span class="line"><span class="meta">#</span> 查看zk服务器目录结构</span><br><span class="line">ls /</span><br></pre></td></tr></table></figure><h3 id="kafka容器启动"><a href="#kafka容器启动" class="headerlink" title="kafka容器启动"></a>kafka容器启动</h3><h4 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动Kafka(注意 修改IP为镜像安装IP)</span><br><span class="line">docker run -d --name kafka \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-e KAFKA_BROKER_ID=0 \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=192.168.56.101:2181 \</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.101:9092 \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">-t wurstmeister/kafka</span><br></pre></td></tr></table></figure><p>注意有以下四个参数：</p><ul><li>KAFKA_BROKER_ID=0</li><li>KAFKA_ZOOKEEPER_CONNECT=<code>&lt;zookeeper IP&gt;</code>:<code>&lt;zookeeper port&gt;</code></li><li>KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<ip>:9092</ip></li><li>KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092</li></ul><p>进入kafka容器内部</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka /bin/bash</span><br><span class="line"><span class="meta">#</span> 查看Kafka版本，进入Kafka所在目录</span><br><span class="line">cd /opt/kafka_2.12-2.4.0</span><br><span class="line"><span class="meta">#</span> 启动消息发送方</span><br><span class="line">./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka</span><br><span class="line"><span class="meta">#</span> 启动消息接收方</span><br><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mykafka --from-beginning</span><br></pre></td></tr></table></figure><h4 id="Kafka伪分布式环境部署"><a href="#Kafka伪分布式环境部署" class="headerlink" title="Kafka伪分布式环境部署"></a>Kafka伪分布式环境部署</h4><p>在同一台机器上启动多个Kafka Server 在单节点搭建的基础上再搭建一个节点，只需修改<code>KAFKA_BROKER_ID</code>以及<code>端口</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kafka1 \</span><br><span class="line">-p 9093:9093 \</span><br><span class="line"><span class="meta">#</span> 修改broker_id</span><br><span class="line">-e KAFKA_BROKER_ID=1 \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=192.168.56.101:2181 \</span><br><span class="line"><span class="meta">#</span> 修改端口</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.101:9093 \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 \</span><br><span class="line">-t wurstmeister/kafka</span><br></pre></td></tr></table></figure><p>然后再在<code>/opt/kafka_2.12-2.4.0</code>目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-topics.sh --create --zookeeper 192.168.56.101:2181 --replication-factor 2 --partitions 2 --topic mytopic</span><br></pre></td></tr></table></figure><p>查看topic状态 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-topics.sh --describe --zookeeper 192.168.56.101:2181 --topic mytopic</span><br></pre></td></tr></table></figure><p>Isr表示存活的备份<br><img src="/assets/blogImg/Kafka%E6%96%B0%E5%BB%BAtopic.png" alt="Kafka新建topic"></p><h2 id="Kafka-Manager安装"><a href="#Kafka-Manager安装" class="headerlink" title="Kafka Manager安装"></a>Kafka Manager安装</h2><p>下载kafka Manager<a href="https://github.com/yahoo/CMAK" target="_blank" rel="noopener">这里</a>，上传到<code>/usr/local</code>文件下，并解压<code>tar -zxvf CMAK-2.0.0.2.tar.gz</code>。Kafka Manager是用Scala语言开发的，通过sbt(Simple Build Tool)构建，sbt是对Scala或Java语言进行编译的一个工具，它类似于Maven, Gradle。需要通过以下方式进行源码编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./CMAK-2.0.0.2</span><br><span class="line"><span class="meta">#</span> 此过程巨慢无比，推荐直接搜索打包好的kafka-manager</span><br><span class="line">./sbt clean dist</span><br></pre></td></tr></table></figure><p>在下载了一晚上无果后，打开<code>/root/.sbt</code>看了看发现就下载了一个jar包，网上找了一份别人编译好的kafka-manager-2.0.0.2.zip。解压好上传，进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/kafka-manager-2.0.0.2/conf</span><br><span class="line">vim ./application.conf</span><br><span class="line"><span class="meta">#</span> 修改以下配置为真正的zk集群地址，注意是修改倒数第二行的这个配置才可以生效</span><br><span class="line">kafka-manager.zkhosts="192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181"</span><br></pre></td></tr></table></figure><p>修改<code>logback.xml</code>文件中的<code>${application.home}</code>为<code>..</code>，即logs日志存储位置。启动kafka-manager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入bin目录输入如下启动命令</span><br><span class="line">nohup ./kafka-manager -Dconfig.file=../conf/application.conf</span><br><span class="line"><span class="meta">#</span> 权限不够</span><br><span class="line">chmod -R 755 ../../kafka-manager-2.0.0.2/</span><br></pre></td></tr></table></figure><p>关闭Kafka Manager。Kafka Manager没有提供关闭操作的执行脚本及命令，当希望关闭Kafka Manager时，可直接通过kill命令强制杀掉Kafka Manager进程。查看Kafka Manager进程，输入jps命令，其中ProdServerStart即为Kafka Manager进程。通过kill命令关闭Kafka Manager。同时，由于Kafka Manager运行时有一个类似锁的文件<code>RUNNING_PID</code>，位于Kafka Manager安装路径bin同目录下，为了不影响下次启动，在执行kill命令后同时删除<code>RUNNING_PID</code>文件，<code>rm -f RUNNING_PID</code>.<br>完成以上配置后打开<code>http://192.168.56.101:9000/</code>即可。</p><h1 id="Kafka概念说明"><a href="#Kafka概念说明" class="headerlink" title="Kafka概念说明"></a>Kafka概念说明</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Kafka系统中有四种核心应用接口——生产者、消费者、数据流、连接器。</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>Kafka生产者可以理解成Kafka系统与外界进行数据交互的应用接口。生产者应用接口的作用是写入消息数据到Kafka中。Kafka系统提供了一系列的操作脚本，这些脚本放置在<code>$KAFKA_HOME/bin</code>目录中。其中，<code>kafka-console-producer.sh</code>脚本可用来作为生产者客户端。</p><p>生产者属性如下：</p><p><img src="/assets/blogImg/Kafka%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%82%E6%95%B0.png" alt="Kafka生产者参数"></p><p>这里重点说明以下acks属性：</p><ul><li><p>当acks=0时，生产者不用等待代理返回确认信息，而连续发送消息。显然这种方式加快了消息投递的速度，然而无法保证消息是否已被代理接受，有可能存在丢失数据的风险。</p></li><li><p>当acsk=1时，生产者需要等待Leader副本已成功将消息写入日志文件中。这种方式在一定程度上降低了数据丢失的可能性，但仍无法保证数据一定不会丢失。如果在Leader副本成功存储数据后，Follower副本还没有来得及进行同步，而此时Leader宕机了，那么此时虽然数据已进行了存储，由于原来的Leader已不可用而会从集群中下线，同时存活的代理又再也不会有从原来的Leader副本存储的数据，此时数据就会丢失。</p></li><li><p>当acks=-1时，Leader副本和所有ISR列表中的副本都完成数据存储时才会向生产者发送确认信息，这种策略保证只要Leader副本和Follower副本中至少有一个节点存活，数据就不会丢失。为了保证数据不丢失，需要保证同步的副本至少大于1，通过参数min.insync.replicas设置，当同步副本数不足此配置值时，生产者会抛出异常，但这种方式同时也影响了生产者发送消息的速度以及吞吐量。</p></li></ul><h3 id="消费者-与-消费组"><a href="#消费者-与-消费组" class="headerlink" title="消费者 与 消费组"></a>消费者 与 消费组</h3><p>Kafka消费著可以理解成，外界从Kafka系统中获取消息数据的一种应用接口。消费者应用接口的主要作用是读取消息数据。Kafka系统提供了一系列的可操作脚本，这些脚本放置在<code>$KAFKA_HOME/bin</code>目录下。其中，有一个脚本可用来作为消费者客户端，即<code>kafka-console-consumer.sh</code>。<br>消费者属性如下：</p><p><img src="/assets/blogImg/Kafka%E6%B6%88%E8%B4%B9%E8%80%85%E5%8F%82%E6%95%B0.png" alt="Kafka消费者参数"></p><p>消费者（Comsumer）以拉取（pull）方式拉取数据，它是消费的客户端。在Kafka中每一个消费者都属于一个特定消费组（ConsumerGroup），我们可以为每个消费者指定一个消费组，以<code>groupId</code>代表消费组名称，通过<code>group.id</code>配置设置。如果不指定消费组，则该消费者属于默认消费组<code>test-consumer-group</code>。同时，每个消费者也有一个全局唯一的id，通过配置项<code>client.id</code>指定，如果客户端没有指定消费者的id, Kafka会自动为该消费者生成一个全局唯一的id，格式为<code>${groupId}-${hostName}-${timestamp}-${UUID前8位字符}</code>。<em>同一个主题的一条消息只能被同一个消费组下某一个消费者消费，但不同消费组的消费者可同时消费该消息</em>。</p><h3 id="broker-代理"><a href="#broker-代理" class="headerlink" title="broker - 代理"></a>broker - 代理</h3><p>对于kafka而言，broker可以简单地看作一个独立的Kafka服务节点或Kafka服务实例。大多数情况下也可以将Broker看作一台Kafka服务器，前提是这台服务器上只部署了一个Kafka实例。</p><h3 id="topic-主题-partition-分区-以及-Replica-副本"><a href="#topic-主题-partition-分区-以及-Replica-副本" class="headerlink" title="topic - 主题 partition - 分区 以及 Replica - 副本"></a>topic - 主题 partition - 分区 以及 Replica - 副本</h3><p>Kafka中的消息以<code>主题(topic)</code>为单位进行归类，生产者负责将消息发送到特定的主题（发送到Kafka集群中的每一条消息都要指定一个主题），而消费者负责订阅主题并进行消费。每一个代理都有唯一的标识id，这个id是一个非负整数。在一个Kafka集群中，每增加一个代理就需要为这个代理配置一个与该集群中其他代理不同的id, id值可以选择任意非负整数即可，只要保证它在整个Kafka集群中唯一，这个id就是代理的名字，也就是在启动代理时配置的broker.id对应的值。</p><p>主题是一个逻辑上的概念，它还可以细分为多个<code>分区(partition)</code>，一个分区只属于单个主题。每个分区由一系列<code>有序、不可变</code>的消息组成，是一个有序队列。每个分区在物理上对应为一个文件夹，分区的命名规则为主题名称后接<code>—</code>连接符，之后再接分区编号，分区编号从0开始，编号最大值为分区的总数减1。每个分区又有一至多个<code>副本(Replica)</code>，分区的副本分布在集群的不同代理上，以提高可用性。从存储角度上分析，分区的每个副本在逻辑上抽象为一个<code>日志（Log）对象</code>，即<code>分区的副本与日志对象是一一对应的</code>。每个主题对应的分区数可以在Kafka启动时所加载的配置文件中配置，也可以在创建主题时指定。当然，客户端还可以在主题创建后修改主题的分区数。由于Kafka副本的存在，就需要保证一个分区的多个副本之间数据的一致性，Kafka会选择该分区的一个副本作为Leader副本，而该分区其他副本即为Follower副本，只有Leader副本才负责处理客户端读/写请求，Follower副本从Leader副本同步数据。副本Follower与Leader的角色并不是固定不变的，如果Leader失效，通过相应的选举算法将从其他Follower副本中选出新的Leader副本。同一主题下的不同分区包含的消息是不同的，分区在存储层面可以看作一个<code>可追加的日志（Log）文件</code>，消息在被追加到分区日志文件的时候都会分配一个特定的<code>偏移量（offset）</code>。offset是消息在分区中的唯一标识，Kafka通过它来保证消息在分区内的顺序性，不过offset并不跨越分区，也就是说，Kafka保证的是分区有序而不是主题有序。</p><p>每一条消息被发送到broker之前，会根据分区规则选择存储到哪个具体的分区。如果分区规则设定得合理，所有的消息都可以均匀地分配到不同的分区中。如果一个主题只对应一个文件，那么这个文件所在的机器 I/O 将会成为这个主题的性能瓶颈，而分区解决了这个问题。在创建主题的时候可以通过指定的参数来设置分区的个数，当然也可以在主题创建完成之后去修改分区的数量，通过增加分区的数量可以实现水平扩展。</p><p>Kafka 为分区引入了<code>多副本（Replica）</code>机制，通过增加副本数量可以提升容灾能力。同一分区的不同副本中保存的是相同的消息（在同一时刻，副本之间并非完全一样），副本之间是“一主多从”的关系，其中leader副本负责处理读写请求，follower副本只负责与leader副本的消息同步。副本处于不同的broker中，当leader副本出现故障时，从follower副本中重新选举新的leader副本对外提供服务。Kafka通过多副本机制实现了故障的自动转移，当Kafka集群中某个broker失效时仍然能保证服务可用。</p><h3 id="日志段"><a href="#日志段" class="headerlink" title="日志段"></a>日志段</h3><p>一个日志又被划分为多个<code>日志段（LogSegment）</code>，日志段是Kafka日志对象分片的最小单位。与日志对象一样，日志段也是一个逻辑概念，一个日志段对应磁盘上一个具体日志文件和两个索引文件。日志文件是以“.log”为文件名后缀的数据文件，用于保存消息实际数据。两个索引文件分别以“.index”和“.timeindex”作为文件名后缀，分别表示消息偏移量索引文件和消息时间戳索引文件。</p><h3 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h3><p>Kafka在ZooKeeper中动态维护了一个<code>ISR（In-sync Replica）</code>，即保存同步的副本列表，该列表中保存的是与Leader副本保持消息同步的所有副本对应的代理节点id。分区中的所有副本统称为<code>AR（Assigned Replicas）</code>。所有与leader副本保持一定程度同步的副本（包括leader副本在内）组成ISR（In-Sync Replicas），ISR集合是AR集合中的一个子集。消息会先发送到leader副本，然后follower副本才能从leader副本中拉取消息进行同步，同步期间内follower副本相对于leader副本而言会有一定程度的滞后。如果一个Follower副本宕机或是落后太多，则该Follower副本节点将从ISR列表中移除。与leader副本同步滞后过多的副本（不包括leader副本）组成<code>OSR（Out-of-Sync Replicas</code>），由此可见，<code>AR=ISR+OSR</code>。在正常情况下，所有的 follower 副本都应该与 leader 副本保持一定程度的同步，即 AR=ISR，OSR集合为空。</p><p><code>LEO是Log End Offset</code>的缩写，它标识当前日志文件中下一条待写入消息的offset，offset为9的位置即为当前日志文件的LEO，LEO的大小相当于当前日志分区中最后一条消息的<code>offset值加1</code>。分区ISR集合中的每个副本都会维护自身的LEO，而ISR集合中最小的LEO即为分区的HW，对消费者而言只能消费HW之前的消息。</p><p><img src="/assets/blogImg/Kafka%E5%88%86%E5%8C%BA%E8%AF%B4%E6%98%8E.png" alt="Kafka分区说明"></p><p>Kafka 的复制机制既不是完全的同步复制，也不是单纯的异步复制。事实上，同步复制要求所有能工作的 follower 副本都复制完，这条消息才会被确认为已成功提交，这种复制方式极大地影响了性能。而在异步复制方式下，follower副本异步地从leader副本中复制数据，数据只要被leader副本写入就被认为已经成功提交。在这种情况下，如果follower副本都还没有复制完而落后于leader副本，突然leader副本宕机，则会造成数据丢失。Kafka使用的这种<code>ISR的方式则有效地权衡了数据可靠性和性能之间的关系</code>。</p><h1 id="Kafka的基础操作"><a href="#Kafka的基础操作" class="headerlink" title="Kafka的基础操作"></a>Kafka的基础操作</h1><h2 id="KafkaServer管理"><a href="#KafkaServer管理" class="headerlink" title="KafkaServer管理"></a>KafkaServer管理</h2><h3 id="单节点启动"><a href="#单节点启动" class="headerlink" title="单节点启动"></a>单节点启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入bin目录</span><br><span class="line">kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></table></figure><p>bin目录下的<code>kafka-server-start.sh</code>即为启动脚本。启动后会在<code>$KAFKA_HOME/logs</code>目录下创建相应的日志文件。</p><p><img src="/assets/blogImg/Kafka%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB.png" alt="Kafka日志文件分类"></p><p>启动完毕后，登录ZooKeeper客户端查看相应节点信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动zk客户端</span><br><span class="line">zkCli.sh -server 192.168.56.104:2181</span><br><span class="line">[zk: 192.168.56.104:2181(CONNECTED) 0] get /controller</span><br><span class="line">&#123;"version":1,"brokerid":1,"timestamp":"1581667736716"&#125;</span><br><span class="line">[zk: 192.168.56.104:2181(CONNECTED) 1]</span><br></pre></td></tr></table></figure><p>JMX监控开启，需要将<code>JMX_PORT</code>配置添加到KafkaServer启动脚本<code>kafka-server-start.sh</code>文件中，该项监控可以在<code>kafka-manager</code>中看到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在启动脚本中首行添加</span><br><span class="line">export JMX_PORT=9999</span><br></pre></td></tr></table></figure><p>也可以在启动命令中配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMX_PORT=9999 kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></table></figure><h3 id="集群启动"><a href="#集群启动" class="headerlink" title="集群启动"></a>集群启动</h3><p>可以编写个脚本来启动集群中所有节点 <em># $?是指上一次命令执行的成功或者失败的状态。如果成功就是0，失败为1</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kafka-cluster-start.sh</span><br><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line">brokers="192.168.56.101 192.168.56.102 192.168.56.103"</span><br><span class="line">KAFKA_HOME="/usr/local/kafka_2.13-2.4.0"</span><br><span class="line">echo "INFO: Begin to start kafka cluster..."</span><br><span class="line"></span><br><span class="line">for broker in $brokers</span><br><span class="line">do</span><br><span class="line">    echo "INFO:Start kafka on $&#123;broker&#125;..."</span><br><span class="line">    ssh $broker -C "source /etc/profile; sh $&#123;KAFKA_HOME&#125;/bin/kafka-server-start.sh -daemon $&#123;KAFKA_HOME&#125;/config/server.properties"</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo "INFO:[$&#123;broker&#125;] Start successfully..."</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">echo "INFO:Kafka cluster starts successfully!"</span><br></pre></td></tr></table></figure><h3 id="单节点关闭"><a href="#单节点关闭" class="headerlink" title="单节点关闭"></a>单节点关闭</h3><p>执行<code>bin</code>目录下的<code>kafka-server-stop.sh</code>即可停止kafka。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SIGNAL=$&#123;SIGNAL:-TERM&#125;</span><br><span class="line">PIDS=$(ps ax | grep -i 'kafka\.Kafka' | grep java | grep -v grep | awk '&#123;print $1&#125;')</span><br><span class="line"></span><br><span class="line">if [ -z "$PIDS" ]; then</span><br><span class="line">  echo "No kafka server to stop"</span><br><span class="line">  exit 1</span><br><span class="line">else</span><br><span class="line">  kill -s $SIGNAL $PIDS</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>停止的原理是<code>kill</code> kafka的PID，由于我的kafka-manager和kafka0节点装在一起，所以会连代停止我的kafka-manager。<br>如果想准确的停止kafka，获取PID时可以使用<code>PIDS=$(jps | grep -i &#39;Kafka&#39; | awk &#39;{print $1}&#39;)</code></p><h3 id="集群关闭"><a href="#集群关闭" class="headerlink" title="集群关闭"></a>集群关闭</h3><p>与集群启动类似，编写一个调用<code>bin</code>目录下的<code>kafka-server-stop.sh</code>的脚本即可停止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kafka-cluster-stop.sh</span><br><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line">brokers="192.168.56.101 192.168.56.102 192.168.56.103"</span><br><span class="line">KAFKA_HOME="/usr/local/kafka_2.13-2.4.0"</span><br><span class="line">echo "INFO: Begin to shut down kafka cluster..."</span><br><span class="line"></span><br><span class="line">for broker in $brokers</span><br><span class="line">do</span><br><span class="line">    echo "INFO:Shut down kafka on $&#123;broker&#125;..."</span><br><span class="line">    ssh $broker -C "$&#123;KAFKA_HOME&#125;/bin/kafka-server-stop.sh"</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo "INFO:[$&#123;broker&#125;] Shut down successfully..."</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">echo "INFO:Kafka cluster shut down successfully!"</span><br></pre></td></tr></table></figure><h2 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h2><h3 id="主题创建"><a href="#主题创建" class="headerlink" title="主题创建"></a>主题创建</h3><p>客户端通过执行<code>kafka-topics.sh</code>脚本创建一个主题。若开启了自动创建主题配置项auto.create.topics.enable=true，当生产者向一个还不存在的主题发送消息时，Kafka会自动创建该主题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直接输入该脚本的名字可以查看有哪些命令参数</span><br><span class="line">kafka-topics.sh</span><br><span class="line"><span class="meta">#</span> 创建一个名为 kafka-action的主题，该主题拥有2个副本，3个分区</span><br><span class="line">kafka-topics.sh --create --zookeeper 192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181 --replication-factor 2 --partitions 3 --topic kafka-action</span><br><span class="line"><span class="meta">#</span> 登录ZooKeeper客户端查看所创建的主题元数据信息</span><br><span class="line">[zk: 192.168.56.104:2181(CONNECTED) 4] ls /brokers/topics/kafka-action/partitions</span><br><span class="line">[0, 1, 2]</span><br><span class="line">[zk: 192.168.56.104:2181(CONNECTED) 5] get /brokers/topics/kafka-action</span><br><span class="line">&#123;"version":2,"partitions":&#123;"0":[1,2],"1":[2,3],"2":[3,1]&#125;,"adding_replicas":&#123;&#125;,"removing_replicas":&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>zookeeper参数是必传参数，用于配置Kafka集群与ZooKeeper连接地址，这里并不要求传递${ zookeeper.connect }配置的所有连接地址。为了容错，建议多个ZooKeeper节点的集群至少传递两个ZooKeeper连接配置，多个配置之间以逗号隔开。</p></li><li><p>partitions参数用于设置主题分区数，该配置为必传参数。Kafka通过分区分配策略，将一个主题的消息分散到多个分区并分别保存到不同的代理上，以此来提高消息处理的吞吐量。Kafka的生产者和消费者可以采用多线程并行对主题消息进行处理，而每个线程处理的是一个分区的数据，因此分区实际上是Kafka并行处理的基本单位。分区数越多一定程度上会提升消息处理的吞吐量，然而Kafka消息是以追加的形式存储在文件中的，这就意味着分区越多需要打开更多的文件句柄，这样也会带来一定的开销。</p></li><li><p>replication-factor参数用来设置主题副本数，该配置也是必传参数。副本会被分布在不同的节点上，副本数不能超过节点数，否则创建主题会失败</p></li></ul><p>进入在<code>server.properties</code>中配置的<code>log.dirs=/opt/data/kafka-logs</code>对应的目录下，创建主题后会在<code>${log.dir}</code>目录下创建相应的分区文件目录，副本分别分布在不同的节点上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 以kafka0节点为例子，查看分区文件</span><br><span class="line">cd /opt/data/kafka-logs</span><br><span class="line">ls -l</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 16 04:08 kafka-action-0</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 16 04:08 kafka-action-2</span><br><span class="line"></span><br><span class="line">root@kafka0:/opt/data/kafka-logs# cd ./kafka-action-0</span><br><span class="line">root@kafka0:/opt/data/kafka-logs/kafka-action-0# ls -l</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 10485760 Feb 16 04:08 00000000000000000000.index</span><br><span class="line">-rw-r--r-- 1 root root        0 Feb 16 04:08 00000000000000000000.log</span><br><span class="line">-rw-r--r-- 1 root root 10485756 Feb 16 04:08 00000000000000000000.timeindex</span><br><span class="line">-rw-r--r-- 1 root root        8 Feb 16 04:08 leader-epoch-checkpoint</span><br></pre></td></tr></table></figure><h3 id="主题删除"><a href="#主题删除" class="headerlink" title="主题删除"></a>主题删除</h3><p>执行kafka-topics.sh脚本进行删除，若希望通过该脚本彻底删除主题，则需要保证在启动Kafka时所加载的<code>server.properties</code>文件中配置<code>delete.topic.enable=true</code>，该配置默认为<code>false</code>。否则执行该脚本并未真正删除主题，而是在ZooKeeper的/admin/delete_topics目录下创建一个与待删除主题同名的节点，将该主题标记为删除状态。主题在<code>${log.dir}</code>目录下对应的分区文件及在ZooKeeper中的相应节点并未被删除，这个时候需要你手动删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --delete --zookeeper 192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181 --topic kafka-action</span><br></pre></td></tr></table></figure><p>直接执行的话，用zk客户端去看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: 192.168.56.104:2181(CONNECTED) 8] ls /admin/delete_topics</span><br><span class="line">[kafka-action]</span><br></pre></td></tr></table></figure><h3 id="查看主题"><a href="#查看主题" class="headerlink" title="查看主题"></a>查看主题</h3><ul><li><p>查看该集群下所有主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --list --zookeeper 192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181</span><br></pre></td></tr></table></figure></li><li><p>查看特定主题的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --topic kafka-action --describe --zookeeper 192.168.56.104:2181,192.168.56.105:2181,192.168.56.106:2181</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看消息"><a href="#查看消息" class="headerlink" title="查看消息"></a>查看消息</h3><p>Kafka生产的消息以二进制的形式存在文件中，Kafka提供了一个查看日志文件的工具类<code>kafka.tools.DumpLogSegments</code>。通过<code>kafka-run-class.sh</code>脚本，可以直接在终端运行该工具类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看kafka-action-test主题下的消息内容</span><br><span class="line">kafka-run-class.sh kafka.tools.DumpLogSegments --files /opt/data/kafka-logs/kafka-action-test-1/00000000000000000000.log</span><br></pre></td></tr></table></figure><h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h2><h3 id="启动生产者"><a href="#启动生产者" class="headerlink" title="启动生产者"></a>启动生产者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> broker-list 指定Kafka的代理地址列表 topic 指定消息被发送的目标主题 key.separator 指定key 和 消息之间的分隔符</span><br><span class="line">kafka-console-producer.sh --broker-list 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --topic kafka-action-test --property parse.key=true --property key.separator=' '</span><br></pre></td></tr></table></figure><h3 id="生产者性能测试"><a href="#生产者性能测试" class="headerlink" title="生产者性能测试"></a>生产者性能测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-producer-perf-test.sh --num-records 10000 --record-size 1000 --topic kafka-action-test --throughput 10000 --producer-props bootstrap.servers=192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092</span><br></pre></td></tr></table></figure><p><code>kafka-producer-perf-test.sh</code>脚本调用的是org.apache.kafka.tools.ProducerPerformance类</p><ul><li>topic  指定了生产者发送消息的目标主题</li><li>num-records 测试时发送消息的总条数</li><li>record-size 每条消息的字节数</li><li>throughput 限流控制 throughput值小于0时则不进行限流；若该参数值大于0时，当已发送的消息总字节数与当前已执行的时间取整大于该字段时生产者线程会被阻塞一段时间。生产者线程被阻塞时，在控制台可以看到输出一行吞吐量统计信息；若该参数值等于0时，则生产者在发送一次消息之后检测满足阻塞条件时将会一直被阻塞。</li></ul><p>上述命令执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000 records sent, 4618.937644 records/sec (4.40 MB/sec), 895.99 ms avg latency, 1232.00 ms max latency, 940 ms 50th, 1199 ms 95th, 1220 ms 99th, 1232 ms 99.9th.</span><br></pre></td></tr></table></figure><ul><li>recores send 测试时发送的消息总数</li><li>records/sec 每秒发送的消息数 - 吞吐量</li><li>avg latency 消息处理的平均耗时 ms</li><li>max latency 消息处理的最大耗时 ms</li><li>X th %Xd的消息处理耗时</li></ul><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>Kafka采用了消费组的模式，每个消费者都属于某一个消费组，在创建消费者时，若不指定消费者的groupId，则该消费者属于默认消费组。消费组是一个全局的概念，因此在设置group.id时，要确保该值在Kafka集群中唯一。同一个消费组下的各消费者在消费消息时是互斥的，也就是说，对于一条消息而言，就同一个消费组下的消费者来讲，只能被同组下的某一个消费者消费，但不同消费组的消费者能消费同一条消息。</p><h3 id="启动消费者"><a href="#启动消费者" class="headerlink" title="启动消费者"></a>启动消费者</h3><p><code>kafka-console-consumer.sh</code>脚本调用的是Kafka core工程下kafka.tools包下的ConsoleConsumer对象，该对象调用（org.apache.kafka.clients.consumer.KafkaConsumer）消费消息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --consumer-property group.id=consumer-test --topic kafka-action-test --from-beginning</span><br></pre></td></tr></table></figure><h3 id="查看消费者组的信息"><a href="#查看消费者组的信息" class="headerlink" title="查看消费者组的信息"></a>查看消费者组的信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有消费者组</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --list</span><br><span class="line"><span class="meta">#</span> 查看指定消费者组信息</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --describe --group hello</span><br><span class="line"><span class="meta">#</span> 删除指定消费者组</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --delete --group hello</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/Kafka%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E6%93%8D%E4%BD%9C.png" alt="Kafka消费者组操作"></p><h3 id="消费者性能测试工具"><a href="#消费者性能测试工具" class="headerlink" title="消费者性能测试工具"></a>消费者性能测试工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-perf-test.sh --broker-list 192.168.56.101:9092,192.168.56.102:9092,192.168.56.103:9092 --threads 5 --messages 10000 --socket-buffer-size 10000 --num-fetch-threads 2 --group consumer-perf-test --topic kafka-action-test</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec</span><br><span class="line">2020-02-20 16:07:33:457, 2020-02-20 16:07:34:668, 9.5369, 7.8752, 10029, 8281.5855, 1582214853971, -1582214852760, -0.0000, -0.0000</span><br></pre></td></tr></table></figure><h1 id="Kafka的源码编译"><a href="#Kafka的源码编译" class="headerlink" title="Kafka的源码编译"></a>Kafka的源码编译</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Scala"><a href="#安装Scala" class="headerlink" title="安装Scala"></a>安装Scala</h3><p>Windows环境下，下载并安装Scala。先进入Scala官方网站<a href="http://www.scala-lang.org/download/" target="_blank" rel="noopener">这里</a>下载相应的安装包并安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询Scala版本</span><br><span class="line">scala -version</span><br></pre></td></tr></table></figure><h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h3><p>进入Gradle官方网站<a href="https://gradle.org/releases/" target="_blank" rel="noopener">这里</a>下载Gradle安装包。将下载好的<code>gradle-6.1.1-bin</code>解压后，配置<code>GRADLE_HOME</code>以及<code>%GRADLE_HOME%\bin</code>到环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询gradle版本</span><br><span class="line">gradle -version</span><br></pre></td></tr></table></figure><h3 id="Kafka源码编译"><a href="#Kafka源码编译" class="headerlink" title="Kafka源码编译"></a>Kafka源码编译</h3><p>先进入<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">这里</a>下载Kafka src 源码文件。进入源码根目录，执行<code>gradle idea</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kafka相关的技术知识，本文内容均基于 Ubuntu 18.04 虚拟机进行。说明，本文档共涉及6台服务器&lt;br&gt;192.168.56.101 - kafka0&lt;br&gt;192.168.56.102 - kafka1&lt;br&gt;192.168.56.103 - kafka2&lt;br&gt;192.168.56.104 - zookeeper0&lt;br&gt;192.168.56.105 - zookeeper1&lt;br&gt;192.168.56.106 - zookeeper2&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://www.leezy.top/tags/Docker/"/>
    
      <category term="Kafka" scheme="https://www.leezy.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring自定义标签的使用</title>
    <link href="https://www.leezy.top/2020/02/05/Spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.leezy.top/2020/02/05/Spring自定义标签的使用/</id>
    <published>2020-02-05T09:58:21.000Z</published>
    <updated>2020-11-28T08:46:52.503Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring中完成一个自定义标签所需要的步骤。</p><a id="more"></a><ul><li><p>设计配置属性和JavaBean</p></li><li><p>编写XSD文件</p></li><li><p>编写BeanDefinitionParser标签解析类</p></li><li><p>编写调用标签解析类的NamespaceHandler类</p></li><li><p>编写spring.handlers和spring.schemas以供Spring读取</p></li><li><p>在Spring中使用</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Spring中完成一个自定义标签所需要的步骤。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWEB" scheme="https://www.leezy.top/tags/JavaWEB/"/>
    
  </entry>
  
  <entry>
    <title>Spring循环依赖三级缓存解析</title>
    <link href="https://www.leezy.top/2020/02/05/Spring%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <id>https://www.leezy.top/2020/02/05/Spring的循环依赖/</id>
    <published>2020-02-05T09:58:21.000Z</published>
    <updated>2020-11-28T08:46:52.503Z</updated>
    
    <content type="html"><![CDATA[<p>Spring循环依赖三级缓存解析。</p><a id="more"></a><h3 id="Spring循环依赖使用场景"><a href="#Spring循环依赖使用场景" class="headerlink" title="Spring循环依赖使用场景"></a>Spring循环依赖使用场景</h3><ol><li>对象A的构造方法中依赖了B的实例对象， 同时B的field或者setter需要A的实例对象 </li><li>对象A的某个field或者setter依赖了B的实例对象，同时B的某个field或者setter依赖了A的实例对象<br>(不能解决的使用场景) 3. 对象A的构造函数依赖了B的实例对象，B的构造函数依赖了A的实例对象 </li></ol><h3 id="Spring单体对象初始化的流程"><a href="#Spring单体对象初始化的流程" class="headerlink" title="Spring单体对象初始化的流程"></a>Spring单体对象初始化的流程</h3><ul><li>createBeanInstance 实例化，仅仅调用对应的构造方法，没有传入指定的sping.xml </li><li>populate populateBean 填充属性，对spring.xml指定的property进行populate </li><li>initializeBean 调用spring.xml中指定的init方法，或者AfterPropertiesSet方法 </li></ul><h3 id="Spring循环依赖的三级缓存"><a href="#Spring循环依赖的三级缓存" class="headerlink" title="Spring循环依赖的三级缓存"></a>Spring循环依赖的三级缓存</h3><p>DefaultSingletonBeanRegistry中的三级缓存： </p><pre><code class="java"><span class="comment">// 存放初始化好的可以直接使用的bean，单例对象的cache - 一级缓存 </span><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">256</span>); <span class="comment">// 提前曝光的单例对象cache- 二级缓存 </span><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap(<span class="number">16</span>); <span class="comment">// 存放单例对象工厂的cache - 三级缓存 </span><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap(<span class="number">16</span>); </code></pre><pre><code class="java"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>{     <span class="comment">// 从一级缓存中取实例 </span>    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);     <span class="comment">// 一级缓存中没有，并且对象在创建中(isSingletonCurrentlyInCreation判断对应的单例对象是否在创建中) </span>    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.isSingletonCurrentlyInCreation(beanName)) {         <span class="keyword">synchronized</span>(<span class="keyword">this</span>.singletonObjects) {             <span class="comment">// 从二级缓存中拿数据 </span>            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);             <span class="comment">// 二级缓存中没有并且允许从三级缓存中拿数据(allowEarlyReference是否允许从singletonFactories中拿数据) </span>            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) {                 ObjectFactory&lt;?&gt; singletonFactory = (ObjectFactory)<span class="keyword">this</span>.singletonFactories.get(beanName);                 <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) {                     singletonObject = singletonFactory.getObject();                     <span class="comment">// 将三级缓存提到二级缓存 </span>                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);                     <span class="keyword">this</span>.singletonFactories.remove(beanName);                 }             }         }     }     <span class="keyword">return</span> singletonObject; } </code></pre><h3 id="三级缓存的作用"><a href="#三级缓存的作用" class="headerlink" title="三级缓存的作用"></a>三级缓存的作用</h3><p>二级缓存的存在有两个作用<br>1.三级缓存中获取bean,需要循环所有的后置处理器,调用它们实现的方法,效率低下。 2. 为了保护单例对象。三级缓存在使用时，beanA和beanB循环依赖，beanA和beanC循环依赖，从三级缓存中获取beanA需要循环所有的后置处理器,但是程序员可以扩展后置处理器,在实现的方法里面可能重新new了一个bean,这时候返回的就不是spring给我们创建的bean了,这样就导致beanB和beanC注入beanA的时候都在后置处理器中new了一个beanA,这样beanB和beanC中注入的beanA并不是同一个对象,这样就破坏了单例,所以二级缓存存在为了防止破坏单例是必须的。</p><p>参考文档： </p><ul><li><a href="https://blog.csdn.net/github_38687585/article/details/82317674" target="_blank" rel="noopener">https://blog.csdn.net/github_38687585/article/details/82317674</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring循环依赖三级缓存解析。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWEB" scheme="https://www.leezy.top/tags/JavaWEB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu设置SSH免密码登录</title>
    <link href="https://www.leezy.top/2020/02/04/Ubuntu%E8%AE%BE%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>https://www.leezy.top/2020/02/04/Ubuntu设置SSH免密码登录/</id>
    <published>2020-02-04T02:04:21.000Z</published>
    <updated>2020-11-28T08:46:52.504Z</updated>
    
    <content type="html"><![CDATA[<p>通过SSH公钥（锁🔒）和密钥（钥匙🔑）来实现Putty免输入密码登录操作。</p><a id="more"></a><h3 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -t 指定密钥烈性</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/SSH_%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5_%E7%A7%81%E9%92%A5.png" alt="SSH_生成公钥_私钥"> </p><p>用WinSCP打开文件保存路径<code>/root/.ssh/</code>，上述命令会在该目录下生成 id_rsa和 id_rsa.pub两个文件。</p><p><em>注意 设置/etc/ssh/sshd_config 文件下的 PermitRootLogin yes<br>PasswordAuthentication yes 才可以root登录，并重启ssh服务 systemctl restart ssh.service</em></p><p>将<code>/root/.ssh/</code>路径下的<code>id_rsa</code>导入到PuTTYgen (Conversions -&gt; Import key)，并生成及保存私钥。<br>在PuTTY SSH -&gt; Auth 中添加私钥文件。</p><p>再次修改SSH配置文件<code>/etc/ssh/sshd_config</code>，取消下面几项配置的注释</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#PubkeyAuthentication yes</span><br><span class="line">#AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2</span><br></pre></td></tr></table></figure><p>执行下面这条命令，将公钥添加到<code>.ssh/authorized_keys</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>至此完成Ubuntu SSH 免密码登录设置。</p><h3 id="集群的配置"><a href="#集群的配置" class="headerlink" title="集群的配置"></a>集群的配置</h3><p>常见的分布式集群，通常由多台机器构成，为了便于操作管理，通过ssh方式启动集群代理，需要在多个服务器上进行ssh免登录配置。将第一台机器上的<code>authorized_keys</code>复制到第二台机器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp authorized_keys root@192.168.56.101:~/.ssh</span><br></pre></td></tr></table></figure><p>然后将第二台机器的公钥也追加到授权文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>同样的操作在第三台第四台机器上分别执行。配置完成后再任意一台机器上都可以免密登录到其他机器上。<code>ssh 192.168.56.102</code>即可。</p><p><img src="/assets/blogImg/SSH_%E9%9B%86%E7%BE%A4%E4%BA%92%E7%9B%B8%E7%99%BB%E5%BD%95.png" alt="SSH_集群互相登录"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过SSH公钥（锁🔒）和密钥（钥匙🔑）来实现Putty免输入密码登录操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://www.leezy.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://www.leezy.top/2020/01/11/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.leezy.top/2020/01/11/Docker常用命令/</id>
    <published>2020-01-11T08:22:21.000Z</published>
    <updated>2020-11-28T08:46:52.497Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 常用命令总结，坚持就是胜利！</p><a id="more"></a><h3 id="docker-常见命令总结"><a href="#docker-常见命令总结" class="headerlink" title="docker 常见命令总结"></a>docker 常见命令总结</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看已经安装的镜像</span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span> 查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span> 查看已经退出的容器</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span> 启动容器</span><br><span class="line">docker start &lt;container ID&gt;</span><br><span class="line"><span class="meta">#</span> 停止容器</span><br><span class="line">docker stop &lt;container ID&gt;</span><br><span class="line"><span class="meta">#</span> 开启一个容器内部的交互式终端 /bin/bash</span><br><span class="line">docker exec -it &lt;container ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="meta">#</span> 将容器的 3306 端口映射到主机的 3306 端口, 容器conf目录和logs目录、data目录都挂载在本地，并设置root密码 root</span><br><span class="line">docker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line"><span class="meta">#</span> 这里会输出容器ID</span><br><span class="line"><span class="meta">#</span> 进入容器</span><br><span class="line">docker exec -it &lt;container ID&gt; /bin/bash</span><br><span class="line"><span class="meta">#</span> 登录Mysql</span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span> 授权远程登录</span><br><span class="line">GRANT ALL ON *.* TO 'root'@'%';</span><br><span class="line"><span class="meta">#</span> 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="Docker安装Tomcat"><a href="#Docker安装Tomcat" class="headerlink" title="Docker安装Tomcat"></a>Docker安装Tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装Tomcat</span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta">#</span> 运行容器</span><br><span class="line"><span class="meta">#</span> 命令说明</span><br><span class="line"><span class="meta">#</span> -p 8080:8080：将容器的 8080 端口映射到主机的 8080 端口。</span><br><span class="line"><span class="meta">#</span> -v $PWD/test:/usr/local/tomcat/webapps/test：将主机中当前目录下的 test 挂载到容器的 /test。</span><br><span class="line">docker run --name tomcat -p 8080:8080 -v $PWD/test:/usr/local/tomcat/webapps/test -d tomcat</span><br><span class="line"></span><br><span class="line">docker exec -it &lt;container ID&gt; /bin/bash</span><br><span class="line"></span><br><span class="line">ls -l</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装nginx</span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta">#</span> 查看镜像</span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span> --name 容器名称 -p 8080:80 端口进行映射，将本地8080端口映射到容器内部的80端口 - 简易启动方式</span><br><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br><span class="line"><span class="meta">#</span> -v 使用本地配置覆盖docker镜像配置 --net host 参数加上后不会使用容器自己虚拟的网卡，而会使用宿主机自己的IP和端口</span><br><span class="line">docker run \</span><br><span class="line">--name my_nginx \</span><br><span class="line">-d -p 30002:80 --net host\</span><br><span class="line">-v /home/nginx/log:/var/log/nginx  \</span><br><span class="line">-v /home/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /home/nginx/conf.d:/etc/nginx/conf.d  \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>在安装docker的虚拟机重启后，再次进入会发现docker 容器的状态为退出 <code>docker ps -a</code>，这个时候有两个选择</p><ol><li>删除容器 <code>docker rm &lt;container ID&gt;</code>， 如果有容器中的数据很重要可以保存为images <code>docker commit &lt;container ID&gt;</code></li><li>重启docker容器 <code>docker start &lt;container ID&gt;</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 常用命令总结，坚持就是胜利！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Tomcat" scheme="https://www.leezy.top/tags/Tomcat/"/>
    
      <category term="MySQL" scheme="https://www.leezy.top/tags/MySQL/"/>
    
      <category term="Docker" scheme="https://www.leezy.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-并发编程</title>
    <link href="https://www.leezy.top/2019/11/30/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.leezy.top/2019/11/30/JAVA基础知识-并发编程/</id>
    <published>2019-11-29T16:00:00.000Z</published>
    <updated>2020-11-28T08:46:52.500Z</updated>
    
    <content type="html"><![CDATA[<p>并发编程的基础、并发模拟工具及代码。</p><a id="more"></a><h3 id="并发编程的基础"><a href="#并发编程的基础" class="headerlink" title="并发编程的基础"></a>并发编程的基础</h3><blockquote><p>CPU多级缓存</p></blockquote><p>时间局部性 空间局部性<br>缓存一致性： M E S I 用于保证多个CPU Cache之间共享数据的一致<br>M 修改状态<br>E 独享状态<br>S 共享状态<br>I 无效状态</p><blockquote><p>乱序执行优化</p></blockquote><p>为了提高运算速度而做出违背代码原有顺序的优化</p><blockquote><p>JAVA内存模型 (Java Memory Model - JMM)</p></blockquote><p>Heap 堆<br>可动态分配内存大小，生存期不需事先告诉编译器，存取速度慢，常用于存放对象<br>Thread Stack 栈<br>存取速度快，仅次于寄存器，数据大小和生存期必须确定，常用于存取基本类型变量，本地变量</p><p>栈上的引用变量数据可以访问引用的堆对象，如果两个线程同时调用了同一个对象，都会访问成员变量，但是这两个线程会有自己变量的私有拷贝。</p><p>每个线程都有自己的“本地内存”，Java中线程的“本地内存”指的是CPU寄存器和高速缓存的抽象描述。两个线程之间的变量共享是要通过主内存的。</p><blockquote><p>Java内存模型-同步八种操作</p></blockquote><ul><li><p>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态</p></li><li><p>unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p></li><li><p>read（读取）：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中以便随后的load动作使用。</p></li><li><p>load（载入）: 作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中</p></li><li><p>use（使用）：作用于工作内存的变量,把工作内存中的一个变量值传递给执行引擎</p></li><li><p>assign（赋值）：作用于工作内存的变量,它把一个从执行引擎接收到的值赋值给工作内存的变量</p></li><li><p>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中,以便随后的write的操作</p></li><li><p>write（写入）：作用于主内存的变量,它把store操作从工作内存中一个变量的值传送到主内存的变量中</p></li></ul><p>工作规则：</p><ul><li><p>如果要把一个变量从主内存中复制到工作内存,就需要按顺序地执行read和load操作,如果把变量从工作内存中同步回主内存中,就要按顺序地执行store和write操作。但Java内存模型只要求上述操作必须按顺序执行,而没有保证必须是连续执行。</p></li><li><p>不允许read和load、store和write操作之一单独出现</p></li><li><p>不允许一个线程丢弃它的最近assign的操作,即变量在工作内存中改变了之后必须同步到主内存中</p></li><li><p>不允许—个线程无原因地(没有发生过任何assign操作)把数据从工作内存同步回主内存中</p></li><li><p>一个新的变量只能在主内存中诞生,不允许在工作内存中直接使用一个未被初始化(load或assign )的变量。即就是对一个变量实施use和store操作之前,必须先执行过了assign和load操作</p></li><li><p>一个变量在同_时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的unlock操作,变量才会被解锁。lock和unlock必须成对出现</p></li><li><p>如果对一个变量执行lock操作,将会清空工作内存中此变量的值,在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</p></li><li><p>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</p></li><li><p>一个新的变量只能在主内存中诞生/不允许在工作内存中直接使用一个未被初始化（load或assign ）的变量。即就是对一个变量实施use和store操作之前, 必须先执行过了assign和load操作</p></li></ul><h3 id="并发模拟工具及代码"><a href="#并发模拟工具及代码" class="headerlink" title="并发模拟工具及代码:"></a>并发模拟工具及代码:</h3><p>工具：</p><blockquote><p>PostMan</p></blockquote><blockquote><p>Apache Bench</p></blockquote><blockquote><p>Apache JMeter</p></blockquote><p>代码：</p><blockquote><p>CountDownLatch - 闭锁：1. await() 2. countDown() 阻塞线程，满足某种特定的条件继续执行，常与与线程池一同使用。</p></blockquote><blockquote><p>Semaphore - 信号量：可以阻塞线程，控制同一时间请求的并发量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.concurrency;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.concurrency.annoations.NotThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: spring-cloud-leezy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试并发</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LEEZY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-11-30 16:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="comment">// count:4962 结果不准确，线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">// 信号量以及并发线程数</span></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="comment">// 计数器-闭锁 放入请求总数</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 根据并发的限制数量, 判断当前线程是否允许被执行</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    <span class="comment">// 释放线程</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 执行一次就进行releaseShared</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个方法可以保证 countDown 减为0</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:"</span> + count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><blockquote><p>原子性：提供了互斥访问，同一时刻只能有一个线程来对它进行操作。 - Atomic包</p></blockquote><h3 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="string">"logger"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; mThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testThreadLocal</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        mThreadLocal.set(<span class="string">"main-thread"</span>);</span><br><span class="line">        logger.info(<span class="string">"result1: "</span> + mThreadLocal.get());</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="comment">// thread1内部设置的值只有thead1内部可以得到，所以result3为空</span></span><br><span class="line">                mThreadLocal.set(<span class="string">"thread_one"</span>);</span><br><span class="line">                logger.info(<span class="string">"result2: "</span> + mThreadLocal.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                logger.info(<span class="string">"result3: "</span> + mThreadLocal.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread2.join();</span><br><span class="line">        logger.info(<span class="string">"result4: "</span> + mThreadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocalTest threadLocalTest = <span class="keyword">new</span> ThreadLocalTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            threadLocalTest.testThreadLocal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 十二月 15, 2019 4:36:21 下午 ThreadLocalTest testThreadLocal</span><br><span class="line">信息: result1: main-thread</span><br><span class="line"><span class="meta">#</span> 十二月 15, 2019 4:36:21 下午 ThreadLocalTest$1 run</span><br><span class="line">信息: result2: thread_one</span><br><span class="line"><span class="meta">#</span> 十二月 15, 2019 4:36:21 下午 ThreadLocalTest$2 run</span><br><span class="line">信息: result3: null</span><br><span class="line"><span class="meta">#</span> 十二月 15, 2019 4:36:21 下午 ThreadLocalTest testThreadLocal</span><br><span class="line">信息: result4: main-thread</span><br></pre></td></tr></table></figure><h3 id="ThreadLocal详解"><a href="#ThreadLocal详解" class="headerlink" title="ThreadLocal详解"></a>ThreadLocal详解</h3><p>四个接口：</p><ul><li><p>public void set(T value) { }<br>设置当前线程的ThreadLocal值为指定的Value</p></li><li><p>public T get() { }<br>获取当前线程所对应的ThreadLocal值，如果当前线程下没有值，就调用initialValue函数对其进行初始化</p></li><li><p>public void remove() { }<br>删除当前线程ThreadLocal对应的值，当前线程结束时，系统会自动回收线程局部变量值。P.S. remove方法调用后再调用get方法会使<br>initialValue()重新被调用，从而使ThreadLocal的值被重新被初始化。</p></li><li><p>protected T initilValue() { }<br>当前线程通过get()方法第一次对ThreadLocal进行访问时，会调用该方法。</p></li></ul><p>如果我们希望ThreadLocal拥有一个不为null的初始值，则应该为ThreadLocal定义一个子类，并重写initialValue()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发编程的基础、并发模拟工具及代码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA8 常用的日期时间方法</title>
    <link href="https://www.leezy.top/2019/11/07/JAVA8%E5%B8%B8%E7%94%A8%E7%9A%84%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%96%B9%E6%B3%95/"/>
    <id>https://www.leezy.top/2019/11/07/JAVA8常用的日期时间方法/</id>
    <published>2019-11-07T08:27:03.000Z</published>
    <updated>2020-11-28T08:46:52.499Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA8 更新了原本线程不安全的SimpleDateFormat, 新的DateTimeFormatter则是线程安全的。</p><a id="more"></a><p>下面列出JAVA8开发中常用的时间操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前年月日 - 2019-11-06</span></span><br><span class="line">        LocalDate nowDate = LocalDate.now();</span><br><span class="line">        <span class="comment">// 2019</span></span><br><span class="line">        <span class="keyword">int</span> nowYear = nowDate.getYear();</span><br><span class="line">        <span class="comment">// 2019</span></span><br><span class="line">        <span class="keyword">int</span> nowYear1 = nowDate.get(ChronoField.YEAR);</span><br><span class="line">        <span class="comment">// NOVEMBER</span></span><br><span class="line">        Month nowMonth = nowDate.getMonth();</span><br><span class="line">        <span class="comment">// 11</span></span><br><span class="line">        <span class="keyword">int</span> nowMonth1 = nowDate.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">        <span class="comment">// 6</span></span><br><span class="line">        <span class="keyword">int</span> nowDay = nowDate.getDayOfMonth();</span><br><span class="line">        <span class="comment">// 6</span></span><br><span class="line">        <span class="keyword">int</span> nowDay1 = nowDate.get(ChronoField.DAY_OF_MONTH);</span><br><span class="line">        <span class="comment">// WEDNESDAY</span></span><br><span class="line">        DayOfWeek dayOfWeek = nowDate.getDayOfWeek();</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">int</span> dayOfWeek1 = nowDate.get(ChronoField.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 获取当前时分秒 - 15:16:24.401</span></span><br><span class="line">        LocalTime nowTime = LocalTime.now();</span><br><span class="line">        <span class="comment">// 指定时分秒 - 12:51:10</span></span><br><span class="line">        LocalTime nowTime1 = LocalTime.of(<span class="number">12</span>, <span class="number">51</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 指定时间 - 2019-11-06</span></span><br><span class="line">        LocalDate specificTime = LocalDate.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// LocalDateTime 获取年月日时分秒</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 指定时间 2019-11-11T16:14:20</span></span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2019</span>, Month.NOVEMBER, <span class="number">11</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 2019-11-06T16:19:51.506</span></span><br><span class="line">        LocalDateTime localDateTime2 = LocalDateTime.of(nowDate, nowTime);</span><br><span class="line">        <span class="comment">// LocalDateTime localDateTime3 = LocalDat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取毫秒数</span></span><br><span class="line">        <span class="comment">// 获取当前时间 2019-11-06T07:18:39.956Z</span></span><br><span class="line">        Instant instant = Instant.now();</span><br><span class="line">        <span class="comment">// 1573028684 得到的是秒数</span></span><br><span class="line">        <span class="keyword">long</span> currentSecond = instant.getEpochSecond();</span><br><span class="line">        <span class="comment">// 1573028779924 得到毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> currentMilli = instant.toEpochMilli();</span><br><span class="line">        <span class="comment">// 获取当前年月日 - 2019-11-06</span></span><br><span class="line">        LocalDate date = Instant.ofEpochMilli(instant.toEpochMilli()).atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化时间</span></span><br><span class="line">        <span class="comment">// 2019-11-06</span></span><br><span class="line">        LocalDate localDate = LocalDate.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 20191106</span></span><br><span class="line">        String str1 = localDate.format(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        <span class="comment">// 2019-11-06</span></span><br><span class="line">        String str2 = localDate.format(DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line">        <span class="comment">// 自定义格式化</span></span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">// 2019-11-06 16:41:10</span></span><br><span class="line">        String str3 = localDateTime.format(dateTimeFormatter);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA8 更新了原本线程不安全的SimpleDateFormat, 新的DateTimeFormatter则是线程安全的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用知识笔记</title>
    <link href="https://www.leezy.top/2019/10/08/MySQL%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.leezy.top/2019/10/08/MySQL常用知识笔记/</id>
    <published>2019-10-08T08:40:55.000Z</published>
    <updated>2020-11-28T08:46:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL的优化方法。</p><a id="more"></a><h3 id="数据库中事务的四个特性-ACID"><a href="#数据库中事务的四个特性-ACID" class="headerlink" title="数据库中事务的四个特性-ACID"></a>数据库中事务的四个特性-ACID</h3><p>事务是一个操作序列，执行单个逻辑功能的一组指令或操作被称为事务。</p><ul><li>A 原子性 Atomicity - 指事务是一个不可再分割的工作单元，事务中的操作要么都执行，要么都不执行。</li><li>B 一致性 Consistency - 事务的操作不会破坏数据库的数据的完整性以及业务逻辑上的一致性。</li><li>I 隔离性 Isolation - 多个事务并发访问时，每个事务都有自己的数据空间，数据所处于的状态要么是另一个事务修改前的状态，要么是另一个事务修改后的状态，数据不会处于中间状态。</li><li>D 持久性 Durability - 事务完成后对数据的变动是持久保存在数据库中的，不会被回滚。</li></ul><h3 id="MySQL的标准执行顺序"><a href="#MySQL的标准执行顺序" class="headerlink" title="MySQL的标准执行顺序"></a>MySQL的标准执行顺序</h3><p>从上到下：</p><blockquote><p><code>FROM</code></p></blockquote><blockquote><p><code>ON</code><join_condition></join_condition></p></blockquote><blockquote><p><join_type><code>JOIN</code><right_table></right_table></join_type></p></blockquote><blockquote><p><code>WHERE</code><where_condition></where_condition></p></blockquote><blockquote><p><code>GROUP BY</code><group_by_list></group_by_list></p></blockquote><blockquote><p><code>WITH</code> {CUBE|ROLLUP}</p></blockquote><blockquote><p><code>HAVING</code><having_condition></having_condition></p></blockquote><blockquote><p><code>SELECT</code></p></blockquote><blockquote><p><code>DISTINCT</code><select_list></select_list></p></blockquote><blockquote><p><code>ORDER BY</code><order_by_list></order_by_list></p></blockquote><blockquote><p><code>LIMIT</code><limit_number></limit_number></p></blockquote><h3 id="MySQL引擎MyISAM和Innodb的区别"><a href="#MySQL引擎MyISAM和Innodb的区别" class="headerlink" title="MySQL引擎MyISAM和Innodb的区别"></a>MySQL引擎MyISAM和Innodb的区别</h3><ul><li>MyISAM 引擎：</li></ul><ol><li>不支持事务，但是所有操作都是原子性的</li><li>每次操作都是对整个表加锁</li><li>一个MyISAM表有三个文件：索引文件，表结构文件，数据文件</li><li>采用非聚集索引，索引文件的数据域存储指向数据文件的指针，辅索引和主索引基本一致，但辅索引不用保证唯一性。</li></ol><p>-InnoDB 引擎：</p><ol><li>支持ACID四种隔离级别</li><li>支持行级锁和外键约束</li><li>不存储总行数</li><li>主键索引采用聚集索引，辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；推荐使用自增主键，防止插入数据时，为了维持B+树结构，文件的大调整。</li></ol><ul><li>使用场景分析：<br>读多，写少，对索引要求低用MyISAM;<br>读少，写多，并发写入高时，用InnoDB;<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3></li></ul><p>场景：含有GroupBy的语句里如何显示查询Count()为0的字段。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的优化方法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://www.leezy.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Git-从入门到精通</title>
    <link href="https://www.leezy.top/2019/09/29/Git-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>https://www.leezy.top/2019/09/29/Git-从入门到精通/</id>
    <published>2019-09-29T09:43:03.000Z</published>
    <updated>2020-11-28T08:46:52.498Z</updated>
    
    <content type="html"><![CDATA[<p>Git Bash的简单使用方法。</p><a id="more"></a><p>git 可以分三个区：</p><blockquote><p>工作区(注解编辑页面)，就是本地文件夹。<br>暂存区(数据暂时存放的位置，可以在工作区和版本库之间进行数据的友好交流)，git add 命令将他们添加到暂存区。<br>版本库/本地仓库(存放已经提交的数据，push的时候，就是将这个区的数据push到远程仓库了)，git commit 命令则将暂存区中的文件提交到本地仓库中。</p></blockquote><p>首先连接到国际互联网:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 不需要的就不用了</span><br><span class="line">export http_proxy="http://127.0.0.1:1080/"</span><br><span class="line">export https_proxy="http://127.0.0.1:1080/"</span><br></pre></td></tr></table></figure><h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "SAKURA"</span><br><span class="line">git config --global user.email "xxx@gmail.com"</span><br><span class="line"><span class="meta">#</span> 建立代码仓库(在指定目录建立.git文件夹)</span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span> 查看代码仓库状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="提交本地代码"><a href="#提交本地代码" class="headerlink" title="提交本地代码"></a>提交本地代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git add READEME.txt</span><br><span class="line"><span class="meta">#</span> 全部更新到暂存区</span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span> 在 -m 后面加上声明, 将代码提交到本地仓库</span><br><span class="line">git commit -m "Wrote a READEME file"</span><br><span class="line"><span class="meta">#</span> 如果要求的提交备注特别多,可以打开一个vi编辑器</span><br><span class="line">git commit</span><br><span class="line"><span class="meta">#</span> 从本地仓库提交到远程仓库master分支</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>注释</strong><br>可以在代码仓库的根目录下创建一个名为.gitignore的文件，然后编辑里面的内容，把不需提交的文件忽略掉！</p><h3 id="commit前的文件状态"><a href="#commit前的文件状态" class="headerlink" title="commit前的文件状态"></a>commit前的文件状态</h3><p><code>git status</code>查看文件状态，Git在未进行commit操作之前，存在三种状态：</p><blockquote><p>Untracked files</p></blockquote><blockquote><p>Changes not staged for commit</p></blockquote><blockquote><p>Changes to be committed</p></blockquote><h3 id="分支的建立"><a href="#分支的建立" class="headerlink" title="分支的建立"></a>分支的建立</h3><p>早建分支, 多用分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 建立分支</span><br><span class="line">git branch newImage</span><br><span class="line"><span class="meta">#</span> 切换到新分支 newImage</span><br><span class="line">git checkout newImage;</span><br><span class="line"><span class="meta">#</span> 新分支代码提交</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>上面的操作可以简化为下面两步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建新的分支并切换到新分支</span><br><span class="line">git checkout -b newImage</span><br><span class="line"><span class="meta">#</span> 新分支代码提交</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h3 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h3><p>方法一：<code>Merge</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 建立新的分支bugFix</span><br><span class="line">git branch bugFix</span><br><span class="line"><span class="meta">#</span> 切换到bugFix分支</span><br><span class="line">git checkout bugFix</span><br><span class="line"><span class="meta">#</span> bugFix代码提交</span><br><span class="line">git commit</span><br><span class="line"><span class="meta">#</span> 切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span> master分支代码提交</span><br><span class="line">git commit</span><br><span class="line"><span class="meta">#</span> 分支合并 - 现在master分支上有了bugFix的提交</span><br><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure><p>方法二：<code>Rebase</code><br>简单来说Rebase就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个将修改放下去，这样的好处是会使代码库的提交历史变得清晰。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 假设当前是在bugFix分支下，将bugFix分支的工作直接移动到master分支上</span><br><span class="line">git rebase master</span><br><span class="line"><span class="meta">#</span> 切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span> 将master分支的引用向前移动，即rebase到bugFix</span><br><span class="line">git rebase bugFix</span><br></pre></td></tr></table></figure><h3 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h3><p>HEAD 总是指向当前分支上最近一次提交记录，<strong>HEAD通常是指向分支名的,但是可以通过<code>git checkout &lt;哈希值&gt;</code>来将HEAD指向一个具体的提交记录</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看HEAD指向的两种方式</span><br><span class="line">cat .git/HEAD</span><br><span class="line"><span class="meta">#</span> 如若HEAD指向的是一个引用</span><br><span class="line">git symbolic-ref HEAD </span><br><span class="line"><span class="meta">#</span> 分离的HEAD，为了让其指向某个具体的提交记录而不是分支名 注：这里的Hash值并不需要全部40位，</span><br><span class="line"><span class="meta">#</span> 能表示出唯一标识的前7位字符就可以</span><br><span class="line">git checkout &lt;提交记录的哈希值&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>为了避免使用<code>git log</code>命令查看Hash值，再通过<code>git checkout</code>命令分离HEAD，所以有了<strong>相对引用</strong></p><blockquote><p><code>^</code> 表示向上移动一个提交记录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD^</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">git checkout master^</span><br></pre></td></tr></table></figure><blockquote><p><code>~&lt;num&gt;</code>表示向上移动<strong>多个</strong>提交记录, num为1时等价与<code>^</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 寻找指定提交记录的父提交</span><br><span class="line">git checkout HEAD~3</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">git checkout master~3</span><br></pre></td></tr></table></figure><p>相对引用最常见的地方就是用来移动分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将master分支移到HEAD所指分支位置前三个节点</span><br><span class="line">git branch -f master HEAD~3</span><br></pre></td></tr></table></figure><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p>方法一：<code>git reset</code> - 仅限在本地分支中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把分支记录回退几个提交记录来实现撤销改动,最新的提交变成了未加入暂存区状态(git reset 缺省为 git reset --soft)即文件没有更改</span><br><span class="line"><span class="meta">#</span> 只是将git commit 的信息给回退了。推荐直接使用 git reset --hard HEAD^, --hard参数会将文件直接修改回去。</span><br><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure><p>方法二：<code>git revert</code> - 适用于提交到了远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 会在远程添加一个新的提交记录，用来抵消掉远程仓库最新的更改</span><br><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><p>但是如果你后悔了怎么办。这个时候需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有版本号</span><br><span class="line">git reflog</span><br><span class="line"><span class="meta">#</span> 退回到指定版本 包括已经删除了的修改</span><br><span class="line">git reset --hard XXX&lt;版本号&gt;</span><br></pre></td></tr></table></figure><h3 id="提交记录的整理"><a href="#提交记录的整理" class="headerlink" title="提交记录的整理"></a>提交记录的整理</h3><blockquote><p>将一些提交复制到当前所在的位置（HEAD）的下面，cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD上（只要不是HEAD上游的提交就没有问题）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git cherry-pick &lt;提交号&gt;...</span><br><span class="line">git cherry-pick d4b052 4aa0aa</span><br></pre></td></tr></table></figure><blockquote><p>交互式的rebase</p></blockquote><p>你可以通过给<code>git rebase</code>增加<code>-i</code>选项来以交互方式地运行rebase。你必须通过告诉命令衍合到哪次提交，来指明你需要重写的提交的回溯深度。</p><p><img src="/assets/blogImg/Git_git_log.png" alt="Git_git_log"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这是一个衍合命令——HEAD~2..HEAD范围内的每一次提交都会被重写，无论你是否修改说明。</span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>上述命令会打开一个交互窗口：</p><p><img src="/assets/blogImg/Git_git_rebase_i.png" alt="Git-从入门到精通_git_rebase_-i"></p><p>很重要的一点是你得注意这些提交的顺序与你通常通过log命令看到的是相反的。</p><p>通过rebase UI界面, 你能做3件事:</p><ul><li>调整提交记录的顺序</li><li>删除你不想要的提交</li><li>合并提交, 把多个提交记录合并成一个。</li></ul><p>详情请看<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2" title="Git-工具-重写历史" target="_blank" rel="noopener">这里</a></p><h3 id="查看修改的内容"><a href="#查看修改的内容" class="headerlink" title="查看修改的内容"></a>查看修改的内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> "+"号表示新增内容， "-"号表示删除的内容</span><br><span class="line">git diff</span><br><span class="line"><span class="meta">#</span> 可视化的查看方法</span><br><span class="line">git difftool</span><br></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><blockquote><ul><li>此次提交对应的版本号</li><li>提交人：姓名 邮箱</li><li>提交的时间</li><li>提交版本修改的内容：就是我们commit -m  “xxx”里的xxx</li></ul></blockquote><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>提交后回退到上一个版本</p><blockquote><ul><li>需要版本号</li><li>HEAD代表当前版本, HEAD^表示上一个版本, 以此类推</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看版本号</span><br><span class="line">git log </span><br><span class="line">git reset --hard f37911a60ca123c86c712ff0539619902a7375e8(目标版本号)</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><p>如果你又后悔了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>键入版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号(你要回退的版本号)</span><br></pre></td></tr></table></figure><p>又会回到你期望的版本！</p><h3 id="GitHub-初始化提交"><a href="#GitHub-初始化提交" class="headerlink" title="GitHub 初始化提交"></a>GitHub 初始化提交</h3><ul><li><p>create a new repository on the command line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo "# NOTES" &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span> git add .</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git remote add origin https://github.com/XXX/NOTES.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>push an existing repository from the command line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/XXX/NOTES.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动上传脚本"><a href="#自动上传脚本" class="headerlink" title="自动上传脚本:"></a>自动上传脚本:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">echo 'start autodeployment...:)'</span><br><span class="line">hexo clean</span><br><span class="line">echo 'hexo clean over...'</span><br><span class="line">hexo generate</span><br><span class="line">echo 'hexo generate over...'</span><br><span class="line">hexo deploy</span><br><span class="line">echo 'hexo deploy over...'</span><br><span class="line">echo 'run success!:)'</span><br></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p>场景：本地新建了一个新的文件夹，想拉取远程的一个项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/XXX/NOTES.git</span><br><span class="line"><span class="meta">#</span> git pull &lt;remote&gt; &lt;branch&gt; 直接指定远程master</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span> 先指定本地master到远程的master，然后再去pull</span><br><span class="line">git branch --set-upstream-to=origin/master master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>场景：将本地的<code>.git</code>文件删除了，本地文件也更新了，新建git仓库和远程合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/XXX/NOTES.git</span><br><span class="line"><span class="meta">#</span> 会报错，failed to push some refs to ...</span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta">#</span> 这个时候需要先拉取远程的项目</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span> 然后会报错，fatal: refusing to merge unrelated histories</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"><span class="meta">#</span> 然后按照要求解决冲突就好，再commit一下</span><br><span class="line">git add .</span><br><span class="line">git commit -m "fix conflicts"</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>场景：远程仓库里提交了一些不需要的文件，本地添加到<code>.gitignore</code>文件后不起作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m 'update .gitignore'</span><br></pre></td></tr></table></figure><p>场景：远程仓库有两个分支<code>master</code>和<code>dev</code>，比较二者的版本差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看远程dev有但是远程master没有的</span><br><span class="line">git log origin/dev ^origin/master</span><br><span class="line"><span class="meta">#</span> 查看远程master有但是远程dev没有的</span><br><span class="line">git log origin/dev..origin/master</span><br><span class="line"><span class="meta">#</span> 查看远程master有但是远程dev没有的</span><br><span class="line">git log origin/master ^origin/dev</span><br><span class="line"><span class="meta">#</span> 查看远程dev有但是远程master没有的</span><br><span class="line">git log origin/master..origin/dev</span><br><span class="line"><span class="meta">#</span> 单纯想比较两者之间的区别</span><br><span class="line">git log origin/dev...origin/master</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">git log --left-right dev...master</span><br></pre></td></tr></table></figure><p>上述命令可以加上<code>--pretty=oneline</code>让结果输出更简洁。</p><p>场景：处理完冲突后将文件查看分支的更改情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line"><span class="meta">#</span> 起别名</span><br><span class="line">git config --global alias.lg “log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit”</span><br><span class="line"><span class="meta">#</span> 直接使用</span><br><span class="line">git lg</span><br></pre></td></tr></table></figure><p>场景：新建分支并上传，并给分支添加tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "请输入项目名称"</span><br><span class="line">read project_dir</span><br><span class="line">if [ ! -n "$project_dir" ]</span><br><span class="line">then</span><br><span class="line">project_dir="/"</span><br><span class="line">fi</span><br><span class="line">echo "cd ./$project_dir"</span><br><span class="line">cd ./$project_dir</span><br><span class="line">git init</span><br><span class="line">echo "git init"</span><br><span class="line">git add .</span><br><span class="line">echo "git add ."</span><br><span class="line">git commit -m "R16.40"</span><br><span class="line">echo "git commit -m "R16.40""</span><br><span class="line">echo "请输入仓库地址"</span><br><span class="line">read repository_url</span><br><span class="line">if [ ! -n "$repository_url" ]</span><br><span class="line">then</span><br><span class="line">echo "仓库地址不正确"</span><br><span class="line">fi</span><br><span class="line">git remote add origin $repository_url</span><br><span class="line">echo "git remote add origin $repository_url"</span><br><span class="line">git checkout -b R16.40</span><br><span class="line">echo "git checkout -b R16.40"</span><br><span class="line">git push -u origin R16.40:R16.40</span><br><span class="line">echo "git push -u origin R16.40:R16.40"</span><br><span class="line">echo "请输入tag"</span><br><span class="line">read project_tag</span><br><span class="line">if [ ! -n "$project_tag" ]</span><br><span class="line">then</span><br><span class="line">echo "项目标签不正确"</span><br><span class="line">fi</span><br><span class="line">git tag $project_tag</span><br><span class="line">echo "git tag $project_tag"</span><br><span class="line">git push origin $project_tag</span><br><span class="line">echo "git push origin $project_tag"</span><br><span class="line">echo "代码上传成功"</span><br><span class="line">sleep 5s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Bash的简单使用方法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="https://www.leezy.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识-Map</title>
    <link href="https://www.leezy.top/2019/09/09/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-Map/"/>
    <id>https://www.leezy.top/2019/09/09/JAVA基础知识-Map/</id>
    <published>2019-09-09T03:06:00.000Z</published>
    <updated>2020-11-28T08:46:52.499Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA基础知识-Map 相关知识。</p><a id="more"></a><h3 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h3><blockquote><p>方法一：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlowMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"01"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"02"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"03"</span>);</span><br><span class="line">        <span class="comment">// 获取键的集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="comment">// 利用set集合的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(<span class="string">"MAP INFO KEY:"</span> + key + <span class="string">" VALUE:"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt; 方法二：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"01"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"02"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"03"</span>);</span><br><span class="line">        <span class="comment">// 通过entrySet()方法将map集合中的映射关系取出</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entry = map.entrySet();</span><br><span class="line">        <span class="comment">// 利用关系集合entrySet的迭代器</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = entry.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 获取Map.Entry的关系对象me</span></span><br><span class="line">            Map.Entry&lt;String, String&gt; me = iterator.next();</span><br><span class="line">            <span class="comment">// 通过关系对象获取key</span></span><br><span class="line">            String key = me.getKey();</span><br><span class="line">            <span class="comment">// 通过关系对象获取value</span></span><br><span class="line">            String value = me.getValue();</span><br><span class="line">            System.out.println(<span class="string">"Key :"</span> + key + <span class="string">" value :"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法三：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"01"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"02"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"03"</span>);</span><br><span class="line">        <span class="comment">// Collection集合存放Map的value值</span></span><br><span class="line">        Collection&lt;String&gt; collection = map.values();</span><br><span class="line">        <span class="comment">// 遍历Collection</span></span><br><span class="line">        Iterator&lt;String&gt; it = collection.iterator();</span><br><span class="line">        <span class="comment">// 只能遍历value值，不能遍历key值</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            Object value = it.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最佳实践：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"A"</span>, <span class="string">"01"</span>);</span><br><span class="line">        map.put(<span class="string">"B"</span>, <span class="string">"02"</span>);</span><br><span class="line">        map.put(<span class="string">"C"</span>, <span class="string">"03"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA基础知识-Map 相关知识。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识-HashMap</title>
    <link href="https://www.leezy.top/2019/09/05/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-HashMap/"/>
    <id>https://www.leezy.top/2019/09/05/JAVA基础知识-HashMap/</id>
    <published>2019-09-05T03:06:00.000Z</published>
    <updated>2020-11-28T08:46:52.499Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA基础知识-HashMap 相关知识。</p><a id="more"></a><h3 id="常用的通配符"><a href="#常用的通配符" class="headerlink" title="常用的通配符"></a>常用的通配符</h3><p><strong>T</strong>, <strong>E</strong>, <strong>K</strong>, <strong>V</strong>, <strong>?</strong></p><p>本质上没有任何区别，但是为了维持可读性，常这样约定：</p><p>？表示不确定的JAVA类型</p><p>T (type) 表示一个具体的JAVA类型</p><p>K V (key value) 分别表示JAVA键值对 key - value</p><p>E (element) 代表Element</p><h3 id="RBT-红黑树"><a href="#RBT-红黑树" class="headerlink" title="RBT(红黑树)"></a>RBT(红黑树)</h3><ul><li>每个节点是红色或者黑色</li><li>根节点是黑色</li><li>每个叶节点是黑色的</li><li>如果一个节点是红色的，则它的两个儿子都是黑色的</li><li>对于每个节点，从该结点到其叶子节点构成的所有路径上的黑色结点个数相同</li></ul><p><strong>插入过程：</strong></p><p>默认插入节点为红色</p><h3 id="AVL-自平衡二叉查找树"><a href="#AVL-自平衡二叉查找树" class="headerlink" title="AVL(自平衡二叉查找树)"></a>AVL(自平衡二叉查找树)</h3><ul><li><p>首先是一棵二叉查找树</p><p><em>某节点的左子树节点值仅包含小于该节点值</em></p><p><em>某节点的右子树节点值仅包含大于该节点值</em></p><p><em>左右子树每个也必须是二叉查找树</em></p></li><li><p>带有平衡条件，每个结点的左右子树的高度之差的绝对值（平衡因子）最多为1</p></li></ul><h3 id="RBT和AVL"><a href="#RBT和AVL" class="headerlink" title="RBT和AVL"></a>RBT和AVL</h3><p>查找远远多于插入删除，选择AVL树</p><p>如果查找、插入、删除频率差不多，那么选择红黑树</p><h3 id="JAVA-中红黑树的实现"><a href="#JAVA-中红黑树的实现" class="headerlink" title="JAVA 中红黑树的实现"></a>JAVA 中红黑树的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>红黑树的插入过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始染色为红</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">// 插入的为根节点（父节点为空），则直接把颜色改为黑色</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父节点为黑色节点或者插入节点的祖父节点为空，则直接返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// I. 父节点和祖父节点都存在且父节点是祖父节点的左节点</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// 1. 祖父节点的右节点（叔叔节点）不是空且为红色</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                <span class="comment">// 将叔叔节点改为黑色</span></span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 将父亲节点改为黑色</span></span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 将祖父节点改为红色</span></span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 祖父节点的右节点（叔叔节点）是空或者为黑色</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 插入节点是父节点的右孩子，将父节点左旋</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 插入节点是父节点的左孩子</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将父节点变成黑色节点</span></span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 祖父节点变成红色节点，然后将祖父节点右旋</span></span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// II. 父节点和祖父节点都存在且父节点是祖父节点的右节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 祖父节点的左节点（叔叔节点）不为空且为红色</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                <span class="comment">// 将叔叔节点改为黑色</span></span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 将父亲节点改为黑色</span></span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 将祖父节点改为红色</span></span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 祖父节点的左节点（叔叔节点）是空或者为黑色</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 插入节点是父节点的左孩子，将父节点右旋</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 插入节点是父节点的右孩子</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将父节点变成黑色节点</span></span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 祖父节点变成红色节点，然后将祖父节点左旋</span></span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左旋右旋方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>红黑树的删除过程：</p><ol><li>先进行二叉搜索树的删除</li><li>然后进行红黑树的调整</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p是待删除节点，replacement用于后续的红黑树调整，指向的是p或者p的继承者。</span></span><br><span class="line"><span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">    <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">        s = sl;</span><br><span class="line">    <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">    TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">    TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">    <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s's direct parent</span></span><br><span class="line">        p.parent = s;</span><br><span class="line">        s.right = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">        <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                sp.left = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sp.right = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">            pr.parent = s;</span><br><span class="line">    &#125;</span><br><span class="line">    p.left = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">        sr.parent = p;</span><br><span class="line">    <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">        pl.parent = s;</span><br><span class="line">    <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">        root = s;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">        pp.left = s;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pp.right = s;</span><br><span class="line">    <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">        replacement = sr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replacement = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">    replacement = pl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">    replacement = pr;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    replacement = p;</span><br><span class="line"><span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">    <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">        root = replacement;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">        pp.left = replacement;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pp.right = replacement;</span><br><span class="line">    p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果删除时的节点p是红色，则树平衡不会被破坏，无需调整。 </span></span><br><span class="line">TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">    TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">    p.parent = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (pp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">            pp.right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (movable)</span><br><span class="line">    moveRootToFront(tab, r);</span><br></pre></td></tr></table></figure><p>删除后的调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// root : 根节点 | x : 根节点的继承者</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;) &#123;</span><br><span class="line">        <span class="comment">// 如果x为空或x为根节点，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// x为根节点，染成黑色，直接返回(删除的为根节点，则扶植继承者x为新的根节点)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// x为红色，则无需调整，直接返回根节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// x为其父节点的左孩子</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">            <span class="comment">// 如果x有红色兄弟节点xpr, 则它的父节点xp一定是黑色节点</span></span><br><span class="line">            <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">// 将父节点左旋</span></span><br><span class="line">                root = rotateLeft(root, xp);</span><br><span class="line">                <span class="comment">// 重新将xp指向x的父节点，xpr指向xp新的右孩子</span></span><br><span class="line">                xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果xpr为空，则向上继续调整，将x的父节点xp作为新的x继续循环</span></span><br><span class="line">            <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// sl和sr分别为其近侄子和远侄子</span></span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                <span class="comment">// 若s1和s2都为黑色或者不存在，即xpr没有红色孩子，则将xpr染红</span></span><br><span class="line">                <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp; (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                    xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// 继续向上循环</span></span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 右孩子为空或者为黑色</span></span><br><span class="line">                    <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                        <span class="comment">// 有左孩子则染黑</span></span><br><span class="line">                        <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="comment">// 将xpr染红</span></span><br><span class="line">                        xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">// xpr右旋</span></span><br><span class="line">                        root = rotateRight(root, xpr);</span><br><span class="line">                        <span class="comment">// 右旋后xpr指向xp的新右孩子，即上面的s1</span></span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// xpr染成跟父节点一致的颜色，为后面父节点xp的左旋做准备</span></span><br><span class="line">                        <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                        xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                            <span class="comment">// xpr新的右孩子染黑，防止出现两个红色相连</span></span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将xp染黑，并对其左旋，这样就能保证被删除的X所在的路径又多了一个黑色节点，从而达到恢复平衡的目的</span></span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 到此调整已经完毕，进入下一次循环后将直接退出</span></span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// x为其父节点的右孩子...</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">            <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                root = rotateRight(root, xp);</span><br><span class="line">                xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                    (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                    xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpl);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写HashCode-方法和Equals-方法"><a href="#重写HashCode-方法和Equals-方法" class="headerlink" title="重写HashCode()方法和Equals()方法"></a>重写HashCode()方法和Equals()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prediction.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prediction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> shadow = rand.nextDouble() &gt; <span class="number">0.5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shadow) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Six more weeks of Winner!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Early Spring"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Groundhog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groundhog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Groundhog</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        number = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Groundhog #"</span> + number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringDetector.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDetector</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 利用反射机制获取构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Groundhog&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detectSpring</span><span class="params">(Class&lt;T&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Constructor&lt;T&gt; ghog = type.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;Groundhog, Prediction&gt; map = <span class="keyword">new</span> HashMap&lt;Groundhog, Prediction&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            map.put(ghog.newInstance(i), <span class="keyword">new</span> Prediction());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"MAP"</span> + map);</span><br><span class="line"></span><br><span class="line">        Groundhog groundhog = ghog.newInstance(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Looking up prediction for"</span> + groundhog);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(groundhog)) &#123;</span><br><span class="line">            System.out.println(map.get(groundhog));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Key not found:"</span> + groundhog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        detectSpring(Groundhog.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAP&#123;Groundhog #1=Six more weeks of Winner!, Groundhog #4=Six more weeks of Winner!, Groundhog #5=Early Spring, Groundhog #3=Early Spring, Groundhog #8=Six more weeks of Winner!, Groundhog #7=Early Spring, Groundhog #0=Six more weeks of Winner!, Groundhog #2=Early Spring, Groundhog #9=Six more weeks of Winner!, Groundhog #6=Early Spring&#125;</span><br><span class="line">Looking up prediction forGroundhog #3</span><br><span class="line">Key not found:Groundhog #3</span><br></pre></td></tr></table></figure><p>Groundhog默认调用的是基类Object的hashCode方法，默认使用的是对象的地址计算的散列码。同时只重写hashCode()方法是不够的，还需要重写equals()方法。</p><blockquote><p><em>补充一句，hashCode()是基类Object的方法，所有Java对象都能产生散列码。</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Groundhog2.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groundhog2</span> <span class="keyword">extends</span> <span class="title">Groundhog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Groundhog2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object <span class="keyword">instanceof</span> Groundhog2 &amp;&amp; (number == ((Groundhog2)object).number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringDetector2.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDetector2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringDetector.detectSpring(Groundhog2.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAP&#123;Groundhog #0=Six more weeks of Winner!, Groundhog #1=Six more weeks of Winner!, Groundhog #2=Early Spring, Groundhog #3=Early Spring, Groundhog #4=Six more weeks of Winner!, Groundhog #5=Early Spring, Groundhog #6=Early Spring, Groundhog #7=Early Spring, Groundhog #8=Six more weeks of Winner!, Groundhog #9=Six more weeks of Winner!&#125;</span><br><span class="line">Looking up prediction forGroundhog #3</span><br><span class="line">Early Spring</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA基础知识-HashMap 相关知识。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>データとの絆</title>
    <link href="https://www.leezy.top/2019/08/15/THE_DATA_ANALYSIS/"/>
    <id>https://www.leezy.top/2019/08/15/THE_DATA_ANALYSIS/</id>
    <published>2019-08-15T11:56:02.000Z</published>
    <updated>2020-11-28T08:46:52.504Z</updated>
    
    <content type="html"><![CDATA[<p>もう一回もう一回行こうぜ 僕らの声</p><p>アイムアルーザー ずっと前から聞こえてた</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_woody</span><br></pre></td></tr></table></figure><pre><code>Matplotlib env init complete.Warnings off.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不省略行的查看数据</span></span><br><span class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h3 id="数据源准备"><a href="#数据源准备" class="headerlink" title="数据源准备"></a>数据源准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入train数据</span></span><br><span class="line">train_idv_td = pd.read_csv(<span class="string">"../data/2/train/IDV_TD.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 个人定期存款账户信息（IDV_TD）</span></span><br><span class="line">train_idv_dpsa = pd.read_csv(<span class="string">"../data/2/train/IDV_DPSA.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 个人活期存款账户信息（IDV_DPSA）</span></span><br><span class="line">train_loan = pd.read_csv(<span class="string">"../data/2/train/LOAN.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 贷款账户信息（LOAN）</span></span><br><span class="line">train_bond = pd.read_csv(<span class="string">"../data/2/train/BOND.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 国债账户信息（BOND）</span></span><br><span class="line">train_fund = pd.read_csv(<span class="string">"../data/2/train/FUND.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 基金账户信息（FUND）</span></span><br><span class="line">train_prec_metal = pd.read_csv(<span class="string">"../data/2/train/PREC_METAL.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 贵金属账户信息（PREC_METAL）</span></span><br><span class="line">train_aget_insr = pd.read_csv(<span class="string">"../data/2/train/AGET_INSR.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 代理保险账户信息（AGET_INSR）</span></span><br><span class="line">train_thr_pty_cstd = pd.read_csv(<span class="string">"../data/2/train/THR_PTY_CSTD.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 第三方存管账户信息（THR_PTY_CSTD）</span></span><br><span class="line">train_idv_cust_basic = pd.read_csv(<span class="string">"../data/2/train/IDV_CUST_BASIC.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 个人客户基本信息（IDV_CUST_BASIC）</span></span><br><span class="line">train_tr_dc = pd.read_csv(<span class="string">"../data/2/train/TR_DC.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 交易信息（TR_DC）</span></span><br><span class="line">train_base_excg = pd.read_csv(<span class="string">"../data/2/train/BASE_EXCG.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 汇率表（BASE_EXCG）</span></span><br><span class="line">train_cust_result = pd.read_csv(<span class="string">"../data/2/train/CUST_RESULT.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 客户标记（CUST_RESULT）</span></span><br><span class="line"><span class="comment"># A榜</span></span><br><span class="line"><span class="comment"># BASE_EXCG.csv 无</span></span><br><span class="line">A_idv_td = pd.read_csv(<span class="string">"../data/2/A/IDV_TD.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_idv_dpsa = pd.read_csv(<span class="string">"../data/2/A/IDV_DPSA.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_loan = pd.read_csv(<span class="string">"../data/2/A/LOAN.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_bond = pd.read_csv(<span class="string">"../data/2/A/BOND.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_fund = pd.read_csv(<span class="string">"../data/2/A/FUND.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_prec_metal = pd.read_csv(<span class="string">"../data/2/A/PREC_METAL.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_aget_insr = pd.read_csv(<span class="string">"../data/2/A/AGET_INSR.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_thr_pty_cstd = pd.read_csv(<span class="string">"../data/2/A/THR_PTY_CSTD.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_idv_cust_basic = pd.read_csv(<span class="string">"../data/2/A/IDV_CUST_BASIC.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_tr_dc = pd.read_csv(<span class="string">"../data/2/A/TR_DC.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">A_customid = pd.read_csv(<span class="string">"../data/2/A/CUSTOMID.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># B榜</span></span><br><span class="line">B_idv_td = pd.read_csv(<span class="string">"../data/2/B/IDV_TD.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_idv_dpsa = pd.read_csv(<span class="string">"../data/2/B/IDV_DPSA.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_loan = pd.read_csv(<span class="string">"../data/2/B/LOAN.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_bond = pd.read_csv(<span class="string">"../data/2/B/BOND.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_fund = pd.read_csv(<span class="string">"../data/2/B/FUND.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_prec_metal = pd.read_csv(<span class="string">"../data/2/B/PREC_METAL.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_aget_insr = pd.read_csv(<span class="string">"../data/2/B/AGET_INSR.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_thr_pty_cstd = pd.read_csv(<span class="string">"../data/2/B/THR_PTY_CSTD.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_idv_cust_basic = pd.read_csv(<span class="string">"../data/2/B/IDV_CUST_BASIC.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_tr_dc = pd.read_csv(<span class="string">"../data/2/B/TR_DC.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">B_customid = pd.read_csv(<span class="string">"../data/2/B/CUSTOMID.csv"</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/IPython/core/interactiveshell.py:2728: DtypeWarning: Columns (12) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把汇率表中的CCY_LETE_CD字段转化为CCY_CD字段</span></span><br><span class="line">train_base_excg = pd.read_csv(<span class="string">"../data/2/train/BASE_EXCG.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 汇率表（BASE_EXCG）</span></span><br><span class="line">train_base_excg[<span class="string">'CCY_CD'</span>] = train_base_excg[<span class="string">'CCY_LETE_CD'</span>]</span><br><span class="line">train_base_excg = train_base_excg.drop([<span class="string">'CCY_LETE_CD'</span>], axis=<span class="number">1</span>)</span><br><span class="line">train_base_excg[<span class="string">'RMB_MID_PRIC'</span>].apply(<span class="keyword">lambda</span> x: float(x))</span><br><span class="line"><span class="comment"># 把汇率表中的CCY_LETE_CD字段转化为CCY_CD字段</span></span><br><span class="line">train_tr_dc[<span class="string">'TR_DAT'</span>].apply(<span class="keyword">lambda</span> x: int(x))</span><br></pre></td></tr></table></figure><h3 id="公用函数"><a href="#公用函数" class="headerlink" title="公用函数"></a>公用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按汇率计算价值（传入2个参数返回计算结果）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_REAL_MONEY</span><span class="params">(train_IDV_DPSA_SAMPLE, A, B)</span>:</span></span><br><span class="line">    NEED = train_IDV_DPSA_SAMPLE[A]</span><br><span class="line">    RMB_MID_PRIC = train_IDV_DPSA_SAMPLE[B]</span><br><span class="line">    <span class="keyword">return</span> NEED * float(RMB_MID_PRIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot 处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地评价</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(test_y, y_pred)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">    test_pct_1 = test_y.sum()/test_y.shape[<span class="number">0</span>]</span><br><span class="line">    pred_pct_1 = y_pred.sum()/y_pred.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    roc_auc = metrics.roc_auc_score(test_y,y_pred)</span><br><span class="line">    acc = metrics.accuracy_score(test_y,y_pred)</span><br><span class="line">    Recall = metrics.recall_score(test_y,y_pred)</span><br><span class="line">    F1 = metrics.f1_score(test_y,y_pred)</span><br><span class="line">    Precision = metrics.precision_score(test_y,y_pred)</span><br><span class="line">    Confusion = metrics.confusion_matrix(test_y,y_pred)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'test_pct_1: %.4f'</span> %  test_pct_1)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'pred_pct_1: %.4f'</span> %  pred_pct_1)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Precesion: %.4f'</span> % Precision)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Recall: %.4f'</span> %  Recall)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'F1-score: %.4f'</span> % F1)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'confusion matrix:'</span>)</span><br><span class="line">    <span class="keyword">print</span> (metrics.confusion_matrix(test_y,y_pred))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'test_pct_1'</span>:test_pct_1,<span class="string">'pred_pct_1'</span>:pred_pct_1,<span class="string">'roc_auc'</span>:roc_auc,<span class="string">'acc'</span>:acc,<span class="string">'recall'</span>:Recall,<span class="string">'F1'</span>:F1,<span class="string">'Precision'</span>:Precision,<span class="string">'Confusuion'</span>:Confusion&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feature_rank</span><span class="params">(model,num)</span>:</span></span><br><span class="line">    <span class="comment">##计算特征得分</span></span><br><span class="line">    feature_score = model.get_fscore()</span><br><span class="line">    df_feature_score = pd.DataFrame(&#123;<span class="string">"feature_name"</span>:list(feature_score.keys()),<span class="string">"feature_score"</span>:list(feature_score.values())&#125;)</span><br><span class="line">    df_feature_score_sort = df_feature_score.sort_values(ascending=<span class="number">0</span>,by=[<span class="string">'feature_score'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#result_name = "feature_score_1_A_%s_%s_%s_%6f.csv"%(time_str,feature_num,train_steps,F1_score)</span></span><br><span class="line">    <span class="comment">#result_name_full = datas_dir_e + "out/" + result_name</span></span><br><span class="line">    <span class="comment">#df_feature_score_sort.to_csv(result_name_full,index=None)</span></span><br><span class="line">    <span class="keyword">return</span> df_feature_score_sort.head(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stat_df</span><span class="params">(df)</span>:</span></span><br><span class="line">    stats = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">        stats.append((col, df[col].nunique(),df[col].isnull().sum()*<span class="number">100</span>/df.shape[<span class="number">0</span>],</span><br><span class="line">                     df[col].value_counts(normalize=<span class="keyword">True</span>,dropna=<span class="keyword">False</span>).values[<span class="number">0</span>]*<span class="number">100</span>,df[col].dtype))</span><br><span class="line">    stats_df = pd.DataFrame(stats, columns=[<span class="string">'特征'</span>,<span class="string">'唯一数数量'</span>,<span class="string">'缺失值占比'</span>,<span class="string">'最多数占比'</span>,<span class="string">'类型'</span>])</span><br><span class="line">    stats_df.sort_values(<span class="string">'缺失值占比'</span>,ascending=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> stats_df</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_feature_distribution</span><span class="params">(df1,df2,label1,label2,features,width=<span class="number">6</span>,height=<span class="number">6</span>)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">    plt.figure()</span><br><span class="line">    fig,ax = plt.subplots(width,height,figsize=(<span class="number">20</span>,<span class="number">12</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        plt.subplot(width,height,i)</span><br><span class="line">        sns.kdeplot(df1[feature],bw=<span class="number">0.5</span>,label=label1)</span><br><span class="line">        sns.kdeplot(df2[feature],bw=<span class="number">0.5</span>,label=label2)</span><br><span class="line">        plt.xlabel(feature,fontsize=<span class="number">9</span>)</span><br><span class="line">        locs, labels = plt.xticks()</span><br><span class="line">        plt.tick_params(axis=<span class="string">'x'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">6</span>,pad=<span class="number">-6</span>)</span><br><span class="line">        plt.tick_params(axis=<span class="string">'y'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">6</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><h4 id="个人客户基本信息表-IDV-CUST-BASIC-处理"><a href="#个人客户基本信息表-IDV-CUST-BASIC-处理" class="headerlink" title="个人客户基本信息表(IDV_CUST_BASIC) - 处理"></a>个人客户基本信息表(IDV_CUST_BASIC) - 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除没用的字段</span></span><br><span class="line">train_idv_cust_basic_SAMPLE = train_idv_cust_basic.drop([<span class="string">'DATA_DAT'</span>, <span class="string">'PROV_CD'</span>, <span class="string">'CUST_SEX_CD'</span>, <span class="string">'RES_CD'</span>, <span class="string">'RES_STA_CD'</span>, <span class="string">'NATY_CD'</span>,</span><br><span class="line">       <span class="string">'NATN_CD'</span>, <span class="string">'CULT_DGR_CD'</span>, <span class="string">'DGR_CD'</span>, <span class="string">'PLC_STS_CD'</span>, <span class="string">'PRFN'</span>, <span class="string">'ADMI_POS_CD'</span>,</span><br><span class="line">       <span class="string">'SPEC_TECH_PRFN_QUA_CD'</span>, <span class="string">'TITLE_RANK_CD'</span>, <span class="string">'WORK_TYP_CD'</span>, <span class="string">'GC_BRTH'</span>,</span><br><span class="line">       <span class="string">'UNIT_PROP_CD'</span>, <span class="string">'WORK_YEAR'</span>, <span class="string">'OCP_CD'</span>], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将个人客户基本信息表与结果整合</span></span><br><span class="line">train_idv_cust_basic_SAMPLE = pd.merge(train_idv_cust_basic_SAMPLE, train_cust_result, on=<span class="string">'CUST_NO'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">features = [x <span class="keyword">for</span> x <span class="keyword">in</span> train_idv_cust_basic_SAMPLE.columns <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'CUST_NO'</span>,<span class="string">'FLAG'</span>]]</span><br><span class="line">df0 = train_idv_cust_basic_SAMPLE[train_idv_cust_basic_SAMPLE.FLAG==<span class="number">0</span>]</span><br><span class="line">df1 = train_idv_cust_basic_SAMPLE[train_idv_cust_basic_SAMPLE.FLAG==<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plot_feature_distribution(df0,df1,<span class="string">'0'</span>,<span class="string">'1'</span>,features,<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:454: RuntimeWarning: invalid value encountered in greater  X = X[np.logical_and(X&gt;clip[0], X&lt;clip[1])] # won&apos;t work for two columns./root/anaconda3/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:454: RuntimeWarning: invalid value encountered in less  X = X[np.logical_and(X&gt;clip[0], X&lt;clip[1])] # won&apos;t work for two columns.&lt;matplotlib.figure.Figure at 0x7f0167e93dd8&gt;</code></pre><p><img src="/assets/blogImg/OUTPUT_FEATURE.png" alt="FEATURE"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IDV_CUST_BASIC_PARSE</span><span class="params">(dataset_IDV_CUST_BASIC)</span>:</span></span><br><span class="line">    <span class="comment"># 删除个人用户信息表中无关元素</span></span><br><span class="line">    dataset_IDV_CUST_BASIC = dataset_IDV_CUST_BASIC.drop([<span class="string">'DATA_DAT'</span>, <span class="string">'PROV_CD'</span>, <span class="string">'CUST_SEX_CD'</span>, <span class="string">'RES_CD'</span>, <span class="string">'RES_STA_CD'</span>, <span class="string">'NATY_CD'</span>,</span><br><span class="line">       <span class="string">'NATN_CD'</span>, <span class="string">'CULT_DGR_CD'</span>, <span class="string">'DGR_CD'</span>, <span class="string">'PLC_STS_CD'</span>, <span class="string">'PRFN'</span>, <span class="string">'ADMI_POS_CD'</span>,</span><br><span class="line">       <span class="string">'SPEC_TECH_PRFN_QUA_CD'</span>, <span class="string">'TITLE_RANK_CD'</span>, <span class="string">'WORK_TYP_CD'</span>, <span class="string">'GC_BRTH'</span>,</span><br><span class="line">       <span class="string">'UNIT_PROP_CD'</span>, <span class="string">'WORK_YEAR'</span>, <span class="string">'OCP_CD'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> dataset_IDV_CUST_BASIC</span><br></pre></td></tr></table></figure><h4 id="个人定期存款账户信息（IDV-TD）-处理"><a href="#个人定期存款账户信息（IDV-TD）-处理" class="headerlink" title="个人定期存款账户信息（IDV_TD）- 处理"></a>个人定期存款账户信息（IDV_TD）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据比例</span></span><br><span class="line">stat_df(train_idv_td)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/OUTPUT_CUST_INFO.png" alt="客户表信息情况"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编成函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IDV_TD_PARSE</span><span class="params">(dataset_IDV_TD)</span>:</span></span><br><span class="line">    train_idv_td_3 = dataset_IDV_TD[dataset_IDV_TD[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    <span class="comment"># 简化IDV_TD表</span></span><br><span class="line">    train_idv_td_3 = train_idv_td_3.drop([<span class="string">'DATA_DAT'</span>, <span class="string">'ARG_CRT_DAT'</span>, <span class="string">'DATA_DAT'</span>, <span class="string">'CLS_ACCT_DAT'</span>, <span class="string">'MATU_DAT'</span>, <span class="string">'LAC'</span>, <span class="string">'ACCT_STS_CD'</span>,<span class="string">'DP_DAY_CD'</span>, <span class="string">'RDEP_IND_CD'</span>, <span class="string">'RDEP_DP_DAY_CD'</span>, <span class="string">'RAT_CTG'</span>,<span class="string">'FXDI_SA_ACCM'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 去重</span></span><br><span class="line">    train_idv_td_3.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 将train_idv_td和train_base_excg合并</span></span><br><span class="line">    train_IDV_TD_SAMPLE_3 = pd.merge(train_idv_td_3, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'CRBAL'</span>] = train_IDV_TD_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'CRBAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'REG_CAP'</span>] = train_IDV_TD_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'REG_CAP'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'FXDI_T_ACCM'</span>] = train_IDV_TD_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'FXDI_T_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'TDOP_SHD_PAY_INTS'</span>] = train_IDV_TD_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'MOTH_CR_ACCM'</span>] = train_IDV_TD_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_TD_SAMPLE_3[<span class="string">'IDV_TD_SUM'</span>] = train_IDV_TD_SAMPLE_3[<span class="string">'TDOP_SHD_PAY_INTS'</span>] +  train_IDV_TD_SAMPLE_3[<span class="string">'REG_CAP'</span>]</span><br><span class="line">    <span class="comment"># 再次精简表</span></span><br><span class="line">    train_IDV_TD_SAMPLE_3 = train_IDV_TD_SAMPLE_3.drop([<span class="string">'CCY_CD'</span>, <span class="string">'RMB_MID_PRIC'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 数据去重</span></span><br><span class="line">    train_IDV_TD_SAMPLE_3.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 将个人账户里的数据合并即金额加起来</span></span><br><span class="line">    train_IDV_TD_SAMPLE_SUM_3 = train_IDV_TD_SAMPLE_3[[<span class="string">'CUST_NO'</span>, <span class="string">'CRBAL'</span>, <span class="string">'REG_CAP'</span>, <span class="string">'FXDI_T_ACCM'</span>, <span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'IDV_TD_SUM'</span>]].groupby(<span class="string">'CUST_NO'</span>).sum().reset_index()</span><br><span class="line">    <span class="comment"># 区分字段</span></span><br><span class="line">    train_IDV_TD_SAMPLE_SUM_3 = train_IDV_TD_SAMPLE_SUM_3.rename(columns=&#123;<span class="string">'CRBAL'</span>:<span class="string">'IDV_TD_CRBAL'</span>, <span class="string">'MOTH_CR_ACCM'</span>:<span class="string">'IDV_TD_MOTH_CR_ACCM'</span>&#125;)</span><br><span class="line">    <span class="comment"># @ 去除过分关联的特征</span></span><br><span class="line">    train_IDV_TD_SAMPLE_SUM_3 = train_IDV_TD_SAMPLE_SUM_3.drop([<span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'REG_CAP'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 返回第三个时间段的数据</span></span><br><span class="line">    <span class="keyword">return</span> train_IDV_TD_SAMPLE_SUM_3</span><br></pre></td></tr></table></figure><h4 id="个人活期存款账户信息（IDV-DPSA）-处理"><a href="#个人活期存款账户信息（IDV-DPSA）-处理" class="headerlink" title="个人活期存款账户信息（IDV_DPSA）-  处理"></a>个人活期存款账户信息（IDV_DPSA）-  处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编成函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IDV_DPSA_PARSE</span><span class="params">(dataset_IDV_DPSA)</span>:</span></span><br><span class="line">    <span class="comment"># 划分三张表</span></span><br><span class="line">    train_idv_dpsa_1 = dataset_IDV_DPSA[dataset_IDV_DPSA[<span class="string">'DATA_DAT'</span>]==<span class="number">3728764800</span>].reset_index()</span><br><span class="line">    train_idv_dpsa_2 = dataset_IDV_DPSA[dataset_IDV_DPSA[<span class="string">'DATA_DAT'</span>]==<span class="number">3731443200</span>].reset_index()</span><br><span class="line">    train_idv_dpsa_3 = dataset_IDV_DPSA[dataset_IDV_DPSA[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>].reset_index()</span><br><span class="line">    <span class="comment"># 精简字段</span></span><br><span class="line">    train_idv_dpsa_3 = train_idv_dpsa_3.drop([<span class="string">'DATA_DAT'</span>, <span class="string">'ARG_CRT_DAT'</span>, <span class="string">'CLS_ACCT_DAT'</span>, <span class="string">'MATU_DAT'</span>, <span class="string">'LAC'</span>, <span class="string">'ACCT_STS_CD'</span>, <span class="string">'RAT_CTG'</span>, <span class="string">'CUST_RANK_CD'</span>, <span class="string">'DAY_TFO_SUM'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将IDV_DPSA表与汇率表整合</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3 = pd.merge(train_idv_dpsa_3, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line">    <span class="comment"># 去重</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'FRZ_TOT_AMT'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'FRZ_TOT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'DAY_WD_ACT_AMT'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_WD_ACT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'DAY_CSH_DP_SUM'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_CSH_DP_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'DAY_CSH_WD_SUM'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_CSH_WD_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'DAY_TFI_SUM'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_TFI_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'MOTH_CR_ACCM'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_IDV_DPSA_SAMPLE_3[<span class="string">'BEG_MOTH_CRBAL'</span>] = train_IDV_DPSA_SAMPLE_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'BEG_MOTH_CRBAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    <span class="comment"># 再次精简表</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3 = train_IDV_DPSA_SAMPLE_3.drop([<span class="string">'CCY_CD'</span>, <span class="string">'RMB_MID_PRIC'</span>, <span class="string">'index'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 避免重复字段</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3 = train_IDV_DPSA_SAMPLE_3.rename(columns=&#123;<span class="string">'CRBAL'</span>:<span class="string">'IDV_DPSA_CRBAL'</span>, <span class="string">'MOTH_CR_ACCM'</span>:<span class="string">'IDV_DPSA_MOTH_CR_ACCM'</span>&#125;)</span><br><span class="line">    <span class="comment"># 按 CUST_NO 求和</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3 = train_IDV_DPSA_SAMPLE_3[[<span class="string">'CUST_NO'</span>, <span class="string">'IDV_DPSA_CRBAL'</span>, <span class="string">'ITST_BRNG_ACCM'</span>, <span class="string">'FRZ_TOT_AMT'</span>, <span class="string">'DAY_WD_ACT_AMT'</span>, <span class="string">'DAY_CSH_DP_SUM'</span>,</span><br><span class="line">                                                 <span class="string">'DAY_CSH_WD_SUM'</span>, <span class="string">'DAY_TFI_SUM'</span>, <span class="string">'IDV_DPSA_MOTH_CR_ACCM'</span>, <span class="string">'BEG_MOTH_CRBAL'</span>]].groupby(<span class="string">'CUST_NO'</span>).sum().reset_index()</span><br><span class="line">    <span class="comment"># @ 去除过分关联的特征</span></span><br><span class="line">    train_IDV_DPSA_SAMPLE_3 = train_IDV_DPSA_SAMPLE_3.drop([<span class="string">'BEG_MOTH_CRBAL'</span>, <span class="string">'IDV_DPSA_MOTH_CR_ACCM'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回第三个时间段的数据</span></span><br><span class="line">    <span class="keyword">return</span> train_IDV_DPSA_SAMPLE_3</span><br></pre></td></tr></table></figure><h4 id="交易信息（TR-DC）-处理"><a href="#交易信息（TR-DC）-处理" class="headerlink" title="交易信息（TR_DC） - 处理"></a>交易信息（TR_DC） - 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_tr_dc_TR_TYPE = train_tr_dc.groupby([<span class="string">'CUST_NO'</span>,<span class="string">'TR_TYPE'</span>])[<span class="string">'TR_TYPE'</span>].count().unstack().reset_index()</span><br><span class="line">train_tr_dc_TR_TYPE[<span class="string">'TR_TYPE_TIMES'</span>] = train_tr_dc_TR_TYPE.drop(<span class="string">'CUST_NO'</span>,axis=<span class="number">1</span>).sum(axis=<span class="number">1</span>)</span><br><span class="line">train_tr_dc_BOE = train_tr_dc_TR_TYPE[[<span class="string">'CUST_NO'</span>,<span class="string">'TR_TYPE_TIMES'</span>,<span class="string">'EBMKO5RA'</span>]]</span><br><span class="line">train_tr_dc_BOE.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'TR_TYPE_TIMES'</span>,<span class="string">'EBMKO5RA'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_tr_dc_BOE.head()</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/OUTPUT_BOEING.png" alt="BOEING"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TR_DC_PARSE</span><span class="params">(dataset_TR_DC)</span>:</span></span><br><span class="line">    <span class="comment"># 去除抹帐(1),无意义列- RED_BLU_CD，这里全是0</span></span><br><span class="line">    dataset_TR_DC = dataset_TR_DC[dataset_TR_DC[<span class="string">'CAN_IND'</span>]==<span class="number">0</span>].drop([<span class="string">'RED_BLU_CD'</span>],axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将交易按照 正 / 负 分开</span></span><br><span class="line">    dataset_TR_DC[<span class="string">'INCOME'</span>] = dataset_TR_DC[<span class="string">'TR_AMT'</span>] &gt; <span class="number">0</span></span><br><span class="line">    myseries = dataset_TR_DC.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'INCOME'</span>])[<span class="string">'TR_AMT'</span>].sum()</span><br><span class="line">    myseries = myseries.unstack()</span><br><span class="line">    TR_DC_IN_OUT = pd.DataFrame(myseries).reset_index()</span><br><span class="line">    TR_DC_IN_OUT[<span class="string">'IN_SUM'</span>] = TR_DC_IN_OUT[<span class="keyword">True</span>]</span><br><span class="line">    TR_DC_IN_OUT[<span class="string">'OUT_SUM'</span>] = TR_DC_IN_OUT[<span class="keyword">False</span>]</span><br><span class="line">    TR_DC_IN_OUT = TR_DC_IN_OUT.drop([<span class="keyword">True</span>, <span class="keyword">False</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 根据BOE交易代码划分 仅使用 EBMKO5RA</span></span><br><span class="line">    train_tr_dc_TR_TYPE = dataset_TR_DC.groupby([<span class="string">'CUST_NO'</span>,<span class="string">'TR_TYPE'</span>])[<span class="string">'TR_TYPE'</span>].count().unstack().reset_index()</span><br><span class="line">    train_tr_dc_TR_TYPE[<span class="string">'TR_TYPE_TIMES'</span>] = train_tr_dc_TR_TYPE.drop(<span class="string">'CUST_NO'</span>,axis=<span class="number">1</span>).sum(axis=<span class="number">1</span>)</span><br><span class="line">    train_tr_dc_BOE = train_tr_dc_TR_TYPE[[<span class="string">'CUST_NO'</span>,<span class="string">'TR_TYPE_TIMES'</span>,<span class="string">'EBMKO5RA'</span>]]</span><br><span class="line">    train_tr_dc_BOE.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'TR_TYPE_TIMES'</span>,<span class="string">'EBMKO5RA'</span>]</span><br><span class="line">    <span class="comment"># 根据SVRTO交易码划分 使用SVRTO061和SVRTO161</span></span><br><span class="line">    train_tr_dc_SVRTO061 = train_tr_dc_TR_TYPE[[<span class="string">'CUST_NO'</span>,<span class="string">'SVRTO061'</span>]]</span><br><span class="line">    train_tr_dc_SVRTO161 = train_tr_dc_TR_TYPE[[<span class="string">'CUST_NO'</span>,<span class="string">'SVRTO161'</span>]]</span><br><span class="line">    train_tr_dc_SVRTO061.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'SVRTO061'</span>]</span><br><span class="line">    train_tr_dc_SVRTO161.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'SVRTO161'</span>]</span><br><span class="line">    <span class="comment"># 计算每笔交易金额的均值</span></span><br><span class="line">    TR_DC_IN_MEAN = dataset_TR_DC[dataset_TR_DC[<span class="string">'TR_AMT'</span>]&gt;<span class="number">0</span>][[<span class="string">'CUST_NO'</span>, <span class="string">'TR_AMT'</span>]].groupby(<span class="string">'CUST_NO'</span>).mean().reset_index()</span><br><span class="line">    TR_DC_IN_MEAN.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'TR_DC_IN_MEAN'</span>]</span><br><span class="line">    TR_DC_OUT_MEAN = dataset_TR_DC[dataset_TR_DC[<span class="string">'TR_AMT'</span>]&lt;<span class="number">0</span>][[<span class="string">'CUST_NO'</span>, <span class="string">'TR_AMT'</span>]].groupby(<span class="string">'CUST_NO'</span>).mean().reset_index()</span><br><span class="line">    TR_DC_OUT_MEAN.columns = [<span class="string">'CUST_NO'</span>, <span class="string">'TR_DC_OUT_MEAN'</span>]</span><br><span class="line">    <span class="comment"># 合并各个特征 36041</span></span><br><span class="line">    <span class="comment"># train_TR_DC_SAMPLE = pd.merge(TR_DC_IN_OUT, train_tr_dc_BOE, on='CUST_NO', how='outer')</span></span><br><span class="line">    train_TR_DC_SAMPLE = pd.merge(TR_DC_IN_OUT, TR_DC_IN_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    train_TR_DC_SAMPLE = pd.merge(train_TR_DC_SAMPLE, TR_DC_OUT_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    <span class="comment"># train_TR_DC_SAMPLE = pd.merge(train_TR_DC_SAMPLE, train_tr_dc_SVRTO061, on='CUST_NO', how='outer')</span></span><br><span class="line">    <span class="comment"># train_TR_DC_SAMPLE = pd.merge(train_TR_DC_SAMPLE, train_tr_dc_SVRTO161, on='CUST_NO', how='outer')</span></span><br><span class="line">    <span class="keyword">return</span> train_TR_DC_SAMPLE</span><br></pre></td></tr></table></figure><h4 id="第三方存管账户信息（THR-PTY-CSTD）-处理"><a href="#第三方存管账户信息（THR-PTY-CSTD）-处理" class="headerlink" title="第三方存管账户信息（THR_PTY_CSTD） - 处理"></a>第三方存管账户信息（THR_PTY_CSTD） - 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提前删掉无用字段</span></span><br><span class="line">train_thr_pty_cstd_temple = train_thr_pty_cstd.drop([<span class="string">'CCY_CD'</span>, <span class="string">'CUST_CTG_CD'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 划分三张表</span></span><br><span class="line">train_thr_pty_cstd_1 = train_thr_pty_cstd_temple[train_thr_pty_cstd_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3728764800</span>].reset_index()</span><br><span class="line">train_thr_pty_cstd_2 = train_thr_pty_cstd_temple[train_thr_pty_cstd_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3731443200</span>].reset_index()</span><br><span class="line">train_thr_pty_cstd_3 = train_thr_pty_cstd_temple[train_thr_pty_cstd_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>].reset_index()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理没用字段</span></span><br><span class="line">train_thr_pty_cstd_3 = train_thr_pty_cstd_3.drop([<span class="string">'index'</span>, <span class="string">'DATA_DAT'</span>], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 对字段进行处理</span></span><br><span class="line">ARG_BAL = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'ARG_BAL'</span>].sum().reset_index()</span><br><span class="line">AVL_BAL = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'AVL_BAL'</span>].sum().reset_index()</span><br><span class="line">MTH_ARG_BAL_ACCM = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_ARG_BAL_ACCM'</span>].sum().reset_index()</span><br><span class="line">MTH_FUD_TF_INWD_AMT = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_FUD_TF_INWD_AMT'</span>].sum().reset_index()</span><br><span class="line">MTH_FUD_TF_OUT_AMT = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_FUD_TF_OUT_AMT'</span>].sum().reset_index()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字段合并</span></span><br><span class="line">train_thr_pty_cstd_SAMPLE = pd.merge(ARG_BAL, AVL_BAL, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_ARG_BAL_ACCM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_FUD_TF_INWD_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_FUD_TF_OUT_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @ 去除过分关联的特征</span></span><br><span class="line">train_thr_pty_cstd_SAMPLE = train_thr_pty_cstd_SAMPLE.drop([<span class="string">'ARG_BAL'</span>, <span class="string">'MTH_ARG_BAL_ACCM'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">THR_PTY_CSTD_PARSE</span><span class="params">(dataset_THR_PTY_CSTD)</span>:</span></span><br><span class="line">    <span class="comment"># 提前删掉无用字段</span></span><br><span class="line">    dataset_THR_PTY_CSTD = dataset_THR_PTY_CSTD.drop([<span class="string">'CCY_CD'</span>, <span class="string">'CUST_CTG_CD'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 划分三张表</span></span><br><span class="line">    train_thr_pty_cstd_1 = dataset_THR_PTY_CSTD[dataset_THR_PTY_CSTD[<span class="string">'DATA_DAT'</span>]==<span class="number">3728764800</span>].reset_index()</span><br><span class="line">    train_thr_pty_cstd_2 = dataset_THR_PTY_CSTD[dataset_THR_PTY_CSTD[<span class="string">'DATA_DAT'</span>]==<span class="number">3731443200</span>].reset_index()</span><br><span class="line">    train_thr_pty_cstd_3 = dataset_THR_PTY_CSTD[dataset_THR_PTY_CSTD[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>].reset_index()</span><br><span class="line">    <span class="comment"># 清理没用字段</span></span><br><span class="line">    train_thr_pty_cstd_3 = train_thr_pty_cstd_3.drop([<span class="string">'index'</span>, <span class="string">'DATA_DAT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 对字段进行处理</span></span><br><span class="line">    ARG_BAL = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'ARG_BAL'</span>].sum().reset_index()</span><br><span class="line">    AVL_BAL = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'AVL_BAL'</span>].sum().reset_index()</span><br><span class="line">    MTH_ARG_BAL_ACCM = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_ARG_BAL_ACCM'</span>].sum().reset_index()</span><br><span class="line">    MTH_FUD_TF_INWD_AMT = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_FUD_TF_INWD_AMT'</span>].sum().reset_index()</span><br><span class="line">    MTH_FUD_TF_OUT_AMT = train_thr_pty_cstd_3.groupby([<span class="string">'CUST_NO'</span>])[<span class="string">'MTH_FUD_TF_OUT_AMT'</span>].sum().reset_index()</span><br><span class="line">    <span class="comment"># 将字段合并</span></span><br><span class="line">    train_thr_pty_cstd_SAMPLE = pd.merge(AVL_BAL, ARG_BAL, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_ARG_BAL_ACCM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_FUD_TF_INWD_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    train_thr_pty_cstd_SAMPLE = pd.merge(train_thr_pty_cstd_SAMPLE, MTH_FUD_TF_OUT_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    <span class="comment"># @ 去除过分关联的特征</span></span><br><span class="line">    train_thr_pty_cstd_SAMPLE = train_thr_pty_cstd_SAMPLE.drop([<span class="string">'ARG_BAL'</span>, <span class="string">'MTH_ARG_BAL_ACCM'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> train_thr_pty_cstd_SAMPLE</span><br></pre></td></tr></table></figure><h4 id="贷款账户信息（LOAN）-处理"><a href="#贷款账户信息（LOAN）-处理" class="headerlink" title="贷款账户信息（LOAN）- 处理"></a>贷款账户信息（LOAN）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择有用字段</span></span><br><span class="line">train_loan_temple = train_loan[[<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>, <span class="string">'ARG_TYP_CD'</span>, <span class="string">'CCY_CD'</span>, <span class="string">'ARG_LIF_CYC_STA_CD'</span>, <span class="string">'LN_STS_CD'</span>, <span class="string">'CHANL_CD'</span>, <span class="string">'LN_TERM'</span>, <span class="string">'RPAY_MOD_CD'</span>, <span class="string">'LAC'</span>, <span class="string">'NON_MATU_CAP'</span>, <span class="string">'ACD_NML_INTS'</span>, <span class="string">'INTS_TOT_AMT'</span></span><br><span class="line">                        , <span class="string">'BUS_BREED_CD'</span>, <span class="string">'NML_CAP_BAL'</span>, <span class="string">'MTH_NML_CAP_ACCM'</span>]]</span><br><span class="line">train_loan_temple =  pd.merge(train_loan_temple, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line"><span class="comment"># 划分三张表</span></span><br><span class="line">train_loan_1 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3728764800</span>]</span><br><span class="line">train_loan_2 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3731443200</span>]</span><br><span class="line">train_loan_3 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_loan_3 = train_loan_3.drop([<span class="string">'DATA_DAT'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_loan_3.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行汇率计算函数</span></span><br><span class="line">train_loan_3[<span class="string">'ACD_NML_INTS'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'ACD_NML_INTS'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">train_loan_3[<span class="string">'NON_MATU_CAP'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'NON_MATU_CAP'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">train_loan_3[<span class="string">'NML_CAP_BAL'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'NML_CAP_BAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">train_loan_3[<span class="string">'INTS_TOT_AMT'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'INTS_TOT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">train_loan_3[<span class="string">'MTH_NML_CAP_ACCM'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MTH_NML_CAP_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平均应计正常利息</span></span><br><span class="line">MEAN_ACD_NML_INTS = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ACD_NML_INTS'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line"><span class="comment"># 平均应计未到期本金</span></span><br><span class="line">MEAN_NON_MATU_CAP = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'NON_MATU_CAP'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line"><span class="comment"># 平均月内正常本金基数</span></span><br><span class="line">MEAN_MTH_NML_CAP_ACCM = train_loan_3[[<span class="string">'CUST_NO'</span>,<span class="string">'MTH_NML_CAP_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line"><span class="comment"># 平均贷款期限</span></span><br><span class="line">MEAN_LOAN_TERM = train_loan_3[[<span class="string">'CUST_NO'</span>,<span class="string">'LN_TERM'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line"><span class="comment"># 平均贷款金额</span></span><br><span class="line">MEAN_NML_CAP_BAL = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'NML_CAP_BAL'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line"><span class="comment"># 平均利息总额</span></span><br><span class="line">MEAN_INTS_TOT_AMT = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'INTS_TOT_AMT'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_loan_3_SAMPLE = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(MEAN_ACD_NML_INTS, MEAN_NON_MATU_CAP, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_MTH_NML_CAP_ACCM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_LOAN_TERM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>),</span><br><span class="line">                              MEAN_NML_CAP_BAL, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_INTS_TOT_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_LOAN_METHOD</span><span class="params">(dataset_LOAN)</span>:</span></span><br><span class="line">    <span class="comment"># 选择有用字段</span></span><br><span class="line">    train_loan_temple = dataset_LOAN[[<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>, <span class="string">'ARG_TYP_CD'</span>, <span class="string">'CCY_CD'</span>, <span class="string">'ARG_LIF_CYC_STA_CD'</span>, <span class="string">'LN_STS_CD'</span>, <span class="string">'CHANL_CD'</span>, <span class="string">'LN_TERM'</span>, <span class="string">'RPAY_MOD_CD'</span>, <span class="string">'LAC'</span>, <span class="string">'NON_MATU_CAP'</span>, <span class="string">'ACD_NML_INTS'</span>, <span class="string">'INTS_TOT_AMT'</span> , <span class="string">'BUS_BREED_CD'</span>, <span class="string">'NML_CAP_BAL'</span>, <span class="string">'MTH_NML_CAP_ACCM'</span>]]</span><br><span class="line">    train_loan_temple =  pd.merge(train_loan_temple, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line">    <span class="comment"># 划分三张表</span></span><br><span class="line">    train_loan_1 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3728764800</span>]</span><br><span class="line">    train_loan_2 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3731443200</span>]</span><br><span class="line">    train_loan_3 = train_loan_temple[train_loan_temple[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_loan_3 = train_loan_3.drop([<span class="string">'DATA_DAT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    train_loan_3.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_loan_3[<span class="string">'ACD_NML_INTS'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'ACD_NML_INTS'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_loan_3[<span class="string">'NON_MATU_CAP'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'NON_MATU_CAP'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_loan_3[<span class="string">'NML_CAP_BAL'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'NML_CAP_BAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_loan_3[<span class="string">'INTS_TOT_AMT'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'INTS_TOT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_loan_3[<span class="string">'MTH_NML_CAP_ACCM'</span>] = train_loan_3.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MTH_NML_CAP_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    <span class="comment"># 平均应计正常利息</span></span><br><span class="line">    MEAN_ACD_NML_INTS = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ACD_NML_INTS'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    <span class="comment"># 平均应计未到期本金</span></span><br><span class="line">    MEAN_NON_MATU_CAP = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'NON_MATU_CAP'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    <span class="comment"># 平均月内正常本金基数</span></span><br><span class="line">    MEAN_MTH_NML_CAP_ACCM = train_loan_3[[<span class="string">'CUST_NO'</span>,<span class="string">'MTH_NML_CAP_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    <span class="comment"># 平均贷款期限</span></span><br><span class="line">    MEAN_LOAN_TERM = train_loan_3[[<span class="string">'CUST_NO'</span>,<span class="string">'LN_TERM'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    <span class="comment"># 平均贷款金额</span></span><br><span class="line">    MEAN_NML_CAP_BAL = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'NML_CAP_BAL'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    <span class="comment"># 平均利息总额</span></span><br><span class="line">    MEAN_INTS_TOT_AMT = train_loan_3[[<span class="string">'CUST_NO'</span>, <span class="string">'INTS_TOT_AMT'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    train_loan_3_SAMPLE = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(MEAN_ACD_NML_INTS, MEAN_NON_MATU_CAP, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_MTH_NML_CAP_ACCM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_LOAN_TERM, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>),</span><br><span class="line">                              MEAN_NML_CAP_BAL, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MEAN_INTS_TOT_AMT, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> train_loan_3_SAMPLE</span><br></pre></td></tr></table></figure><h4 id="基金账户信息（FUND）-处理"><a href="#基金账户信息（FUND）-处理" class="headerlink" title="基金账户信息（FUND）- 处理"></a>基金账户信息（FUND）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_FUND_METHOD</span><span class="params">(dataset_FOUND)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    train_fund_temple = dataset_FOUND.drop([<span class="string">'CCY_CD'</span>, <span class="string">'ARG_CRT_DAT'</span>, <span class="string">'ARG_LIF_CYC_STA_CD'</span>, <span class="string">'CHANL_CD'</span>, <span class="string">'VLU_DAT'</span>, <span class="string">'DATE_MATU'</span>, <span class="string">'CLS_ACCT_DAT'</span>, <span class="string">'LAST_ACT_CHNG_DAT'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 按月将金额分组</span></span><br><span class="line">    BY_MONTH_FUND_TABLE = train_fund_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'FUD_UNIT_NET_VAL'</span>, <span class="string">'FUD_PROD_TYP_CD'</span>, <span class="string">'RSK_RANK_CD'</span>, <span class="string">'SHR'</span>,</span><br><span class="line">           <span class="string">'MOTH_BAL_ACCM'</span>, <span class="string">'FUND_BAL'</span>, <span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_FUND</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_fund_temple_STD = BY_MONTH_FUND_TABLE[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_fund_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'FUND_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_fund_temple_MEAN = BY_MONTH_FUND_TABLE[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_fund_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'FUND_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_fund_temple_MAX = BY_MONTH_FUND_TABLE[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_fund_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'FUND_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_fund_temple_MIN = BY_MONTH_FUND_TABLE[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_fund_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'FUND_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_fund_temple = pd.merge(train_fund_temple_STD, train_fund_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_fund_temple = pd.merge(train_fund_temple, train_fund_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_fund_temple = pd.merge(train_fund_temple, train_fund_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        <span class="keyword">return</span> train_fund_temple</span><br><span class="line">    train_fund_temple = BY_MONTH_FUND(<span class="string">'RSK_RANK_CD'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'FUD_UNIT_NET_VAL'</span>, <span class="string">'FUD_PROD_TYP_CD'</span>, <span class="string">'SHR'</span>, <span class="string">'MOTH_BAL_ACCM'</span>, <span class="string">'FUND_BAL'</span>, <span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>]:</span><br><span class="line">        train_fund_temple = pd.merge(train_fund_temple, BY_MONTH_FUND(key))</span><br><span class="line">        train_fund_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 定申定赎 开通标识</span></span><br><span class="line">    SUM_FUND_RATN_APLY_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_APLY_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).sum().reset_index()</span><br><span class="line">    STD_FUND_RATN_APLY_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_APLY_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).std().reset_index()</span><br><span class="line">    MEAN_FUND_RATN_APLY_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_APLY_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    MAX_FUND_RATN_APLY_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_APLY_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).max().reset_index()</span><br><span class="line">    MIN_FUND_RATN_APLY_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_APLY_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).min().reset_index()</span><br><span class="line"></span><br><span class="line">    SUM_FUND_RATN_REDM_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_REDM_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).sum().reset_index()</span><br><span class="line">    STD_FUND_RATN_REDM_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_REDM_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).std().reset_index()</span><br><span class="line">    MEAN_FUND_RATN_REDM_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_REDM_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).mean().reset_index()</span><br><span class="line">    MAX_FUND_RATN_REDM_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_REDM_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).max().reset_index()</span><br><span class="line">    MIN_FUND_RATN_REDM_OPN_IND = dataset_FOUND[[<span class="string">'CUST_NO'</span>, <span class="string">'RATN_REDM_OPN_IND'</span>]].groupby([<span class="string">'CUST_NO'</span>]).min().reset_index()</span><br><span class="line">    train_fund_temple = pd.merge(pd.merge(train_fund_temple, STD_FUND_RATN_APLY_OPN_IND, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), MIN_FUND_RATN_REDM_OPN_IND, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">    <span class="keyword">return</span> train_fund_temple</span><br></pre></td></tr></table></figure><h4 id="国债账户信息（BOND）-处理"><a href="#国债账户信息（BOND）-处理" class="headerlink" title="国债账户信息（BOND）- 处理"></a>国债账户信息（BOND）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_BOND_METHOD</span><span class="params">(dataset_BOND)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    train_bond_temple = dataset_BOND.drop([<span class="string">'CCY_CD'</span>, <span class="string">'ARG_CRT_DAT'</span>, <span class="string">'MATU_DAT'</span>, <span class="string">'MATU_DAT'</span>, <span class="string">'PROD_CLS_CD'</span>, <span class="string">'CERT_DAT'</span>, <span class="string">'CLS_ACCT_DAT'</span>, <span class="string">'ARG_LIF_CYC_STA_CD'</span>, <span class="string">'NTNL_DEBT_INTS_TYP_CD'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 按月将金额分组</span></span><br><span class="line">    BY_MONTH_BOND_TABLE = train_bond_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'BOND_TERM_CD'</span>, <span class="string">'ARG_CUR_BAL'</span>, <span class="string">'HOD_SHR'</span>,</span><br><span class="line">       <span class="string">'UNIT_NET_VAL'</span>, <span class="string">'NVTA_MOTH_ACCM'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">BY_MONTH_BOND</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_bond_temple_STD = BY_MONTH_BOND_TABLE[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_bond_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'BOND_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_bond_temple_MEAN = BY_MONTH_BOND_TABLE[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_bond_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'BOND_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_bond_temple_MAX = BY_MONTH_BOND_TABLE[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_bond_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'BOND_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_bond_temple_MIN = BY_MONTH_BOND_TABLE[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_bond_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'BOND_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_bond_temple = pd.merge(train_bond_temple_STD, train_bond_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_bond_temple = pd.merge(train_bond_temple, train_bond_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_bond_temple = pd.merge(train_bond_temple, train_bond_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        <span class="keyword">return</span> train_bond_temple</span><br><span class="line">    train_bond_temple = BY_MONTH_BOND(<span class="string">'BOND_TERM_CD'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'ARG_CUR_BAL'</span>, <span class="string">'HOD_SHR'</span>, <span class="string">'UNIT_NET_VAL'</span>, <span class="string">'NVTA_MOTH_ACCM'</span>]:</span><br><span class="line">        train_bond_temple = pd.merge(train_bond_temple, BY_MONTH_BOND(key))</span><br><span class="line">        train_bond_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> train_bond_temple</span><br></pre></td></tr></table></figure><h4 id="贵金属账户信息（PREC-METAL）-处理"><a href="#贵金属账户信息（PREC-METAL）-处理" class="headerlink" title="贵金属账户信息（PREC_METAL）- 处理"></a>贵金属账户信息（PREC_METAL）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_PREC_METAL_METHOD</span><span class="params">(dataset_PREC_METAL)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    train_prec_metal_temple = dataset_PREC_METAL.drop([<span class="string">'PREC_METAL_BREED_CD'</span>, <span class="string">'ARG_STS_CD'</span>, <span class="string">'SIGD_DAT'</span>, <span class="string">'SIGD_CHANL_CD'</span>, <span class="string">'TEMN_DAT'</span>, <span class="string">'TEMN_CHANL_CD'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将train_prec_metal和train_base_excg合并</span></span><br><span class="line">    train_prec_metal_temple = pd.merge(train_prec_metal_temple, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_prec_metal_temple[<span class="string">'ARG_BAL'</span>] = train_prec_metal_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'ARG_BAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    <span class="comment"># 按月将金额分组</span></span><br><span class="line">    BY_MONTH_PREC_METAL_TABLE = train_prec_metal_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'BUS_CTG_CD'</span>, <span class="string">'CNT'</span>, <span class="string">'ARG_BAL'</span>,</span><br><span class="line">       <span class="string">'MTH_ARG_ACCM'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">BY_MONTH_PREC_METAL</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_prec_metal_temple_STD = BY_MONTH_PREC_METAL_TABLE[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_prec_metal_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'PREC_METAL_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_prec_metal_temple_MEAN = BY_MONTH_PREC_METAL_TABLE[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_prec_metal_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'PREC_METAL_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_prec_metal_temple_MAX = BY_MONTH_PREC_METAL_TABLE[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_prec_metal_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'PREC_METAL_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_prec_metal_temple_MIN = BY_MONTH_PREC_METAL_TABLE[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_prec_metal_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'PREC_METAL_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_prec_metal_temple = pd.merge(train_prec_metal_temple_STD, train_prec_metal_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_prec_metal_temple = pd.merge(train_prec_metal_temple, train_prec_metal_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_prec_metal_temple = pd.merge(train_prec_metal_temple, train_prec_metal_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        <span class="keyword">return</span> train_prec_metal_temple</span><br><span class="line">    train_prec_metal_temple = BY_MONTH_PREC_METAL(<span class="string">'BUS_CTG_CD'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'CNT'</span>, <span class="string">'ARG_BAL'</span>, <span class="string">'MTH_ARG_ACCM'</span>]:</span><br><span class="line">        train_prec_metal_temple = pd.merge(train_prec_metal_temple, BY_MONTH_PREC_METAL(key))</span><br><span class="line">        train_prec_metal_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> train_prec_metal_temple</span><br></pre></td></tr></table></figure><h4 id="代理保险账户信息（AGET-INSR）-处理"><a href="#代理保险账户信息（AGET-INSR）-处理" class="headerlink" title="代理保险账户信息（AGET_INSR）- 处理"></a>代理保险账户信息（AGET_INSR）- 处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_AGET_INSR_METHOD</span><span class="params">(dataset_AGET_INSR)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    train_aget_insr_temple = dataset_AGET_INSR[[<span class="string">'DATA_DAT'</span>, <span class="string">'CUST_NO'</span>, <span class="string">'PREM'</span>, <span class="string">'CVAG'</span>, <span class="string">'INSE_CNT'</span>, <span class="string">'MTH_PREM_ACCM'</span>, <span class="string">'BEG_MTH_PREM_BAL'</span>]]</span><br><span class="line">    <span class="comment"># 按月将金额分组</span></span><br><span class="line">    BY_MONTH_AGET_INSR_TABLE = train_aget_insr_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'PREM'</span>, <span class="string">'CVAG'</span>, <span class="string">'INSE_CNT'</span>, <span class="string">'MTH_PREM_ACCM'</span>, <span class="string">'BEG_MTH_PREM_BAL'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_AGET_INSR</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_aget_insr_temple_STD = BY_MONTH_AGET_INSR_TABLE[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_aget_insr_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'AGET_INSR_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_aget_insr_temple_MEAN = BY_MONTH_AGET_INSR_TABLE[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_aget_insr_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'AGET_INSR_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_aget_insr_temple_MAX = BY_MONTH_AGET_INSR_TABLE[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_aget_insr_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'AGET_INSR_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_aget_insr_temple_MIN = BY_MONTH_AGET_INSR_TABLE[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_aget_insr_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'AGET_INSR_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_aget_insr_temple = pd.merge(train_aget_insr_temple_STD, train_aget_insr_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_aget_insr_temple = pd.merge(train_aget_insr_temple, train_aget_insr_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_aget_insr_temple = pd.merge(train_aget_insr_temple, train_aget_insr_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        <span class="keyword">return</span> train_aget_insr_temple</span><br><span class="line">    train_aget_insr_temple = BY_MONTH_AGET_INSR(<span class="string">'PREM'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'CVAG'</span>, <span class="string">'INSE_CNT'</span>, <span class="string">'MTH_PREM_ACCM'</span>, <span class="string">'BEG_MTH_PREM_BAL'</span>]:</span><br><span class="line">        train_aget_insr_temple = pd.merge(train_aget_insr_temple, BY_MONTH_AGET_INSR(key))</span><br><span class="line">        train_aget_insr_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_aget_insr_temple</span><br></pre></td></tr></table></figure><h3 id="表间融合"><a href="#表间融合" class="headerlink" title="表间融合"></a>表间融合</h3><h4 id="TRAIN集"><a href="#TRAIN集" class="headerlink" title="TRAIN集"></a>TRAIN集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train 集 38256</span></span><br><span class="line">dataset_train = pd.merge(IDV_CUST_BASIC_PARSE(CALC_AGE(train_idv_cust_basic)), IDV_TD_PARSE(train_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, IDV_DPSA_PARSE(train_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, TR_DC_PARSE(train_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_IDV_TD_METHOD(train_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_IDV_DPSA_METHOD(train_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_TR_DC_METHOD(train_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, THR_PTY_CSTD_PARSE(train_thr_pty_cstd), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_LOAN_METHOD(train_loan), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_FUND_METHOD(train_fund), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_BOND_METHOD(train_bond), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_PREC_METAL_METHOD(train_prec_metal), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, BY_MONTH_AGET_INSR_METHOD(train_aget_insr), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(dataset_train, AUM_NUMS(train_idv_td, train_bond, train_fund, train_prec_metal, train_aget_insr, train_idv_cust_basic), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_train = pd.merge(WEALTH(train_cust_result,train_idv_td,train_bond,train_fund,train_prec_metal,train_aget_insr,train_thr_pty_cstd), dataset_train, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/pandas/core/reshape/merge.py:558: UserWarning: merging between different levels can give an unintended result (1 levels on the left, 2 on the right)  warnings.warn(msg, UserWarning)/root/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py:2530: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance.  obj = obj._drop_axis(labels, axis, level=level, errors=errors)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将个人客户基本信息表与结果整合</span></span><br><span class="line">dataset_train = pd.merge(dataset_train, train_cust_result, on=<span class="string">'CUST_NO'</span>)</span><br></pre></td></tr></table></figure><h4 id="TRAIN-剪枝"><a href="#TRAIN-剪枝" class="headerlink" title="TRAIN 剪枝"></a>TRAIN 剪枝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除无用字段</span></span><br><span class="line">dataset_train = dataset_train.drop([<span class="string">'CUST_NO'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="A集"><a href="#A集" class="headerlink" title="A集"></a>A集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A 集 4782</span></span><br><span class="line">dataset_A = pd.merge(IDV_CUST_BASIC_PARSE(CALC_AGE(A_idv_cust_basic)), IDV_TD_PARSE(A_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, IDV_DPSA_PARSE(A_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, TR_DC_PARSE(A_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_IDV_TD_METHOD(A_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_IDV_DPSA_METHOD(A_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_TR_DC_METHOD(A_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, THR_PTY_CSTD_PARSE(A_thr_pty_cstd), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_LOAN_METHOD(A_loan), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_FUND_METHOD(A_fund), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_BOND_METHOD(A_bond), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_PREC_METAL_METHOD(A_prec_metal), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, BY_MONTH_AGET_INSR_METHOD(A_aget_insr), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(dataset_A, AUM_NUMS(A_idv_td, A_bond, A_fund, A_prec_metal, A_aget_insr, A_idv_cust_basic), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_A = pd.merge(WEALTH(A_customid,A_idv_td,A_bond,A_fund,A_prec_metal,A_aget_insr,A_thr_pty_cstd), dataset_A, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/pandas/core/reshape/merge.py:558: UserWarning: merging between different levels can give an unintended result (1 levels on the left, 2 on the right)  warnings.warn(msg, UserWarning)/root/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py:2530: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance.  obj = obj._drop_axis(labels, axis, level=level, errors=errors)</code></pre><h4 id="A-剪枝"><a href="#A-剪枝" class="headerlink" title="A 剪枝"></a>A 剪枝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除无用字段</span></span><br><span class="line">dataset_A = dataset_A.drop([<span class="string">'CUST_NO'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="B集"><a href="#B集" class="headerlink" title="B集"></a>B集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A 集 4782</span></span><br><span class="line">dataset_B = pd.merge(IDV_CUST_BASIC_PARSE(CALC_AGE(B_idv_cust_basic)), IDV_TD_PARSE(B_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, IDV_DPSA_PARSE(B_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, TR_DC_PARSE(B_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_IDV_TD_METHOD(B_idv_td), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_IDV_DPSA_METHOD(B_idv_dpsa), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_TR_DC_METHOD(B_tr_dc), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, THR_PTY_CSTD_PARSE(B_thr_pty_cstd), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_LOAN_METHOD(B_loan), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_FUND_METHOD(B_fund), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_BOND_METHOD(B_bond), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_PREC_METAL_METHOD(B_prec_metal), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, BY_MONTH_AGET_INSR_METHOD(B_aget_insr), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(dataset_B, AUM_NUMS(B_idv_td, B_bond, B_fund, B_prec_metal, B_aget_insr, B_idv_cust_basic), on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">dataset_B = pd.merge(WEALTH(B_customid,B_idv_td,B_bond,B_fund,B_prec_metal,B_aget_insr,B_thr_pty_cstd), dataset_B, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy/root/anaconda3/lib/python3.6/site-packages/pandas/core/reshape/merge.py:558: UserWarning: merging between different levels can give an unintended result (1 levels on the left, 2 on the right)  warnings.warn(msg, UserWarning)/root/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py:2530: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance.  obj = obj._drop_axis(labels, axis, level=level, errors=errors)</code></pre><h4 id="B集剪枝"><a href="#B集剪枝" class="headerlink" title="B集剪枝"></a>B集剪枝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除无用字段</span></span><br><span class="line">dataset_B = dataset_B.drop([<span class="string">'CUST_NO'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="欠采样"><a href="#欠采样" class="headerlink" title="欠采样"></a>欠采样</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_SAMPLE = pd.concat([dataset_train[dataset_train[<span class="string">'FLAG'</span>]==<span class="number">0</span>].sample(frac=<span class="number">0.20</span>),dataset_train[dataset_train[<span class="string">'FLAG'</span>]==<span class="number">1</span>]],axis=<span class="number">0</span>).sample(frac=<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold  </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建特征  </span></span><br><span class="line"><span class="comment">#X = dataset_train.drop(['FLAG'],axis=1).fillna(0)</span></span><br><span class="line"><span class="comment">#y = dataset_train['FLAG']</span></span><br><span class="line">X = train_SAMPLE.drop([<span class="string">'FLAG'</span>],axis=<span class="number">1</span>).fillna(<span class="number">0</span>)</span><br><span class="line">y = train_SAMPLE[<span class="string">'FLAG'</span>]</span><br><span class="line"><span class="comment"># X = dataset_train_SAMPLE.drop(['FLAG'],axis=1)</span></span><br><span class="line"><span class="comment"># y = dataset_train_SAMPLE['FLAG']</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用sklearn.cross_validation进行训练数据集划分</span></span><br><span class="line">X, val_X, y, val_y = train_test_split(  </span><br><span class="line">    X,  </span><br><span class="line">    y,  </span><br><span class="line">    test_size=<span class="number">0.01</span>,</span><br><span class="line">    <span class="comment">#test_size=0.125,</span></span><br><span class="line">    random_state=<span class="number">2020</span>,  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMOTE过采样</span></span><br><span class="line"><span class="comment"># smo = SMOTE(random_state=2019)</span></span><br><span class="line"><span class="comment"># X_smo, y_smo = smo.fit_sample(X, y)</span></span><br><span class="line"><span class="comment"># X_smo = pd.DataFrame(X_smo)</span></span><br><span class="line"><span class="comment"># X_smo.columns=['XXX']</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold  </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建特征  </span></span><br><span class="line">X = dataset_train.drop([<span class="string">'FLAG'</span>],axis=<span class="number">1</span>).fillna(<span class="number">0</span>)</span><br><span class="line">y = dataset_train[<span class="string">'FLAG'</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用sklearn.cross_validation进行训练数据集划分</span></span><br><span class="line">X, val_X, y, val_y = train_test_split(  </span><br><span class="line">    X,  </span><br><span class="line">    y,  </span><br><span class="line">    test_size=<span class="number">0.125</span>,</span><br><span class="line">    random_state=<span class="number">2019</span>,  </span><br><span class="line">)</span><br><span class="line">train_REAL = pd.concat([X,y],axis=<span class="number">1</span>)</span><br><span class="line">train_REAL = pd.concat([train_REAL[train_REAL[<span class="string">'FLAG'</span>]==<span class="number">0</span>].sample(frac=<span class="number">0.20</span>),train_REAL[train_REAL[<span class="string">'FLAG'</span>]==<span class="number">1</span>]],axis=<span class="number">0</span>).sample(frac=<span class="number">1.0</span>)</span><br><span class="line">X = train_REAL.drop([<span class="string">'FLAG'</span>],axis=<span class="number">1</span>)</span><br><span class="line">y = train_REAL[<span class="string">'FLAG'</span>]</span><br></pre></td></tr></table></figure><h4 id="XGB算法"><a href="#XGB算法" class="headerlink" title="XGB算法"></a>XGB算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xgb矩阵赋值  </span></span><br><span class="line">xgb_val = xgb.DMatrix(val_X, label=val_y)  </span><br><span class="line"><span class="comment"># xgb_train = xgb.DMatrix(X_smo, label=y_smo)</span></span><br><span class="line">xgb_train = xgb.DMatrix(X, label=y)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># xgboost模型#</span></span><br><span class="line">params = &#123;  </span><br><span class="line">    <span class="string">'booster'</span>: <span class="string">'gbtree'</span>,  </span><br><span class="line">    <span class="comment"># 'objective': 'multi:softmax',  # 多分类的问题、  </span></span><br><span class="line">    <span class="comment"># 'objective': 'multi:softprob',   # 多分类概率  </span></span><br><span class="line">    <span class="string">'objective'</span>: <span class="string">'binary:logistic'</span>,  </span><br><span class="line">    <span class="string">'eval_metric'</span>: <span class="string">'logloss'</span>,  </span><br><span class="line">    <span class="comment"># 'num_class': 9,  # 类别数，与 multisoftmax 并用  </span></span><br><span class="line">    <span class="string">'gamma'</span>: <span class="number">0.1</span>,  <span class="comment"># 用于控制是否后剪枝的参数,越大越保守，一般0.1、0.2这样子。  </span></span><br><span class="line">    <span class="string">'max_depth'</span>: <span class="number">5</span>,  <span class="comment"># 构建树的深度，越大越容易过拟合  </span></span><br><span class="line">    <span class="string">'alpha'</span>: <span class="number">0</span>,   <span class="comment"># L1正则化系数  </span></span><br><span class="line">    <span class="string">'lambda'</span>: <span class="number">8</span>,  <span class="comment"># 控制模型复杂度的权重值的L2正则化项参数，参数越大，模型越不容易过拟合。  </span></span><br><span class="line">    <span class="string">'subsample'</span>: <span class="number">1</span>,  <span class="comment"># 随机采样训练样本  </span></span><br><span class="line">    <span class="string">'colsample_bytree'</span>: <span class="number">0.6</span>,  <span class="comment"># 生成树时进行的列采样  </span></span><br><span class="line">    <span class="string">'min_child_weight'</span>: <span class="number">3</span>,  </span><br><span class="line">    <span class="comment"># 这个参数默认是 1，是每个叶子里面 h 的和至少是多少，对正负样本不均衡时的 0-1 分类而言  </span></span><br><span class="line">    <span class="comment"># ，假设 h 在 0.01 附近，min_child_weight 为 1 意味着叶子节点中最少需要包含 100 个样本。  </span></span><br><span class="line">    <span class="comment"># 这个参数非常影响结果，控制叶子节点中二阶导的和的最小值，该参数值越小，越容易 overfitting。  </span></span><br><span class="line">    <span class="string">'silent'</span>: <span class="number">0</span>,  <span class="comment"># 设置成1则没有运行信息输出，最好是设置为0.  </span></span><br><span class="line">    <span class="string">'eta'</span>: <span class="number">0.01</span> ,</span><br><span class="line">    <span class="comment">#'eta': 0.1,  # 如同学习率 - result 0.554455</span></span><br><span class="line">    <span class="string">'seed'</span>: <span class="number">1000</span>,  </span><br><span class="line">    <span class="string">'nthread'</span>: <span class="number">24</span>,  <span class="comment"># cpu 线程数  </span></span><br><span class="line">    <span class="string">'missing'</span>: <span class="number">1</span>,  </span><br><span class="line">    <span class="string">'scale_pos_weight'</span>: (np.sum(y==<span class="number">0</span>)/np.sum(y==<span class="number">1</span>))  <span class="comment"># 用来处理正负样本不均衡的问题,通常取：sum(negative cases) / sum(positive cases)  </span></span><br><span class="line">    <span class="comment"># 'eval_metric': 'auc'  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plst = list(params.items())  </span><br><span class="line">num_rounds = <span class="number">30000</span>  <span class="comment"># 迭代次数  </span></span><br><span class="line">watchlist = [(xgb_train, <span class="string">'train'</span>), (xgb_val, <span class="string">'val'</span>)]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 交叉验证  </span></span><br><span class="line">result = xgb.cv(plst, xgb_train, num_boost_round=<span class="number">200</span>, nfold=<span class="number">4</span>, early_stopping_rounds=<span class="number">200</span>, verbose_eval=<span class="keyword">True</span>, folds=StratifiedKFold(n_splits=<span class="number">4</span>).split(X, y))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 训练模型并保存  </span></span><br><span class="line"><span class="comment"># early_stopping_rounds 当设置的迭代次数较大时，early_stopping_rounds 可在一定的迭代次数内准确率没有提升就停止训练  </span></span><br><span class="line">model = xgb.train(plst, xgb_train, num_rounds, watchlist, early_stopping_rounds=<span class="number">400</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型保存</span></span><br><span class="line">model.save_model(<span class="string">'./leezy_xgb.model'</span>)  <span class="comment"># 用于存储训练出的模型</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取模型</span></span><br><span class="line"><span class="comment"># model = xgb.Booster(model_file='5903-xgb.model')</span></span><br><span class="line"><span class="comment"># 本地验证</span></span><br><span class="line">xgb_test = xgb.DMatrix(val_X) </span><br><span class="line">preds = model.predict(xgb_test)</span><br><span class="line"><span class="comment"># 导出结果  </span></span><br><span class="line">threshold = <span class="number">0.70</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> preds:  </span><br><span class="line">    result = <span class="number">1</span> <span class="keyword">if</span> pred &gt; threshold <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    ans.append(result)</span><br><span class="line">pred_result= pd.Series(ans, dtype=<span class="string">'int32'</span>)</span><br><span class="line">evaluate(val_y, pred_result)</span><br></pre></td></tr></table></figure><pre><code>test_pct_1: 0.1581pred_pct_1: 0.1836Precesion: 0.5581Recall: 0.6481F1-score: 0.5998confusion matrix:[[3638  388] [ 266  490]]{&apos;Confusuion&apos;: array([[3638,  388],        [ 266,  490]]), &apos;F1&apos;: 0.5997552019583843, &apos;Precision&apos;: 0.5580865603644647, &apos;acc&apos;: 0.863237139272271, &apos;pred_pct_1&apos;: 0.1836051861145964, &apos;recall&apos;: 0.6481481481481481, &apos;roc_auc&apos;: 0.7758872881823701, &apos;test_pct_1&apos;: 0.15809284818067754}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A集训练</span></span><br><span class="line">xgb_A = xgb.DMatrix(dataset_A)</span><br><span class="line">A_preds = model.predict(xgb_A)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出结果  </span></span><br><span class="line">threshold = <span class="number">0.40</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> A_preds:  </span><br><span class="line">    result = <span class="number">1</span> <span class="keyword">if</span> pred &gt; threshold <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    ans.append(result)</span><br><span class="line">pred_A_result= pd.Series(ans, dtype=<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># B集训练</span></span><br><span class="line">xgb_B = xgb.DMatrix(dataset_B)</span><br><span class="line">B_preds = model.predict(xgb_B)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出结果  </span></span><br><span class="line">threshold = <span class="number">0.68</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> B_preds:  </span><br><span class="line">    result = <span class="number">1</span> <span class="keyword">if</span> pred &gt; threshold <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">    ans.append(result)</span><br><span class="line">pred_B_result= pd.Series(ans, dtype=<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">importance = model.get_fscore()</span><br><span class="line">importance = sorted(importance.items(), key=operator.itemgetter(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(importance)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">"figure.figsize"</span>]=(<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">xgb.plot_importance(model, max_num_features=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/matplotlib/font_manager.py:1320: UserWarning: findfont: Font family [&apos;sans-serif&apos;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))</code></pre><p><img src="/assets/blogImg/OUTPUT_IMPORTANCES.png" alt="IMPORTANCES"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看特征排名</span></span><br><span class="line">feature_rank(model, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred_B_result.value_counts()</span><br></pre></td></tr></table></figure><pre><code>0    39011     881dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并结果</span></span><br><span class="line">result = pd.concat([B_customid, pred_B_result],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.to_csv(<span class="string">'111.csv'</span>,header=<span class="number">0</span>,index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_woody</span><br></pre></td></tr></table></figure><pre><code>The prv extension is already loaded. To reload it, use:  %reload_ext prvMatplotlib env init complete.Warnings off.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict <span class="number">2</span> <span class="number">000.</span>csv</span><br></pre></td></tr></table></figure><pre><code>&apos;提交次数已用完，请明日再试！&apos;</code></pre><h3 id="深化特征工程"><a href="#深化特征工程" class="headerlink" title="深化特征工程"></a>深化特征工程</h3><h4 id="各类理财产品的持有数量"><a href="#各类理财产品的持有数量" class="headerlink" title="各类理财产品的持有数量"></a>各类理财产品的持有数量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_idv_td = pd.read_csv(<span class="string">"../data/2/train/IDV_TD.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 个人定期存款账户信息（IDV_TD）</span></span><br><span class="line">train_bond = pd.read_csv(<span class="string">"../data/2/train/BOND.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 国债账户信息（BOND）</span></span><br><span class="line">train_fund = pd.read_csv(<span class="string">"../data/2/train/FUND.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 基金账户信息（FUND）</span></span><br><span class="line">train_prec_metal = pd.read_csv(<span class="string">"../data/2/train/PREC_METAL.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 贵金属账户信息（PREC_METAL）</span></span><br><span class="line">train_aget_insr = pd.read_csv(<span class="string">"../data/2/train/AGET_INSR.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 代理保险账户信息（AGET_INSR）</span></span><br><span class="line">train_idv_cust_basic = pd.read_csv(<span class="string">"../data/2/train/IDV_CUST_BASIC.csv"</span>, encoding=<span class="string">'utf-8'</span>) <span class="comment"># 个人客户基本信息（IDV_CUST_BASIC）</span></span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/IPython/core/interactiveshell.py:2728: DtypeWarning: Columns (12) have mixed types. Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定期的个数</span></span><br><span class="line">train_idv_td_3 = train_idv_td[train_idv_td[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_idv_td_AUM = train_idv_td_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">train_idv_td_num = train_idv_td_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">train_idv_td_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'IDV_TD_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国债的个数</span></span><br><span class="line">train_bond_3 = train_bond[train_bond[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_bond_AUM = train_bond_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">train_bond_num = train_bond_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">train_bond_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'BOND_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基金的个数</span></span><br><span class="line">train_fund_3 = train_fund[train_fund[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_fund_AUM = train_fund[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">train_fund_num = train_fund_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">train_fund_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'FUND_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 贵金属的个数</span></span><br><span class="line">train_prec_metal_3 = train_prec_metal[train_prec_metal[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_prec_metal_3.dropna(subset=[<span class="string">'SIGD_DAT'</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line">train_prec_metal_AUM = train_prec_metal_3[[<span class="string">'CUST_NO'</span>, <span class="string">'SIGD_DAT'</span>]]</span><br><span class="line">train_prec_metal_num = train_prec_metal_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">train_prec_metal_num.rename(columns=&#123;<span class="string">'SIGD_DAT'</span>:<span class="string">'PREC_METAL_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy  This is separate from the ipykernel package so we can avoid doing imports until</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保险的个数</span></span><br><span class="line">train_aget_insr_3 = train_aget_insr[train_aget_insr[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">train_aget_insr_3.dropna(subset=[<span class="string">'INSE_DAT'</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line">train_aget_insr_AUM = train_aget_insr_3[[<span class="string">'CUST_NO'</span>, <span class="string">'INSE_DAT'</span>]]</span><br><span class="line">train_aget_insr_num = train_aget_insr_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">train_aget_insr_num.rename(columns=&#123;<span class="string">'INSE_DAT'</span>:<span class="string">'AGET_INSR_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy  This is separate from the ipykernel package so we can avoid doing imports until</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户ID</span></span><br><span class="line">CUST_NO_LSIT = train_idv_cust_basic[<span class="string">'CUST_NO'</span>].reset_index().drop(<span class="string">'index'</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并为一个表</span></span><br><span class="line">CUST_NO_AUM_LSIT = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(CUST_NO_LSIT, train_idv_td_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_bond_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_fund_num, </span><br><span class="line">                            on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_prec_metal_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_aget_insr_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>).fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUST_NO_AUM_LSIT[<span class="string">'PRODUCTS_NUM'</span>] = CUST_NO_AUM_LSIT[[<span class="string">'IDV_TD_NUM'</span>,<span class="string">'BOND_NUM'</span>,<span class="string">'FUND_NUM'</span>,<span class="string">'PREC_METAL_NUM'</span>,<span class="string">'AGET_INSR_NUM'</span>]].sum(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUST_NO_AUM_LSIT[CUST_NO_AUM_LSIT[<span class="string">'CUST_NO'</span>] == <span class="string">'a100d07faf0bc3c60d7d65abd704142a'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUST_NO_AUM_LSIT.head(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyAUMTest = pd.merge(CUST_NO_AUM_LSIT, train_cust_result, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyAUMTest.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUST_NO_AUM_LSIT.shape</span><br></pre></td></tr></table></figure><pre><code>(38256, 6)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联关系</span></span><br><span class="line">g = sns.heatmap(MyAUMTest[[<span class="string">'FLAG'</span>, <span class="string">'IDV_TD_NUM'</span>,<span class="string">'BOND_NUM'</span>,<span class="string">'FUND_NUM'</span>,<span class="string">'PREC_METAL_NUM'</span>,<span class="string">'AGET_INSR_NUM'</span>,<span class="string">'PRODUCTS_NUM'</span>]].corr(), annot=<span class="keyword">True</span>, cmap=<span class="string">"coolwarm"</span>)</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.6/site-packages/matplotlib/font_manager.py:1320: UserWarning: findfont: Font family [&apos;sans-serif&apos;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))</code></pre><p><img src="/assets/blogImg/OUTPUT_HEATMAP.png" alt="HEATMAP"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取到所有投资种类的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AUM_NUMS</span><span class="params">(train_idv_td, train_bond, train_fund, train_prec_metal, train_aget_insr, train_idv_cust_basic)</span>:</span></span><br><span class="line">    <span class="comment"># 定期的个数</span></span><br><span class="line">    train_idv_td_3 = train_idv_td[train_idv_td[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_idv_td_AUM = train_idv_td_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">    train_idv_td_num = train_idv_td_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">    train_idv_td_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'IDV_TD_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 国债的个数</span></span><br><span class="line">    train_bond_3 = train_bond[train_bond[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_bond_AUM = train_bond_3[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">    train_bond_num = train_bond_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">    train_bond_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'BOND_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 基金的个数</span></span><br><span class="line">    train_fund_3 = train_fund[train_fund[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_fund_AUM = train_fund[[<span class="string">'CUST_NO'</span>, <span class="string">'ARG_CRT_DAT'</span>]]</span><br><span class="line">    train_fund_num = train_fund_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">    train_fund_num.rename(columns=&#123;<span class="string">'ARG_CRT_DAT'</span>:<span class="string">'FUND_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 贵金属的个数</span></span><br><span class="line">    train_prec_metal_3 = train_prec_metal[train_prec_metal[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_prec_metal_3.dropna(subset=[<span class="string">'SIGD_DAT'</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line">    train_prec_metal_AUM = train_prec_metal_3[[<span class="string">'CUST_NO'</span>, <span class="string">'SIGD_DAT'</span>]]</span><br><span class="line">    train_prec_metal_num = train_prec_metal_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">    train_prec_metal_num.rename(columns=&#123;<span class="string">'SIGD_DAT'</span>:<span class="string">'PREC_METAL_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 保险的个数</span></span><br><span class="line">    train_aget_insr_3 = train_aget_insr[train_aget_insr[<span class="string">'DATA_DAT'</span>]==<span class="number">3734035200</span>]</span><br><span class="line">    train_aget_insr_3.dropna(subset=[<span class="string">'INSE_DAT'</span>], inplace=<span class="keyword">True</span>)</span><br><span class="line">    train_aget_insr_AUM = train_aget_insr_3[[<span class="string">'CUST_NO'</span>, <span class="string">'INSE_DAT'</span>]]</span><br><span class="line">    train_aget_insr_num = train_aget_insr_AUM.groupby(<span class="string">'CUST_NO'</span>).count().reset_index()</span><br><span class="line">    train_aget_insr_num.rename(columns=&#123;<span class="string">'INSE_DAT'</span>:<span class="string">'AGET_INSR_NUM'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 客户ID</span></span><br><span class="line">    CUST_NO_LSIT = train_idv_cust_basic[<span class="string">'CUST_NO'</span>].reset_index().drop(<span class="string">'index'</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 合并为一个表</span></span><br><span class="line">    CUST_NO_AUM_LSIT = pd.merge(pd.merge(pd.merge(pd.merge(pd.merge(CUST_NO_LSIT, train_idv_td_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_bond_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_fund_num, </span><br><span class="line">                            on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_prec_metal_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>), train_aget_insr_num, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'outer'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">    CUST_NO_AUM_LSIT[<span class="string">'PRODUCTS_NUM'</span>] = CUST_NO_AUM_LSIT[[<span class="string">'IDV_TD_NUM'</span>,<span class="string">'BOND_NUM'</span>,<span class="string">'FUND_NUM'</span>,<span class="string">'PREC_METAL_NUM'</span>,<span class="string">'AGET_INSR_NUM'</span>]].sum(axis=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> CUST_NO_AUM_LSIT</span><br></pre></td></tr></table></figure><h4 id="三个月变动"><a href="#三个月变动" class="headerlink" title="三个月变动"></a>三个月变动</h4><h5 id="定期账户"><a href="#定期账户" class="headerlink" title="定期账户"></a>定期账户</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_IDV_TD_METHOD</span><span class="params">(dataset_IDV_TD)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    <span class="comment"># 简化IDV_TD表</span></span><br><span class="line">    train_idv_td_temple = dataset_IDV_TD.drop([<span class="string">'ARG_CRT_DAT'</span>, <span class="string">'CLS_ACCT_DAT'</span>, <span class="string">'MATU_DAT'</span>, <span class="string">'LAC'</span>, <span class="string">'ACCT_STS_CD'</span>,<span class="string">'DP_DAY_CD'</span>, <span class="string">'RDEP_IND_CD'</span>, <span class="string">'RDEP_DP_DAY_CD'</span>, <span class="string">'RAT_CTG'</span>,<span class="string">'FXDI_SA_ACCM'</span>, <span class="string">'MTH_ACT_DAYS_TOT'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将train_idv_td和train_base_excg合并</span></span><br><span class="line">    train_idv_td_temple = pd.merge(train_idv_td_temple, train_base_excg, on = <span class="string">'CCY_CD'</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_idv_td_temple[<span class="string">'CRBAL'</span>] = train_idv_td_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'CRBAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_td_temple[<span class="string">'REG_CAP'</span>] = train_idv_td_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'REG_CAP'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_td_temple[<span class="string">'FXDI_T_ACCM'</span>] = train_idv_td_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'FXDI_T_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_td_temple[<span class="string">'TDOP_SHD_PAY_INTS'</span>] = train_idv_td_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_td_temple[<span class="string">'MOTH_CR_ACCM'</span>] = train_idv_td_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_td_temple = train_idv_td_temple.drop([<span class="string">'CCY_CD'</span>, <span class="string">'RMB_MID_PRIC'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 按月将金额分类</span></span><br><span class="line">    BY_MONTH_TD = train_idv_td_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'CRBAL'</span>, <span class="string">'REG_CAP'</span>, <span class="string">'FXDI_T_ACCM'</span>, <span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'MOTH_CR_ACCM'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_IDV_TD</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_idv_td_temple_STD = BY_MONTH_TD[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_td_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'IDV_TD_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_idv_td_temple_MEAN = BY_MONTH_TD[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_td_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_TD_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_idv_td_temple_MAX = BY_MONTH_TD[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_td_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_TD_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_idv_td_temple_MIN = BY_MONTH_TD[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_td_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_TD_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_idv_td_temple = pd.merge(train_idv_td_temple_STD, train_idv_td_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_td_temple = pd.merge(train_idv_td_temple, train_idv_td_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_td_temple = pd.merge(train_idv_td_temple, train_idv_td_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_td_temple = train_idv_td_temple.fillna(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> train_idv_td_temple</span><br><span class="line">    train_idv_td_temple = BY_MONTH_IDV_TD(<span class="string">'CRBAL'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'REG_CAP'</span>, <span class="string">'FXDI_T_ACCM'</span>,<span class="string">'TDOP_SHD_PAY_INTS'</span>, <span class="string">'MOTH_CR_ACCM'</span>]:</span><br><span class="line">        train_idv_td_temple = pd.merge(train_idv_td_temple, BY_MONTH_IDV_TD(key))</span><br><span class="line">        train_idv_td_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> train_idv_td_temple</span><br></pre></td></tr></table></figure><h5 id="活期账户"><a href="#活期账户" class="headerlink" title="活期账户"></a>活期账户</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_IDV_DPSA_METHOD</span><span class="params">(dataset_IDV_DPSA)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    <span class="comment"># 将IDV_DPSA表与汇率表整合</span></span><br><span class="line">    train_idv_dpsa_temple = pd.merge(dataset_IDV_DPSA, train_base_excg, on = <span class="string">'CCY_CD'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">    train_idv_dpsa_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 执行汇率计算函数</span></span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'CRBAL'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis=<span class="number">1</span>, args = (<span class="string">'CRBAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'ITST_BRNG_ACCM'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis=<span class="number">1</span>, args = (<span class="string">'ITST_BRNG_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'FRZ_TOT_AMT'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'FRZ_TOT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'DAY_WD_ACT_AMT'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_WD_ACT_AMT'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'DAY_CSH_DP_SUM'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_CSH_DP_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'DAY_CSH_WD_SUM'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_CSH_WD_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'DAY_TFI_SUM'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'DAY_TFI_SUM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'MOTH_CR_ACCM'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple[<span class="string">'BEG_MOTH_CRBAL'</span>] = train_idv_dpsa_temple.apply(compute_REAL_MONEY, axis = <span class="number">1</span>, args = (<span class="string">'BEG_MOTH_CRBAL'</span>, <span class="string">'RMB_MID_PRIC'</span>))</span><br><span class="line">    train_idv_dpsa_temple = train_idv_dpsa_temple.drop([<span class="string">'CCY_CD'</span>, <span class="string">'RMB_MID_PRIC'</span>], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 按月将金额分组</span></span><br><span class="line">    BY_MONTH_DPSA = train_idv_dpsa_temple.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'DATA_DAT'</span>])[[<span class="string">'CRBAL'</span>, <span class="string">'ITST_BRNG_ACCM'</span>,</span><br><span class="line">           <span class="string">'FRZ_TOT_AMT'</span>, <span class="string">'DAY_WD_ACT_AMT'</span>, <span class="string">'DAY_CSH_DP_SUM'</span>, <span class="string">'DAY_CSH_WD_SUM'</span>,</span><br><span class="line">           <span class="string">'DAY_TFI_SUM'</span>, <span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'BEG_MOTH_CRBAL'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_IDV_DPSA</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_idv_dpsa_temple_STD = BY_MONTH_DPSA[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_dpsa_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'IDV_DPSA_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_idv_dpsa_temple_MEAN = BY_MONTH_DPSA[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_dpsa_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_DPSA_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_idv_dpsa_temple_MAX = BY_MONTH_DPSA[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_dpsa_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_DPSA_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_idv_dpsa_temple_MIN = BY_MONTH_DPSA[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_idv_dpsa_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'IDV_DPSA_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_idv_dpsa_temple = pd.merge(train_idv_dpsa_temple_STD, train_idv_dpsa_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_dpsa_temple = pd.merge(train_idv_dpsa_temple, train_idv_dpsa_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_dpsa_temple = pd.merge(train_idv_dpsa_temple, train_idv_dpsa_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_idv_dpsa_temple = train_idv_dpsa_temple.fillna(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> train_idv_dpsa_temple</span><br><span class="line">    train_idv_dpsa_temple = BY_MONTH_IDV_DPSA(<span class="string">'CRBAL'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">'ITST_BRNG_ACCM'</span>,<span class="string">'FRZ_TOT_AMT'</span>, <span class="string">'DAY_WD_ACT_AMT'</span>, <span class="string">'DAY_CSH_DP_SUM'</span>, </span><br><span class="line">              <span class="string">'DAY_CSH_WD_SUM'</span>,<span class="string">'DAY_TFI_SUM'</span>, <span class="string">'MOTH_CR_ACCM'</span>, <span class="string">'BEG_MOTH_CRBAL'</span>]:</span><br><span class="line">        train_idv_dpsa_temple = pd.merge(train_idv_dpsa_temple, BY_MONTH_IDV_DPSA(key))</span><br><span class="line">        train_idv_dpsa_temple.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> train_idv_dpsa_temple</span><br></pre></td></tr></table></figure><h5 id="交易信息"><a href="#交易信息" class="headerlink" title="交易信息"></a>交易信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_TR_DC_METHOD</span><span class="params">(dataset_TR_DC)</span>:</span></span><br><span class="line">    <span class="comment"># 预处理</span></span><br><span class="line">    <span class="comment"># 去除抹帐(1),无意义列，这里全是0</span></span><br><span class="line">    dataset_TR_DC = dataset_TR_DC[dataset_TR_DC[<span class="string">'CAN_IND'</span>]==<span class="number">0</span>].drop([<span class="string">'RED_BLU_CD'</span>, <span class="string">'CRD_TYP1'</span>, <span class="string">'TR_TYPE'</span>, <span class="string">'TR_CHANL_CD'</span>, <span class="string">'CAN_IND'</span>, </span><br><span class="line">                                                                      <span class="string">'CARD_USETYPE'</span>, <span class="string">'CARD_ELECASH'</span>, <span class="string">'CARD_MATERIAL'</span>],axis=<span class="number">1</span>)</span><br><span class="line">    dataset_TR_DC.drop_duplicates(subset=<span class="keyword">None</span>, keep=<span class="string">'first'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 交易表时间段打上标签</span></span><br><span class="line">    <span class="comment"># 2月份 [3726432000, 3728937600), 3月份 [3728937600, 3731616000), 4月份 [3731616000, 3734035200]</span></span><br><span class="line">    dataset_TR_DC[<span class="string">'TR_DAT'</span>] = pd.cut(dataset_TR_DC[<span class="string">'TR_DAT'</span>], [<span class="number">3726432000</span>, <span class="number">3728937600</span>, <span class="number">3731616000</span>, <span class="number">3734035200</span>], labels=[<span class="string">'2月份'</span>, <span class="string">'3月份'</span>, <span class="string">'4月份'</span>])</span><br><span class="line">    <span class="comment"># 将交易按照 正 / 负 分开</span></span><br><span class="line">    train_tr_dc[<span class="string">'INCOME'</span>] = train_tr_dc[<span class="string">'TR_AMT'</span>] &gt; <span class="number">0</span></span><br><span class="line">    myseries = train_tr_dc.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'INCOME'</span>])[<span class="string">'TR_AMT'</span>].sum()</span><br><span class="line">    myseries = myseries.unstack().fillna(<span class="number">0</span>)</span><br><span class="line">    TR_DC_IN_OUT = pd.DataFrame(myseries).reset_index()</span><br><span class="line">    TR_DC_IN_OUT[<span class="string">'IN_SUM'</span>] = TR_DC_IN_OUT[<span class="keyword">True</span>]</span><br><span class="line">    TR_DC_IN_OUT[<span class="string">'OUT_SUM'</span>] = TR_DC_IN_OUT[<span class="keyword">False</span>]</span><br><span class="line">    TR_DC_IN_OUT = TR_DC_IN_OUT.drop([<span class="keyword">True</span>, <span class="keyword">False</span>], axis=<span class="number">1</span>)</span><br><span class="line">    BY_MONTH_DC = dataset_TR_DC.groupby([<span class="string">'CUST_NO'</span>, <span class="string">'TR_DAT'</span>])[[<span class="string">'TR_AMT'</span>]].sum().unstack()</span><br><span class="line">    <span class="comment"># 声明函数 计算三个月的标准差、均值、最大值、最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BY_MONTH_TR_DC</span><span class="params">(key)</span>:</span></span><br><span class="line">        train_tr_dc_temple_STD = BY_MONTH_DC[key].std(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_tr_dc_temple_STD.columns = [<span class="string">'CUST_NO'</span>, str(<span class="string">'TR_DC_'</span>+key+<span class="string">'_STD'</span>)]</span><br><span class="line">        train_tr_dc_temple_MEAN = BY_MONTH_DC[key].mean(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_tr_dc_temple_MEAN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'TR_DC_'</span>+key+<span class="string">'_MEAN'</span>)]</span><br><span class="line">        train_tr_dc_temple_MAX = BY_MONTH_DC[key].max(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_tr_dc_temple_MAX.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'TR_DC_'</span>+key+<span class="string">'_MAX'</span>)]</span><br><span class="line">        train_tr_dc_temple_MIN = BY_MONTH_DC[key].min(axis=<span class="number">1</span>).reset_index()</span><br><span class="line">        train_tr_dc_temple_MIN.columns = [<span class="string">'CUST_NO'</span>,str(<span class="string">'TR_DC_'</span>+key+<span class="string">'_MIN'</span>)]</span><br><span class="line">        <span class="comment"># 合并字段</span></span><br><span class="line">        train_tr_dc_temple = pd.merge(train_tr_dc_temple_STD, train_tr_dc_temple_MEAN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_tr_dc_temple = pd.merge(train_tr_dc_temple, train_tr_dc_temple_MAX, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_tr_dc_temple = pd.merge(train_tr_dc_temple, train_tr_dc_temple_MIN, on=<span class="string">'CUST_NO'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">        train_tr_dc_temple = train_tr_dc_temple.fillna(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> train_tr_dc_temple</span><br><span class="line">    train_tr_dc_temple = BY_MONTH_TR_DC(<span class="string">'TR_AMT'</span>)</span><br><span class="line">    <span class="keyword">return</span> train_tr_dc_temple</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_tr_dc[<span class="string">'TR_DAT'</span>] = pd.cut(train_tr_dc[<span class="string">'TR_DAT'</span>], [<span class="number">3726432000</span>, <span class="number">3728937600</span>, <span class="number">3731616000</span>, <span class="number">3734035200</span>], labels=[<span class="string">'FEB'</span>, <span class="string">'MAR'</span>, <span class="string">'APR'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BY_MONTH_TR_DC_METHOD = train_tr_dc[[<span class="string">'TR_DAT'</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x=<span class="string">'TR_DAT'</span>, data=BY_MONTH_TR_DC_METHOD)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f0167e23a58&gt;</code></pre><p><img src="/assets/blogImg/OUTPUT_COUNTPLOT.png" alt="COUNTPLOT"></p><h4 id="年龄"><a href="#年龄" class="headerlink" title="年龄"></a>年龄</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回单个 或 series 的ms对应日期, 再被 2015 减得到的年数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adj_date</span><span class="params">(series, datatype=<span class="string">'series'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    initial_year = <span class="number">2015</span></span><br><span class="line">    adj_msj_obj = datetime.strptime(<span class="string">"2042-08-31 16:00:00.123"</span>, <span class="string">"%Y-%m-%d %H:%M:%S.%f"</span>)</span><br><span class="line">    adj_ms = int(time.mktime(adj_msj_obj.timetuple())*<span class="number">1000</span> + adj_msj_obj.microsecond/<span class="number">1000.0</span>)/<span class="number">1000</span></span><br><span class="line">    current_ms = train_idv_cust_basic[<span class="string">'DATA_DAT'</span>][<span class="number">0</span>]   <span class="comment"># 3736713600</span></span><br><span class="line">    <span class="keyword">if</span>(datatype==<span class="string">'single'</span>):</span><br><span class="line">        <span class="keyword">return</span> initial_year - int(time.strftime(<span class="string">"%Y%m"</span>, time.localtime(current_ms-adj_ms)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> series.map(<span class="keyword">lambda</span> x: initial_year - int(time.strftime(<span class="string">"%Y"</span>, time.localtime(x - adj_ms))) <span class="keyword">if</span> pd.notna(x) <span class="keyword">else</span> x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 年龄计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CALC_AGE</span><span class="params">(dataset_idv_cust_basic)</span>:</span></span><br><span class="line">    dataset_idv_cust_basic[<span class="string">'GC_BRTH'</span>] = dataset_idv_cust_basic[<span class="string">'GC_BRTH'</span>].fillna(dataset_idv_cust_basic[<span class="string">'GC_BRTH'</span>].mean())</span><br><span class="line">    dataset_idv_cust_basic[<span class="string">'AGE'</span>] = adj_date(dataset_idv_cust_basic[<span class="string">'GC_BRTH'</span>])</span><br><span class="line">    dataset_idv_cust_basic[<span class="string">'AGE'</span>] = np.where(dataset_idv_cust_basic[<span class="string">'AGE'</span>] &gt; <span class="number">100</span>, <span class="number">31</span>, dataset_idv_cust_basic[<span class="string">'AGE'</span>])</span><br><span class="line">    dataset_idv_cust_basic[<span class="string">'AGE'</span>] = np.where(dataset_idv_cust_basic[<span class="string">'AGE'</span>] &lt; <span class="number">16</span>, <span class="number">31</span>, dataset_idv_cust_basic[<span class="string">'AGE'</span>])</span><br><span class="line">    <span class="keyword">return</span> dataset_idv_cust_basic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AGE = CALC_AGE(train_idv_cust_basic)[<span class="string">'AGE'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AGE.hist()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f01681b5cc0&gt;/root/anaconda3/lib/python3.6/site-packages/matplotlib/font_manager.py:1320: UserWarning: findfont: Font family [&apos;sans-serif&apos;] not found. Falling back to DejaVu Sans  (prop.get_family(), self.defaultFamily[fontext]))</code></pre><p><img src="/assets/blogImg/OUTPUT_HIST.png" alt="HIST"></p><h4 id="所有资产"><a href="#所有资产" class="headerlink" title="所有资产"></a>所有资产</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># td定期、bond国债、fund基金、prec_metal贵金属、aget_insr保险</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WEALTH</span><span class="params">(target,td,bond,fund,prec_metal,agent_insurance,thr_pty_cstd)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # 销户日期必须 &gt; 2月底，合约建立日期必须 &lt; 4月底</span></span><br><span class="line"><span class="string">        #gp = df_tr_train.groupby(['CUST_NO','TR_CD']).agg(&#123;'TR_AMT':['sum','mean','max','min','count','std']&#125;)</span></span><br><span class="line"><span class="string">        if len(suffix)==1:</span></span><br><span class="line"><span class="string">            td = td[td['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">            bond = bond[bond['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">            fund = fund[fund['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">            prec_metal = prec_metal[prec_metal['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">            agent_insurance = agent_insurance[agent_insurance['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">            thr_pty_cstd = thr_pty_cstd[thr_pty_cstd['DATA_DAT']==time_point[1]]</span></span><br><span class="line"><span class="string">        elif len(suffix)==2:</span></span><br><span class="line"><span class="string">            td = td[td['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">            bond = bond[bond['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">            fund = fund[fund['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">            prec_metal = prec_metal[prec_metal['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">            agent_insurance = agent_insurance[agent_insurance['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">            thr_pty_cstd = thr_pty_cstd[thr_pty_cstd['DATA_DAT']&gt;time_point[1]]</span></span><br><span class="line"><span class="string">    '''</span>        </span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 选取各表合并特征</span></span><br><span class="line">    td = td[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'CRBAL'</span>,<span class="string">'MOTH_CR_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    bond = bond[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'ARG_CUR_BAL'</span>,<span class="string">'NVTA_MOTH_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    fund = fund[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'FUND_BAL'</span>,<span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    prec_metal = prec_metal[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'ARG_BAL'</span>,<span class="string">'MTH_ARG_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    agent_insurance = agent_insurance[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'BEG_MTH_PREM_BAL'</span>,<span class="string">'MTH_PREM_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    thr_pty_cstd = thr_pty_cstd[[<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>,<span class="string">'AVL_BAL'</span>,<span class="string">'MTH_ARG_BAL_ACCM'</span>]].groupby([<span class="string">'CUST_NO'</span>,<span class="string">'DATA_DAT'</span>]).sum().unstack().reset_index()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 理财各月的金额、持有产品的数量、</span></span><br><span class="line">    wealth = pd.merge(target[[<span class="string">'CUST_NO'</span>]],td,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>)</span><br><span class="line">    wealth = pd.merge(wealth,bond,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>)</span><br><span class="line">    wealth = pd.merge(wealth,fund,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>)</span><br><span class="line">    wealth = pd.merge(wealth,prec_metal,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>)</span><br><span class="line">    wealth = pd.merge(wealth,thr_pty_cstd,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>)</span><br><span class="line">    wealth = pd.merge(wealth,agent_insurance,on=[<span class="string">'CUST_NO'</span>],how=<span class="string">'outer'</span>).fillna(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 理财各月的金额、持有产品的数量、</span></span><br><span class="line">    <span class="comment">#wealth['WEALTH_BAL'] = wealth['CRBAL'] + wealth['ARG_CUR_BAL'] + wealth['FUND_BAL'] + wealth['ARG_BAL'] + wealth['BEG_MTH_PREM_BAL'] #+ wealth['AVL_BAL']</span></span><br><span class="line">    <span class="comment">#wealth['WEALTH_ACCM'] = wealth['MOTH_CR_ACCM'] + wealth['NVTA_MOTH_ACCM'] + wealth['FUND_BAL_MOTH_BAL_ACCM'] + wealth['MTH_ARG_ACCM'] + wealth['MTH_PREM_ACCM'] #+ wealth['MTH_ARG_BAL_ACCM']</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#wealth = wealth.groupby(['CUST_NO'])['WEALTH_BAL','WEALTH_ACCM'].sum().reset_index()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 持有的理财产品种类（不同期限/合约建立日期、相同品种的算不同产品）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 首份理财合约建立时间、最近一份理财合约建立时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3个月内买入理财产品次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3个月存款积数之和（活期，活期+定期+三方存管）</span></span><br><span class="line">    X = wealth.copy()</span><br><span class="line">    X[<span class="string">'WEALTH_BAL_1'</span>] = X[(<span class="string">'CRBAL'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'ARG_CUR_BAL'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'FUND_BAL'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'ARG_BAL'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'AVL_BAL'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'BEG_MTH_PREM_BAL'</span>, <span class="number">3728764800</span>)]</span><br><span class="line">    X[<span class="string">'WEALTH_BAL_2'</span>] = X[(<span class="string">'CRBAL'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'ARG_CUR_BAL'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'FUND_BAL'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'ARG_BAL'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'AVL_BAL'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'BEG_MTH_PREM_BAL'</span>, <span class="number">3731443200</span>)]</span><br><span class="line">    X[<span class="string">'WEALTH_BAL_3'</span>] = X[(<span class="string">'CRBAL'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'ARG_CUR_BAL'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'FUND_BAL'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'ARG_BAL'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'AVL_BAL'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'BEG_MTH_PREM_BAL'</span>, <span class="number">3734035200</span>)]</span><br><span class="line">    X[<span class="string">'WEALTH_ACCM_1'</span>] = X[(<span class="string">'MOTH_CR_ACCM'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'NVTA_MOTH_ACCM'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'MTH_ARG_ACCM'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'MTH_ARG_BAL_ACCM'</span>, <span class="number">3728764800</span>)]+X[(<span class="string">'MTH_PREM_ACCM'</span>, <span class="number">3728764800</span>)]</span><br><span class="line">    X[<span class="string">'WEALTH_ACCM_2'</span>] = X[(<span class="string">'MOTH_CR_ACCM'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'NVTA_MOTH_ACCM'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'MTH_ARG_ACCM'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'MTH_ARG_BAL_ACCM'</span>, <span class="number">3731443200</span>)]+X[(<span class="string">'MTH_PREM_ACCM'</span>, <span class="number">3731443200</span>)]</span><br><span class="line">    X[<span class="string">'WEALTH_ACCM_3'</span>] = X[(<span class="string">'MOTH_CR_ACCM'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'NVTA_MOTH_ACCM'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'FUND_BAL_MOTH_BAL_ACCM'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'MTH_ARG_ACCM'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'MTH_ARG_BAL_ACCM'</span>, <span class="number">3734035200</span>)]+X[(<span class="string">'MTH_PREM_ACCM'</span>, <span class="number">3734035200</span>)]</span><br><span class="line">    </span><br><span class="line">    X2 = X[[<span class="string">'CUST_NO'</span>,<span class="string">'WEALTH_BAL_1'</span>,<span class="string">'WEALTH_BAL_2'</span>,<span class="string">'WEALTH_BAL_3'</span>,<span class="string">'WEALTH_ACCM_1'</span>,<span class="string">'WEALTH_ACCM_2'</span>,<span class="string">'WEALTH_ACCM_3'</span>]].set_index(<span class="string">'CUST_NO'</span>)</span><br><span class="line">    </span><br><span class="line">    X2[<span class="string">'WEALTH_BAL_MAX'</span>] = X2[[<span class="string">'WEALTH_BAL_1'</span>,<span class="string">'WEALTH_BAL_2'</span>,<span class="string">'WEALTH_BAL_3'</span>]].max(axis=<span class="number">1</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_BAL_MEAN'</span>] = X2[[<span class="string">'WEALTH_BAL_1'</span>,<span class="string">'WEALTH_BAL_2'</span>,<span class="string">'WEALTH_BAL_3'</span>]].mean(axis=<span class="number">1</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_BAL_STD'</span>] = X2[[<span class="string">'WEALTH_BAL_1'</span>,<span class="string">'WEALTH_BAL_2'</span>,<span class="string">'WEALTH_BAL_3'</span>]].std(axis=<span class="number">1</span>).fillna(<span class="number">0.0</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_BAL_CV'</span>] = X2[<span class="string">'WEALTH_BAL_STD'</span>]/X2[<span class="string">'WEALTH_BAL_MEAN'</span>]</span><br><span class="line">    X2[<span class="string">'WEALTH_ACCM_MAX'</span>] = X2[[<span class="string">'WEALTH_ACCM_1'</span>,<span class="string">'WEALTH_ACCM_2'</span>,<span class="string">'WEALTH_ACCM_3'</span>]].max(axis=<span class="number">1</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_ACCM_MEAN'</span>] = X2[[<span class="string">'WEALTH_ACCM_1'</span>,<span class="string">'WEALTH_ACCM_2'</span>,<span class="string">'WEALTH_ACCM_3'</span>]].mean(axis=<span class="number">1</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_ACCM_STD'</span>] = X2[[<span class="string">'WEALTH_ACCM_1'</span>,<span class="string">'WEALTH_ACCM_2'</span>,<span class="string">'WEALTH_ACCM_3'</span>]].std(axis=<span class="number">1</span>).fillna(<span class="number">0.0</span>)</span><br><span class="line">    X2[<span class="string">'WEALTH_ACCM_CV'</span>] = X2[<span class="string">'WEALTH_ACCM_STD'</span>]/X2[<span class="string">'WEALTH_ACCM_MEAN'</span>]    </span><br><span class="line">    </span><br><span class="line">    X3 = X2.fillna(<span class="number">0.0</span>).drop([<span class="string">'WEALTH_BAL_1'</span>,<span class="string">'WEALTH_BAL_2'</span>,<span class="string">'WEALTH_BAL_3'</span>,<span class="string">'WEALTH_ACCM_1'</span>,<span class="string">'WEALTH_ACCM_2'</span>,<span class="string">'WEALTH_ACCM_3'</span>,<span class="string">'WEALTH_BAL_STD'</span>,<span class="string">'WEALTH_ACCM_STD'</span>],axis=<span class="number">1</span>).reset_index()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> X3[[<span class="string">'CUST_NO'</span>,<span class="string">'WEALTH_ACCM_MEAN'</span>,<span class="string">'WEALTH_ACCM_CV'</span>]]</span><br></pre></td></tr></table></figure><h3 id="结果挖掘"><a href="#结果挖掘" class="headerlink" title="结果挖掘"></a>结果挖掘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_cust_result_1 = train_cust_result[train_cust_result[<span class="string">'FLAG'</span>]==<span class="number">1</span>]</span><br><span class="line">train_cust_result_0 = train_cust_result[train_cust_result[<span class="string">'FLAG'</span>]==<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lightgbm <span class="keyword">import</span> LGBMRegressor</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! pip install lightgbm<span class="number">-2.2</span><span class="number">.3</span>-py2.py3-none-manylinux1_x86_64.whl</span><br></pre></td></tr></table></figure><pre><code>Processing ./lightgbm-2.2.3-py2.py3-none-manylinux1_x86_64.whlRequirement already satisfied: scikit-learn in /root/anaconda3/lib/python3.6/site-packages (from lightgbm==2.2.3)Requirement already satisfied: scipy in /root/anaconda3/lib/python3.6/site-packages (from lightgbm==2.2.3)Requirement already satisfied: numpy in /root/anaconda3/lib/python3.6/site-packages (from lightgbm==2.2.3)Installing collected packages: lightgbmSuccessfully installed lightgbm-2.2.3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! cp ./xgb_rfm-Copy1.ipynb ./xgb_rfm-Copy2.ipynb</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! pip install imbalanced-learn</span><br></pre></td></tr></table></figure><pre><code>Requirement already satisfied: imbalanced-learn in /root/anaconda3/lib/python3.6/site-packagesRequirement already satisfied: scipy&gt;=0.17 in /root/anaconda3/lib/python3.6/site-packages (from imbalanced-learn)Requirement already satisfied: joblib&gt;=0.11 in /root/anaconda3/lib/python3.6/site-packages (from imbalanced-learn)Requirement already satisfied: scikit-learn&gt;=0.21 in /root/anaconda3/lib/python3.6/site-packages (from imbalanced-learn)Requirement already satisfied: numpy&gt;=1.11 in /root/anaconda3/lib/python3.6/site-packages (from imbalanced-learn)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;もう一回もう一回行こうぜ 僕らの声&lt;/p&gt;
&lt;p&gt;アイムアルーザー ずっと前から聞こえてた&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://www.leezy.top/tags/Python/"/>
    
      <category term="数据挖掘" scheme="https://www.leezy.top/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装MySQL 8.0</title>
    <link href="https://www.leezy.top/2019/02/27/CentOS%E5%AE%89%E8%A3%85MySQL8/"/>
    <id>https://www.leezy.top/2019/02/27/CentOS安装MySQL8/</id>
    <published>2019-02-27T08:22:21.000Z</published>
    <updated>2020-11-28T08:46:52.497Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS MySQL的安装和配置记录。</p><a id="more"></a><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol><li><p>打开官网  <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a> 下载(mysql80-community-release-el7-2.noarch.rpm)rpm文件</p></li><li><p>通过 WinSCP将文件上传至 /usr/ 目录下</p></li><li><p>本地安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看MySQL 的所有版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>默认会下载最新的版本，可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --disable mysql80-community</span><br><span class="line">sudo yum-config-manager --enable mysql57-community</span><br></pre></td></tr></table></figure></li></ol><p>来调整默认版本， 也可以通过修改 /etc/yum.repos.d/mysql-community.repo 中enabled的值(1 或 0)来进行修改。<br>6. 安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><ol start="7"><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure></li><li><p>用临时密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> sudo grep 'temporary password' /var/log/mysqld.log</span><br><span class="line"> mysql -uroot -p</span><br><span class="line"><span class="meta"> #</span> 修改密码</span><br><span class="line"> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';</span><br><span class="line"><span class="meta">#</span> 查看MySQL版本</span><br><span class="line"> SHOW VARIABLES WHERE Variable_name = 'version';</span><br></pre></td></tr></table></figure></li><li><p>允许远程连接MySQL数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 首先确保3306端口开放</span><br><span class="line">user mysql</span><br><span class="line"><span class="meta">#</span> 创建用户</span><br><span class="line">CREATE USER 'myuser'@'%' IDENTIFIED BY 'password';  (myuser 和 password 替换)</span><br><span class="line">GRANT ALL ON *.* TO 'myuser'@'%' WITH GRANT OPTION; (myuser 替换)</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS MySQL的安装和配置记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://www.leezy.top/tags/Linux/"/>
    
      <category term="MySQL" scheme="https://www.leezy.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Shiro 安全框架学习笔记</title>
    <link href="https://www.leezy.top/2019/02/26/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.leezy.top/2019/02/26/Shiro安全框架简介/</id>
    <published>2019-02-26T13:41:21.000Z</published>
    <updated>2020-11-28T08:46:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>记录我学习安全框架Shiro的一些笔记。</p><a id="more"></a><h3 id="Shiro-VS-Spring-Security"><a href="#Shiro-VS-Spring-Security" class="headerlink" title="Shiro VS Spring Security"></a>Shiro VS Spring Security</h3><p>Apache Shiro<br>简单灵活，可脱离Spring，粒度较粗；可以自己拓展，适合通过资源进行权限控制；<br>Spring Security<br>复杂笨重，不可脱离Spring，力度更细；适合做数据权限控制；</p><h3 id="Shiro的认证过程"><a href="#Shiro的认证过程" class="headerlink" title="Shiro的认证过程"></a>Shiro的认证过程</h3><ol><li>创建Security Manager</li><li>主体提交认证</li><li>Security Manager认证</li><li>Authenticator认证</li><li>Realm认证</li></ol><p>代码如下：<br>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">simpleAccountRealm.addAccount(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"><span class="comment">// 将SimpleAccountRealm设置到环境变量中来</span></span><br><span class="line">defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line">subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">subject.logout();</span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leezy.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shirotest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>shirotest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>/.</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shiro授权"><a href="#Shiro授权" class="headerlink" title="Shiro授权"></a>Shiro授权</h3><ol><li>创建 Security Manager</li><li>主体授权</li><li>Security Manager 授权</li><li>Authorizer认证</li><li>Realm 获取角色权限数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">simpleAccountRealm.addAccount(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>, <span class="string">"admin"</span>, <span class="string">"user"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"><span class="comment">// 将SimpleAccountRealm设置到环境变量中来</span></span><br><span class="line">defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line">subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查一个角色</span></span><br><span class="line"><span class="comment">// subject.checkRole("admin");</span></span><br><span class="line"><span class="comment">// 检查是否具备参数里所有的角色，通过遍历参数来进行授权</span></span><br><span class="line">subject.checkRoles(<span class="string">"admin"</span>, <span class="string">"user"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="InitRealm的使用"><a href="#InitRealm的使用" class="headerlink" title="InitRealm的使用"></a>InitRealm的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">IniRealm iniRealm = <span class="keyword">new</span> IniRealm(<span class="string">"classpath:user.ini"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">defaultSecurityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">subject.checkRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">subject.checkPermission(<span class="string">"user:delete"</span>);</span><br><span class="line">subject.checkPermission(<span class="string">"user:update"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">LEEZY</span>=<span class="number">123456</span>,admin</span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span>=user:delete,user:update</span><br></pre></td></tr></table></figure><h3 id="JDBCRealm的使用"><a href="#JDBCRealm的使用" class="headerlink" title="JDBCRealm的使用"></a>JDBCRealm的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.jdbc.JdbcRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://192.168.56.101:3306/test"</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"Zdh!123456"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">JdbcRealm jdbcRealm = <span class="keyword">new</span> JdbcRealm();</span><br><span class="line">jdbcRealm.setDataSource(dataSource);</span><br><span class="line"><span class="comment">// 开启后才可以进行权限认证(默认关闭)</span></span><br><span class="line">jdbcRealm.setPermissionsLookupEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">String select_sql = <span class="string">"select password from test_user where username = ?"</span>;</span><br><span class="line">jdbcRealm.setAuthenticationQuery(select_sql);</span><br><span class="line"></span><br><span class="line">String role_sql = <span class="string">"select role_name from test_user_role where user_name = ?"</span>;</span><br><span class="line">jdbcRealm.setUserRolesQuery(role_sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">defaultSecurityManager.setRealm(jdbcRealm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"SAKURA"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">subject.checkRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">subject.checkPermission(<span class="string">"user:select"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL驱动包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看JdbcRealm源码可以发现，它有默认的SQL查询语句，只要建立相应的数据表就可以。</p><h3 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p>自定义Realm继承AuthorizingRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">Map&lt;String, String&gt; userMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">userMap.put(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="keyword">super</span>.setName(<span class="string">"CustomRealm"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 授权</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">String username = (String) principals.getPrimaryPrincipal();</span><br><span class="line"><span class="comment">// 从数据库或者缓存中获取角色数据</span></span><br><span class="line">Set&lt;String&gt; roles = getRolesByUserName(username);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissions = getPermissionsByUserName(username);</span><br><span class="line">SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">info.setRoles(roles);</span><br><span class="line">info.setStringPermissions(permissions);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 从主体传过来的认证信息中获得用户名</span></span><br><span class="line">String username = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过用户名到数据库中获取凭证</span></span><br><span class="line">String password = getPasswordByUserName(username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(password == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">"LEEZY"</span>, password, <span class="string">"CustomRealm"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> authenticationInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库中权限查询</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getPermissionsByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">sets.add(<span class="string">"user:delete"</span>);</span><br><span class="line">sets.add(<span class="string">"user:add"</span>);</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库中角色查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getRolesByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">sets.add(<span class="string">"admin"</span>);</span><br><span class="line">sets.add(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库的查询凭证</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPasswordByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMap.get(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.shiro.realm.CustomRealm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CustomRealm customRealm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">defaultSecurityManager.setRealm(customRealm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">subject.checkRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">subject.checkPermission(<span class="string">"user:delete"</span>);</span><br><span class="line">subject.checkPermission(<span class="string">"user:add"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro加密"><a href="#Shiro加密" class="headerlink" title="Shiro加密"></a>Shiro加密</h3><p>Shiro加密方式：</p><ol><li>HashedCredentialsMatcher</li><li>自定义Realm中使用散列</li><li>盐的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">Map&lt;String, String&gt; userMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 使用加密之后的密文</span></span><br><span class="line">userMap.put(<span class="string">"LEEZY"</span>, <span class="string">"e43a7da8514a1c9d566164b3ea731a4a"</span>);</span><br><span class="line"><span class="keyword">super</span>.setName(<span class="string">"CustomRealm"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 授权</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">String username = (String) principals.getPrimaryPrincipal();</span><br><span class="line"><span class="comment">// 从数据库或者缓存中获取角色数据</span></span><br><span class="line">Set&lt;String&gt; roles = getRolesByUserName(username);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; permissions = getPermissionsByUserName(username);</span><br><span class="line">SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">info.setRoles(roles);</span><br><span class="line">info.setStringPermissions(permissions);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 从主体传过来的认证信息中获得用户名</span></span><br><span class="line">String username = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过用户名到数据库中获取凭证</span></span><br><span class="line">String password = getPasswordByUserName(username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(password == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">"LEEZY"</span>, password, <span class="string">"CustomRealm"</span>);</span><br><span class="line"><span class="comment">// 将盐设置进去</span></span><br><span class="line">authenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(<span class="string">"SAKURA"</span>));</span><br><span class="line"><span class="keyword">return</span> authenticationInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库中权限查询</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getPermissionsByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">sets.add(<span class="string">"user:delete"</span>);</span><br><span class="line">sets.add(<span class="string">"user:add"</span>);</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库中角色查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getRolesByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">sets.add(<span class="string">"admin"</span>);</span><br><span class="line">sets.add(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟数据库的查询凭证</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPasswordByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMap.get(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// MD5 + 加盐</span></span><br><span class="line">Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(<span class="string">"123456"</span>, <span class="string">"SAKURA"</span>);</span><br><span class="line">System.out.println(md5Hash.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.shiro.shirotest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.shiro.realm.CustomRealm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CustomRealm customRealm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line"><span class="comment">// 1. 构建SecurityManager环境</span></span><br><span class="line">DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">defaultSecurityManager.setRealm(customRealm);</span><br><span class="line"></span><br><span class="line">HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line"><span class="comment">// 设置加密方式</span></span><br><span class="line">matcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line"><span class="comment">// 设置加密次数</span></span><br><span class="line">matcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">customRealm.setCredentialsMatcher(matcher);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 主体提交认证请求</span></span><br><span class="line">SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"LEEZY"</span>, <span class="string">"123456"</span>);</span><br><span class="line">subject.login(token);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"isAuthenticated: "</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">subject.checkRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">subject.checkPermission(<span class="string">"user:delete"</span>);</span><br><span class="line">subject.checkPermission(<span class="string">"user:add"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro集成Spring"><a href="#Shiro集成Spring" class="headerlink" title="Shiro集成Spring"></a>Shiro集成Spring</h3><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录我学习安全框架Shiro的一些笔记。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SHIRO" scheme="https://www.leezy.top/tags/SHIRO/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="https://www.leezy.top/2019/02/03/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://www.leezy.top/2019/02/03/Linux常用命令总结/</id>
    <published>2019-02-03T06:27:03.000Z</published>
    <updated>2020-11-28T08:46:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>常用的CentOS及Ubuntu命令总结，方便查看与记忆。</p><a id="more"></a><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>(1)查看DNS记录的命令（A记录、MX记录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install bind-utils</span><br><span class="line"></span><br><span class="line">dig +noall +answer www.leezy.top</span><br></pre></td></tr></table></figure><p>(2) 查看端口常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp|grep 80</span><br></pre></td></tr></table></figure><p>(3) 查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/*centos*</span><br><span class="line">cat /etc/centos-release</span><br></pre></td></tr></table></figure><p>(4) 查看内核<br>经常在执行 yum udpate 命令后CentOS会出现多个启动项，所以我们经常要删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看当前系统正在使用的内核版本</span><br><span class="line">uname -a</span><br><span class="line"><span class="meta">#</span> 查看当前系统的全部Kernel</span><br><span class="line">rpm -q kernel</span><br><span class="line"><span class="meta">#</span> 删除多余的内核启动项</span><br><span class="line">yum remove kernel-3.10.0-957.el7.x86_64</span><br><span class="line"><span class="meta">#</span> 重新启动</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>(5) 修改主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname NAME</span><br><span class="line"><span class="meta">#</span> 重启机器</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="CentOS-Minimal版本配置"><a href="#CentOS-Minimal版本配置" class="headerlink" title="CentOS Minimal版本配置"></a>CentOS Minimal版本配置</h2><h3 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h3><p><a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/centos.html</a></p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br><span class="line">yum install wget</span><br><span class="line">yum install vim</span><br></pre></td></tr></table></figure><h3 id="配置JAVA环境变量"><a href="#配置JAVA环境变量" class="headerlink" title="配置JAVA环境变量"></a>配置JAVA环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在文件末尾添加环境配置</span><br><span class="line">export JAVA_HOME=/usr/jdk-11.0.2</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"><span class="meta">#</span> 使新的环境生效</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 当Java版本更新时，仅仅修改JAVA_HOME的路径是不够的，需要删除链接</span><br><span class="line">which java</span><br><span class="line">/usr/jdk_xxx/bin/java</span><br><span class="line"></span><br><span class="line">which javac </span><br><span class="line">/usr/jdk_xxx_/bin/javac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除链接</span><br><span class="line">rm -rf /usr/jdk_xxx/bin/java</span><br><span class="line">rm -rf /usr/jdk_xxx_/bin/javac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 再执行使得新环境生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="GitLab-CE版安装"><a href="#GitLab-CE版安装" class="headerlink" title="GitLab CE版安装"></a>GitLab CE版安装</h3><p>新建 /etc/yum.repos.d/gitlab-ce.repo，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>再执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install curl openssh-server openssh-clients postfix cronie</span><br><span class="line">sudo service postfix start</span><br><span class="line">systemctl enable postfix.service</span><br><span class="line">(yum install lokkit)</span><br><span class="line">sudo lokkit -s http -s ssh</span><br><span class="line"></span><br><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-ce</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>启动GitLab</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="常用的网络配置"><a href="#常用的网络配置" class="headerlink" title="常用的网络配置"></a>常用的网络配置</h3><p>修改DNS(貌似会重启失效)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>修改IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure><h3 id="清理内存"><a href="#清理内存" class="headerlink" title="清理内存"></a>清理内存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看内存使用情况</span><br><span class="line">free -h</span><br></pre></td></tr></table></figure><h3 id="Docker安装及配置"><a href="#Docker安装及配置" class="headerlink" title="Docker安装及配置"></a>Docker安装及配置</h3><p>Docker官方文档访问<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-repository" target="_blank" rel="noopener">这里</a></p><p>阿里云安装文档<a href="https://yq.aliyun.com/articles/110806?spm=5176.8351553.0.0.4ef81991AdnpKb" target="_blank" rel="noopener">这里</a><br>Docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 仅公网环境，使用官方安装脚本</span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>由于直接使用DockerHub下载的速度很慢，所以可以使用阿里云的容器镜像加速服务,阿里云配置地址访问网址<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">这里</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["加速器地址"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>这样就可以快速的使用Docker pull 等命令了。<br>清理Dcoker 容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure><h3 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有开放的端口</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="meta">#</span> --permanent 永久生效</span><br><span class="line">firewall-cmd --zone=public --add-port=9092/tcp --permanent</span><br><span class="line"><span class="meta">#</span> 重新载入</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span> 查看</span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="meta">#</span> 删除</span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="Putty连接Ubuntu虚拟机"><a href="#Putty连接Ubuntu虚拟机" class="headerlink" title="Putty连接Ubuntu虚拟机"></a>Putty连接Ubuntu虚拟机</h3><blockquote><p>首先确保自己有root权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置root密码</span><br><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><ol><li><p>首先配置Host-Only网卡，然后点击<br><img src="/assets/blogImg/VirtualBox_NetWork.png" alt="VirtualBox 配置"><br><img src="/assets/blogImg/VirtualBox_Host_Only.png" alt="VirtualBox Host Only 配置">  </p></li><li><p>登入虚拟机使用<code>ifconfig -a</code>命令, 发现会有三个网卡(lo-本地、enp0s3-NET、enp0s8-Host-Only), 但是Host-Only没有IP地址</p></li><li><p>输入<code>sudo dhclient enp0s8</code>, 即可获取IP地址</p></li><li><p>Ubuntu 18.0新版后, <code>/etc/network/interfaces</code>的文件配置已经被弃用, <code>vim /etc/netplan/50-cloud-init.yaml</code></p></li></ol><p>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        enp0s3:</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        enp0s8:</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.56.101/24]</span></span><br><span class="line"><span class="attr">            nameservers:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">            optional:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br><span class="line"><span class="string">~</span></span><br></pre></td></tr></table></figure><p>修改完以后直接执行 <code>sudo netplan apply</code></p><ol start="5"><li>重启ssh服务 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux运维常用命令"><a href="#Linux运维常用命令" class="headerlink" title="Linux运维常用命令"></a>Linux运维常用命令</h3><ul><li><p>Linux文件管理<br>df 检查文件系统的磁盘空间占用情况，删除的文件但是还有程序在使用的时候会进行显示。这个命令会比<code>du</code>命令大。<br>du 对文件和目录磁盘使用的空间查看，不包含已经删除的文件，命令执行结果小于或等于<code>df</code>。<br>常用的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 以GB MB KB的格式查看文件</span><br><span class="line">df -h</span><br><span class="line"><span class="meta">#</span> 查看文件节点数</span><br><span class="line">df -i</span><br></pre></td></tr></table></figure></li><li><p>Linux文件压缩与解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 文件压缩 tar -zcvf &lt;压缩包名称&gt; &lt;要压缩的文件路径或者文件名&gt;</span><br><span class="line">tar -zcvf my.tar.gz my.txt</span><br><span class="line"><span class="meta">#</span> 文件解压</span><br><span class="line">tar -xzvf my.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>xargs 将命令输出的结果作为一个参数传递给另一个命令</p></li></ul><p>找出/目录下以.conf结尾的文件，并进行文件分类。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name *.conf -type f -print | xargs file</span><br></pre></td></tr></table></figure><ul><li>命令或者脚本后台运行<br>数据库的导入导出操作，耗时较久。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mysqldump -uroot -pXXX --all-databases &gt; ./alldatabases.sql &amp;</span><br></pre></td></tr></table></figure></li></ul><p>命令后台执行的结果会在命令执行的当前目录下留下一个nohup.out文件，查看这个文件就可以知道命令有没有执行报错等信息。</p><ul><li>找出当前系统资源使用量较高的进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 内存使用量前3</span><br><span class="line">ps -ef | sort -rnk 4 | head -3</span><br><span class="line"><span class="meta">#</span> CPU使用量前3</span><br><span class="line">ps -ef | sort -rnk 3 | head -3</span><br></pre></td></tr></table></figure><ul><li><p>VIM 使用技巧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示当前行数</span><br><span class="line">:set nu</span><br><span class="line"><span class="meta">#</span> 跳到指定行 - 80</span><br><span class="line">:80gg</span><br><span class="line">:80G</span><br><span class="line"><span class="meta">#</span> 第一行</span><br><span class="line">:gg</span><br><span class="line"><span class="meta">#</span> 最后一行</span><br><span class="line">:G</span><br></pre></td></tr></table></figure></li><li><p>wc 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 统计文件的 行数，单词数，字节数</span><br><span class="line">wc &lt;file&gt;</span><br><span class="line"><span class="meta">#</span> 统计行数</span><br><span class="line">wc -l &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>sh -c<br>它可以让 bash 将一个字串作为完整的命令来执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c</span><br></pre></td></tr></table></figure></li><li><p>netstat命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看指定端口占用情况</span><br><span class="line">netstat -anp | grep -i "8080"</span><br></pre></td></tr></table></figure><ul><li>curl用法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-X 指定请求方法</span><br><span class="line">-x 指定HTTP请求的代理</span><br><span class="line">-H 指定请求标头</span><br><span class="line">-d 发送POST请求提交的数据，使用-d参数后，会自动将请求转为POST，HTTP请求会自动加上标头Content-Type:application/x-www-form-urlencoded，可省略-X POST</span><br><span class="line">-v 显示http通信的整个过程</span><br><span class="line">-u 设置服务器认证的用户名和密码</span><br><span class="line"></span><br><span class="line">-i 显示Response头信息，并打印源码</span><br><span class="line">-I 显示Response头信息，不打印源码</span><br><span class="line"></span><br><span class="line">-s 不输出错误和进度信息</span><br><span class="line">-S 指定只输出错误信息</span><br><span class="line"></span><br><span class="line">-L 自动跳转，curl默认不跟随跳转</span><br><span class="line">-k 跳过SSL检测</span><br><span class="line"></span><br><span class="line">-o 文件名 保存</span><br><span class="line">-O 将URL的最后部分当作文件名保存</span><br></pre></td></tr></table></figure><ul><li>grep 命令</li></ul><p>-i 忽略大小写<br>-n 显示结果所在行号<br>-v 反向查询<br>-e 多个选项匹配<br>-w 匹配整个单词，如果字符串中包含整个单词，并不匹配<br>-E 对应正则表达式，也可以实现或的操作<br>-a 让二进制文件等价于文本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 多个 -e 实现or的操作</span><br><span class="line">grep -e true -e false test.txt</span><br><span class="line"><span class="meta">#</span> &lt;/dev/tcp/ip/7550是判断ip在7550端口的连通性，将结果输出到/dev/null这个黑洞，然后错误信息也输出到这里</span><br><span class="line"><span class="meta">#</span> 在Linux中0表示标准输入，1表示标准输出，2表示标准错误</span><br><span class="line">sh -c "&lt;/dev/tcp/$local_ip/7550" &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">grep -a '^uyun.baseurl='</span><br></pre></td></tr></table></figure><ul><li><p>curl 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 判定指定url的连通性</span><br><span class="line">curl -v </span><br><span class="line"><span class="meta">#</span> 当发生错误的时候返回错误信息</span><br><span class="line">curl -sS</span><br></pre></td></tr></table></figure></li><li><p>sed 命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将test.txt的false改为true</span><br><span class="line">sed -i `s/false/true/g` test.txt</span><br></pre></td></tr></table></figure><ul><li><p>Linux查看CPU、内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看总内存</span><br><span class="line">cat /proc/meminfo | gerp MemTotal</span><br><span class="line"><span class="meta">#</span> 查看CPU核数</span><br><span class="line">grep 'physical id' /proc/cpuinfo | sort | uniq | wc -l</span><br><span class="line"><span class="meta">#</span> 查看CPU的型号 - uniq -c 统计出现的次数</span><br><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br></pre></td></tr></table></figure></li><li><p>awk 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 根据分隔符查找内容</span><br><span class="line">awk -F '=' '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的CentOS及Ubuntu命令总结，方便查看与记忆。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://www.leezy.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>《重新定义SpringCloud实战》读书笔记</title>
    <link href="https://www.leezy.top/2018/12/18/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.leezy.top/2018/12/18/SpringCloud学习/</id>
    <published>2018-12-18T00:45:23.000Z</published>
    <updated>2020-11-28T08:46:52.503Z</updated>
    
    <content type="html"><![CDATA[<p>SpringCloud提供了快速构建分布式中常见模式的工具，包括配置管理、服务发现、断路器、智能路由、微代理、控制总线等。SpringCloud中间件是基于SpringBoot的实现，提供了对微服务完整的一套解决方案。</p><a id="more"></a><p>应用架构的发展历程：<br>单体应用架构 –&gt; 分布式架构 –&gt;面向服务的SOA架构 –&gt; 微服务架构<br>SOA架构个人理解是多个应用之间通过企业数据总线ESB通信的架构，其应用程序通过网络协议提供服务，消费服务，不同业务提供不同的服务。(阿里的服务治理框架Dubbo)<br>微服务架构：一个大型的应用拆分为多个相互独立的微服务，每个服务之间松耦合，通过REST API或者HTTP进行通信。</p><p><img src="/assets/blogImg/SOA_VS_%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="SOA VS MA"></p><p>SpringCloud包包含以下组件：<br>服务治理组件 Eureka / Consul + 客户端负载均衡组件 Ribbon + 声明式服务调用组件 Feign + API网关治理组件 Zuul / GateWay(高并发) + 熔断机制 HyStrix + 分布式配置中心组件 Spring Cloud Config / 携程 Apollo + 消息总线组件 Bus + 消息驱动组件 Stream + 分布式服务跟踪组件 Sleuth + 全链路监控 SkyWalking.</p><hr><p><em>Tips: 代码基于Spring Cloud Finchley 版本</em></p><hr><h2 id="服务治理：Spring-Cloud-Eureka"><a href="#服务治理：Spring-Cloud-Eureka" class="headerlink" title="服务治理：Spring Cloud Eureka"></a>服务治理：Spring Cloud Eureka</h2><p>负责微服务架构中的服务治理功能，即各个微服务实例的自动化注册与发现。<br>SpringCloud Eureka 是由 Netflix Eureka实现的，即包含了服务端组件也包含了客户端组件。<br>Eureka服务端也被称为服务注册中心，各个微服务启动时会向Eureka Server 注册自己的信息。代码如下：<br>在<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 中新建一个Eureka Server的Demo，或者直接在Maven项目中的pom.xml文件中添加如下Dependence:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EurekaServerApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.eureka_server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//该注解启动一个服务注册中心提供给其他应用会话</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Eureka Server!"</span>);</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Eureka Server 中的 application.yml 和 application-standalone.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">standalone</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="attr">    serialization:</span></span><br><span class="line"><span class="attr">      FAIL_ON_EMPTY_BEANS:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    use-read-only-response-cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    response-cache-auto-expiration-in-seconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-standalone.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到Eureka Server, 默认为True</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span> <span class="comment">#是否需要从Eureka Server获取注册信息, 默认为Ture</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 查询服务和注册服务的地址，多个用","隔开</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">      waitTimeInMsWhenSyncEmpty:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      enableSelfPreservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到Eureka的控制面板。<br>Eureka服务注册端， Eureka Client将微服务注册到Eureka Server上。<br>EurekaClientApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.eureka_client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 该注解适配性比较好，可以用于多种服务发现组件(Zookeeper、Consul)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Eureka Client!"</span>);</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Eureka Client的配置文件： application.yml 和 application-demo.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">demo</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application-demo.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo-leezy</span> <span class="comment">#声明服务提供者的应用名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span> <span class="comment">#设置与Eureka Server交互的地址</span></span><br><span class="line"><span class="attr">    instance:</span> </span><br><span class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>刷新Eureka控制台就可以看到注册到Server上的服务了。</p><p>Eureka的设计理念：</p><ol><li>服务实例如何注册到服务中心：<br>（1）调用Eureka Server的REST API 的 register方法<br>（2）Java语言使用者可以调用NetFlix的Eureka Client封装的API<br>（3）Spring Cloud使用者在pom.xml文件中引用 spring-cloud-starter-netflix-eureka-client，基于Spring Boot的自动配置即可。</li><li>服务实例从服务中心剔除<br>（1）服务实例正常关闭时，通过钩子方法或者生命周期回调方法调用Eureka Server 的REST API的de-register方法。<br>（2）Eureka要求Client定时续约(30s)，如果90s没有续约操作则Eureka Server主动剔除该操作。</li><li>服务实例信息的一致性问题<br>服务注册与发现中心应该也是一个集群，如何保证一致性<br>（1）AP优于CP (Zookeeper-CP, Eureka-AP)<br>（2）Peer to Peer架构(1. 主从复制 2. 对等复制)<br>（3）Zone及Region设计<br>（4）SELF PRESERVATION设计</li></ol><h2 id="WebService客户端-Feign"><a href="#WebService客户端-Feign" class="headerlink" title="WebService客户端 Feign"></a>WebService客户端 Feign</h2><p>Feign是一个声明式的Web Service客户端，用于服务与服务之间的调用，支持SpringMVC注解，整合了Ribbon以及Hystrix。<br>对应的POM依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用入口程序SpringCloudFeignApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hello_feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignApplication</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类：HelloFeignService.java，作用是应用指定的URL最终转化为Github API允许的URL。<br>eg：<a href="https://api.github.com/search/repositories?q=spring-cloud" target="_blank" rel="noopener">https://api.github.com/search/repositories?q=spring-cloud</a><br>(Github RestAPI的文档：<a href="https://developer.github.com/v3/search/" target="_blank" rel="noopener">https://developer.github.com/v3/search/</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hello_feign.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.hello_feign.config.HelloFeignServiceConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"github-client"</span>, url = <span class="string">"https://api.github.com"</span>, configuration = HelloFeignServiceConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/repositories"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">searchRepo</span><span class="params">(@RequestParam(name = <span class="string">"q"</span>)</span> String quertStr)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制类：HelloFeignController.java，作用：调用服务提供者的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hello_feign.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.hello_feign.service.HelloFeignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloFeignService helloFeignService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/search/github"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">searchGithubRepoByStr</span><span class="params">(@RequestParam(<span class="string">"str"</span>)</span> String queryStr) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloFeignService.searchRepo(queryStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类：HelloFeignServiceConfig.java，@Bean注解配置日志的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hello_feign.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//level有四个级别</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件: application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Hello</span> <span class="string">Feign</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.leezy.hello_feign.service.HelloFeignService:</span> <span class="string">DEBUG</span> <span class="comment">#在这里配置日志的输出级别</span></span><br></pre></td></tr></table></figure><p>启动应用后，访问网址：<a href="http://localhost:8010/search/github?str=spring-cloud" target="_blank" rel="noopener">http://localhost:8010/search/github?str=spring-cloud</a><br>Feign支持的属性文件配置方式有两种：<br>application.yml(application.properties) 以及 Java方式的配置类，但是配置文件的优先级会高于Java类的优先级。<br>Feign默认的是JDK原生的URL Connection，并没有使用连接池，可以用Http Client和 okHttp进行替换对项目进行调优。</p><h3 id="Feign-的-POST-和-GET-的多参数传递"><a href="#Feign-的-POST-和-GET-的多参数传递" class="headerlink" title="Feign 的 POST 和 GET 的多参数传递"></a>Feign 的 POST 和 GET 的多参数传递</h3><p>Feign拦截器，将Json转化为Map。<br>实现Feign的RequestInterceptor中的apply方法来进行统一拦截转换处理Feign中的GET方法多参数传递问题。集成Swapper，编写服务消费者用于调用Feign进行Get或Post多参数传递。</p><h2 id="负载均衡组件-Ribbon"><a href="#负载均衡组件-Ribbon" class="headerlink" title="负载均衡组件 Ribbon"></a>负载均衡组件 Ribbon</h2><p>Feign中集成了Ribbon，但是Ribbon可以单独使用，它是一种进程内负载均衡器（客户端负载均衡），它赋予了应用支配Http和Tcp的能力。<br>负载均衡策略：最常用的是RoundRobinRule 轮询策略<br>代码样例：<br>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类：RibbonLoadbalancerApplication.java<br>注入一个RestTemplate的Bean，并且使用@LoadBalances注解才能使其具备负载均衡的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.springcloud.book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonLoadbalancerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RibbonLoadbalancerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestController.java<br>Ribbon客户端需要创建一个API来调用Eureka源服务自定义的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">String result = restTemplate</span><br><span class="line">.getForObject(<span class="string">"http://CLIENT-A/add?a="</span> + a + <span class="string">"&amp;b="</span> + b, String.class);</span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查找继承关系，发现接口ILoadBalancer的实现抽象类AbstractLoadBalancer的实现类BaseLoadBalancer中的chooseServer方法是真正实现负载均衡的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get the alive server dedicated to key</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return the dedicated server</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">chooseServer</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (counter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        counter = createCounter();</span><br><span class="line">    &#125;</span><br><span class="line">    counter.increment();</span><br><span class="line">    <span class="keyword">if</span> (rule == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rule.choose(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">"LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;"</span>, name, key, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="熔断机制-Spring-Cloud-Hystrix"><a href="#熔断机制-Spring-Cloud-Hystrix" class="headerlink" title="熔断机制 Spring Cloud Hystrix"></a>熔断机制 Spring Cloud Hystrix</h2><p>Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.<br>Hystrix的设计目标是：</p><ol><li>通过客户端对延迟和故障进行保护和控制</li><li>在一个复杂的分布式系统中停止级联故障</li><li>快速失败和迅速恢复</li><li>在合理的情况下回退和优雅地降级</li><li>开启实时监控、告警和操作控制<br>pom.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leezy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>ClientApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hystrix.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.hystrix.service.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@RequestParam String username)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hystrix.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(String username)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leezy.hystrix.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leezy.hystrix.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod=<span class="string">"defaultUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(String username)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">"spring"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is real user."</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultUser</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The User does not exist in the system...Test!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">hystrix-client-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.host:127.0.0.1&#125;:$&#123;eureka.port:8761&#125;/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>打开浏览器访问：<a href="http://localhost:8888/getUser?username=spring" target="_blank" rel="noopener">http://localhost:8888/getUser?username=spring</a> 和 <a href="http://localhost:8888/getUser?username=testERROR" target="_blank" rel="noopener">http://localhost:8888/getUser?username=testERROR</a></p><h3 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h3><p>Hystrix Dashboard仪表盘是根据系统一段时间内发生的请求情况来展示的可视化面板。<br>Hystrix的指标需要端口进行支撑，所以需要增加actuator依赖。<br>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HystrixDashboardApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是单个实例的Hystrix Dashboard,整个系统和集群的情况下并不是特别有用。Turbine就是聚合所有相关Hystrix.stream 流的方案。</p><h2 id="网关治理组件-Zuul"><a href="#网关治理组件-Zuul" class="headerlink" title="网关治理组件 Zuul"></a>网关治理组件 Zuul</h2><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. Zuul是对内部的微服务提供可配置的，对外URL到服务的映射关系，基于JVM的后端路由器。<br>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类ZuulServerApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.host:127.0.0.1&#125;:$&#123;eureka.port:8888&#125;/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    client-a:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/client/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">client-a</span></span><br></pre></td></tr></table></figure><p>最后五行的代码表示，Zuul组件的端口为portA，则将/client开头的URL映射搭配client-a这个服务中去，即实际访问portB。<br>/<em>* 匹配任意数量的路径和字符<br>/</em> 匹配任意数量的字符<br>/? 匹配单个字符</p><h3 id="Spring-Cloud-Zuul-Filter链"><a href="#Spring-Cloud-Zuul-Filter链" class="headerlink" title="Spring Cloud Zuul Filter链"></a>Spring Cloud Zuul Filter链</h3><p>(1) Filter的类型<br>(2) Filter的执行顺序<br>(3) Filter的执行条件<br>(4) Filter的执行效果<br>Zuul有四种不同生命周期的Filter,分别是：<br>pre Filter 按照规则路由到下级服务之前执行。比如鉴权、限流等<br>route Filter 路由动作的执行者（Apache HttpClient或Netflix Ribbon构建和发送原始Http请求的地方）<br>post Fliter 在源服务返回结果或者异常信息发生后执行的，对返回信息做一些处理<br>error Filter 在整个生命周期内如果发生异常，则会进入error Filter</p><p>Spring Cloud Zuul 权限集成<br>OAuth2.0 + JWT(JSON Web Token)</p><h3 id="动态路由-Dynamic-Routing"><a href="#动态路由-Dynamic-Routing" class="headerlink" title="动态路由 Dynamic Routing"></a>动态路由 Dynamic Routing</h3><p>有两种解决方案：<br>（1） Spring Cloud Config + Bus、动态刷新配置文件。<br>（2） 重写Zuul的配置读取方式</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringCloud提供了快速构建分布式中常见模式的工具，包括配置管理、服务发现、断路器、智能路由、微代理、控制总线等。SpringCloud中间件是基于SpringBoot的实现，提供了对微服务完整的一套解决方案。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SpringCloud" scheme="https://www.leezy.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="https://www.leezy.top/2018/12/11/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.leezy.top/2018/12/11/SpringBoot学习/</id>
    <published>2018-12-11T02:34:25.000Z</published>
    <updated>2020-11-28T08:46:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can run.</p><a id="more"></a><h2 id="1-常见注解"><a href="#1-常见注解" class="headerlink" title="1. 常见注解"></a>1. 常见注解</h2><h3 id="RequestMapping-GetMapping-amp-PostMapping"><a href="#RequestMapping-GetMapping-amp-PostMapping" class="headerlink" title="@RequestMapping (@GetMapping &amp; @PostMapping)"></a>@RequestMapping (@GetMapping &amp; @PostMapping)</h3><p>The @RequestMapping annotation provides “routing” information. It tells Spring that any HTTP request with the / path should be mapped to the home method.<br>@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。<br>@PostMapping是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>The @RestController annotation tells Spring to render the resulting string directly back to the caller.<br>等价于 @Controller + @ResponseBody,为了使Http请求返回数据格式为json格式。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly.</p><h3 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h3><p>可以用来控制配置是否生效。</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>The @SpringBootApplication annotation is often placed on your main class, and it implicitly defines a base “search package” for certain items. same as @Configuration,@EnableAutoConfiguration,@ComponentScan.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>Declare the configuration Classes.</p><h3 id="EnableAutoConfiguration-1"><a href="#EnableAutoConfiguration-1" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>If you find that specific auto-configuration classes that you do not want are being applied, you can use the exclude attribute of @EnableAutoConfiguration to disable them.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EnableConfigurationProperties-和-ConfigurationProperties"><a href="#EnableConfigurationProperties-和-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties 和 @ConfigurationProperties"></a>@EnableConfigurationProperties 和 @ConfigurationProperties</h3><p>这两个注解的作用可以参见 Spring Boot <a href="https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UriConfigurationProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String httpbin = <span class="string">"http://httpbin.org:80"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHttpbin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpbin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttpbin</span><span class="params">(String httpbin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.httpbin = httpbin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spring.cloud.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.spring.cloud.gateway.properties.UriConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@EnableConfigurationProperties(org.spring.cloud.gateway.properties.UriConfigurationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">myRoutes</span><span class="params">(RouteLocatorBuilder builder, UriConfigurationProperties uriConfiguration)</span> </span>&#123;</span><br><span class="line">        String httpUri = uriConfiguration.getHttpbin();</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">            .route(p -&gt; p</span><br><span class="line">                .path(<span class="string">"/get"</span>)</span><br><span class="line">                .filters(f -&gt; f.addRequestHeader(<span class="string">"Hello"</span>, <span class="string">"World"</span>))</span><br><span class="line">                .uri(httpUri))</span><br><span class="line">            .route(p -&gt; p</span><br><span class="line">                .host(<span class="string">"*.hystrix.com"</span>)</span><br><span class="line">                .filters(f -&gt; f</span><br><span class="line">                    .hystrix(config -&gt; config</span><br><span class="line">                        .setName(<span class="string">"mycmd"</span>)</span><br><span class="line">                        .setFallbackUri(<span class="string">"forward:/fallback"</span>)))</span><br><span class="line">                .uri(httpUri))</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两个文件位于两个包下，如果在第一个文件中使用了@Component，则在第二个文件中就不能再使用@EnableConfigurationProperties注解，否则将会报错，提示有两个Bean。<br>如果第一个文件没有使用@Component则第二个文件可以将注释去掉。</p><p><strong>单元测试常用注解</strong></p><h3 id="RunWith-SpringJUnit4ClassRunner-class"><a href="#RunWith-SpringJUnit4ClassRunner-class" class="headerlink" title="@RunWith(SpringJUnit4ClassRunner.class)"></a>@RunWith(SpringJUnit4ClassRunner.class)</h3><p>引入Spring对JUnit4的支持。</p><h3 id="SpringApplicationConfiguration-classes-HelloApplication-class"><a href="#SpringApplicationConfiguration-classes-HelloApplication-class" class="headerlink" title="@SpringApplicationConfiguration(classes = HelloApplication.class)"></a>@SpringApplicationConfiguration(classes = HelloApplication.class)</h3><p>指定SpringBoot的启动类</p><h3 id="WebAppConfiguration"><a href="#WebAppConfiguration" class="headerlink" title="@WebAppConfiguration"></a>@WebAppConfiguration</h3><p>开启Web应用配置，用于模拟ServletContext</p><h3 id="Before-amp-Test-amp-After"><a href="#Before-amp-Test-amp-After" class="headerlink" title="@Before &amp; @Test &amp; @After"></a>@Before &amp; @Test &amp; @After</h3><p>@Before：JUnit中定义在测试用例@Test内容执行前预加载的内容，同理判断。</p><h2 id="2-Starter-POMs"><a href="#2-Starter-POMs" class="headerlink" title="2. Starter POMs"></a>2. Starter POMs</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>命名规则都是spring-boot-starter-<em>，</em>代表一个特别的应用功能模块。</p><h3 id="spring-boot-starter-web"><a href="#spring-boot-starter-web" class="headerlink" title="spring-boot-starter-web"></a>spring-boot-starter-web</h3><p>全栈Web开发模块，包含嵌入式的Tomcat、SpringMVC</p><h3 id="spring-boot-starter-test"><a href="#spring-boot-starter-test" class="headerlink" title="spring-boot-starter-test"></a>spring-boot-starter-test</h3><p>包含Junit、Hamcrest、Mockito</p><h3 id="spring-boot-starter-actuator"><a href="#spring-boot-starter-actuator" class="headerlink" title="spring-boot-starter-actuator"></a>spring-boot-starter-actuator</h3><p>为SpringBoot构建的应用提供一系列用于监控的端点。<br>访问：<a href="http://127.0.0.1:8080/actuator" target="_blank" rel="noopener">http://127.0.0.1:8080/actuator</a><br>可以看到输出了如下JSON文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_links"</span>: &#123;</span><br><span class="line">        <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://127.0.0.1:8080/actuator"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://127.0.0.1:8080/actuator/health"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://127.0.0.1:8080/actuator/health/&#123;component&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component-instance"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://127.0.0.1:8080/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"info"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://127.0.0.1:8080/actuator/info"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot-devtools"><a href="#spring-boot-devtools" class="headerlink" title="spring-boot-devtools"></a>spring-boot-devtools</h3><p>(1) Property Defaults<br>(2) Automatic Restart<br>(3) LiveReload<br>(4) Global Settings<br>(5) Remote Applications</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>SpringBoot的默认配置文件位置是src/main/resources/application.properties.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- application.properties --&gt;</span></span><br><span class="line">book.name=JAVA编程思想</span><br><span class="line">book.author=Bruce Eckel</span><br></pre></td></tr></table></figure><p>应用中可以使用 @Vlaue注解来加载这些自定义的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;book.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@value</span>(<span class="string">"$&#123;book.author&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java代码中引用有以下两种方式：</p><ol><li>PlaceHolder方式 ${…}</li><li>SpEL表达式 #{…}</li></ol><p>通过application-{profile}多环境配置文件：<br>application-dev.properties:开发环境<br>application-test.properties:测试环境<br>application-prod.properties:生产环境<br>在application.properties中的spring.profiles.active属性来设置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 调用测试环境</span><br><span class="line">spring.profiles.active = test;</span><br></pre></td></tr></table></figure><p>在采用java -jar xxx.jar 形式运行项目时，”–”就是对application.properties中的属性值进行赋值的标识。<br>配置文件的优先级顺序如下：<br>命令行输入 &gt; 包外 &gt; 包内<br>所以可以在利用这一点来对配置进行快速准确的更改。</p><h3 id="spring-factories文件"><a href="#spring-factories文件" class="headerlink" title="spring.factories文件"></a>spring.factories文件</h3><p>Spring Factories实现原理(package org.springframework.core.io.support包下的SpringFactoriesLoader.class文件;)<br>Spring 容器初始化时会加载该文件声明的类，我们可以通过@SpringBootApplication-&gt;@EnableAutoConfiguration-&gt;AutoConfigurationImportSelector-&gt;getCandidateConfigurations-&gt;SpringFactoriesLoader<br>spring-core包里定义了SpringFactoriesLoader类，这个类实现了检索META-INF/spring.factories文件，并获取指定接口的配置的功能。在这个类中定义了两个对外的方法：</p><p>loadFactories: 根据接口类获取其实现类的实例，这个方法返回的是对象列表。<br>loadFactoryNames: 根据接口获取其接口类的名称，这个方法返回的是类名的列表。</p><h3 id="bootstrap-yml和appllication-yml的区别"><a href="#bootstrap-yml和appllication-yml的区别" class="headerlink" title="bootstrap.yml和appllication.yml的区别"></a>bootstrap.yml和appllication.yml的区别</h3><p>bootstrap.yml加载（父SpringApplicationContext）顺序在application.yml之前，用于应用程序上下文的引导阶段。用于指定spring.application.name和spring.cloud.config.server.git.uri以及一些加密和解密信息。<br>eg：Spring Cloud Config 配置中心再使用时，通常将访问远程文件配置信息写在bootstrap.yml文件中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot makes it easy to create stand-alone, production-grade Spring-based Applications that you can run.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SpringBoot" scheme="https://www.leezy.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>WebService学习</title>
    <link href="https://www.leezy.top/2018/11/26/WebService%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.leezy.top/2018/11/26/WebService学习/</id>
    <published>2018-11-26T06:34:25.000Z</published>
    <updated>2020-11-28T08:46:52.504Z</updated>
    
    <content type="html"><![CDATA[<p>WebService的两种实现方式，Soap WebService、Restful WebService。</p><a id="more"></a><p>RPC refers to Remote Procedure Call.<br>Use of RPC is recommended when there is heavy use of the client/server model.<br>RPC allows for the processing of multiple threads that share a given address.<br>RPC employed on a platform that uses EJB.<br>Web Service used in non-Java platforms when an app wants access.<br>Web Service also is used for synchronization of asynchronous communication.[1]</p><p>WebService是一种技术，有两种实现方式：JAX-WS(Java API for XML-Based Service面向消息)、JAX-RS(Java API for Restful WebService面向资源)<br>ps. RESTful 请求常用的方法有以下四种：</p><ol><li>GET: 用于查询对象</li><li>POST: 用于创建对象</li><li>PUT: 用于修改对象</li><li>DELETE: 用于删除对象</li></ol><h3 id="1-CXF-基于-SOAP-的-WebService"><a href="#1-CXF-基于-SOAP-的-WebService" class="headerlink" title="1. CXF 基于 SOAP 的 WebService"></a>1. CXF 基于 SOAP 的 WebService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- IHelloWorld.java --&gt;</span><br><span class="line"><span class="keyword">package</span> top.leezy.www;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HelloWorldImpl.java --&gt;</span><br><span class="line"><span class="keyword">package</span> top.leezy.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">IHelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jaxws</span>=<span class="string">"http://cxf.apache.org/jaxws"</span> <span class="attr">xmlns:cxf</span>=<span class="string">"http://cxf.apache.org/core"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:wsa</span>=<span class="string">"http://cxf.apache.org/ws/addressing"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">     http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:META-INF/cxf/cxf.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:META-INF/cxf/cxf-servlet.xml"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxws:endpoint</span> <span class="attr">id</span>=<span class="string">"HelloWorld"</span> <span class="attr">implementor</span>=<span class="string">"top.leezy.www.HelloWorldImpl"</span> <span class="attr">address</span>=<span class="string">"/sayHello"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>CXFwebservice<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:top/**/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CxfServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CxfServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webservice/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器输入：<a href="http://127.0.0.1:8081/SoapWebService/webservice" target="_blank" rel="noopener">http://127.0.0.1:8081/SoapWebService/webservice</a><br><img src="/assets/blogImg/SoapWebService.png" alt="SoapWebService"></p><h3 id="2-CXF-基于-RestFul-的-WebService"><a href="#2-CXF-基于-RestFul-的-WebService" class="headerlink" title="2. CXF 基于 RestFul 的 WebService"></a>2. CXF 基于 RestFul 的 WebService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Config.java --&gt;</span><br><span class="line"><span class="keyword">package</span> top.leezy.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; users;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">users = <span class="keyword">new</span> LinkedList&lt;User&gt;();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="string">"123456"</span>);</span><br><span class="line">user.setName(<span class="string">"SAKURA"</span>);</span><br><span class="line">users.add(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- User.java --&gt;</span><br><span class="line"><span class="keyword">package</span> top.leezy.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- UserService.java --&gt;</span><br><span class="line"><span class="keyword">package</span> top.leezy.www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Consumes;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.DELETE;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.POST;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PUT;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.QueryParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Response;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Response.Status;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/UserService"</span>)</span><br><span class="line"><span class="comment">// 可以注释在方法上或者类上（以最小单位为准）, 指定返回给客户端的类型</span></span><br><span class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/getUser/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_XML)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (User user : Config.users) &#123;</span><br><span class="line"><span class="keyword">if</span>(id.equals(user.getId()))</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">User add_user = <span class="keyword">new</span> User();</span><br><span class="line">add_user.setId(id);</span><br><span class="line"><span class="keyword">return</span> add_user;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/regUser"</span>)</span><br><span class="line"><span class="comment">// 一般用于 @PUT、@POST, 用于接受客户端发送过来的MIME类型</span></span><br><span class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">regUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Config.users.contains(user)) &#123;</span><br><span class="line"><span class="keyword">return</span> Response.status(Status.BAD_REQUEST).build();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Config.users.add(user);</span><br><span class="line"><span class="keyword">return</span> Response.ok(<span class="string">"id = "</span> + user.getId() + <span class="string">", name = "</span> + user.getName()).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DELETE</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/delUser"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">delPerson</span><span class="params">(@QueryParam(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(id);</span><br><span class="line"><span class="keyword">if</span> (Config.users.contains(user)) &#123;</span><br><span class="line"><span class="keyword">return</span> Response.status(Status.BAD_REQUEST).build();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Config.users.remove(user);</span><br><span class="line"><span class="keyword">return</span> Response.ok(user).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PUT</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Config.users.contains(user)) &#123;</span><br><span class="line"><span class="keyword">return</span> Response.status(Status.BAD_REQUEST).build();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (User old_user : Config.users) &#123;</span><br><span class="line"><span class="keyword">if</span> (old_user.equals(user)) &#123;</span><br><span class="line">old_user.setName(user.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Response.ok(user).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- beans.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jaxrs</span>=<span class="string">"http://cxf.apache.org/jaxrs"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://cxf.apache.org/jaxrs</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://cxf.apache.org/schemas/jaxrs.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:META-INF/cxf/cxf.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:META-INF/cxf/cxf-servlet.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.leezy.www.UserService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:server</span> <span class="attr">id</span>=<span class="string">"rs_server"</span> <span class="attr">address</span>=<span class="string">"/restfulService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>CxfRestWebservice<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:top/**/beans.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxfservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxfservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webservice/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器输入：<a href="http://127.0.0.1:8081/RestFulWebService/webservice/" target="_blank" rel="noopener">http://127.0.0.1:8081/RestFulWebService/webservice/</a><br><img src="/assets/blogImg/RestFulWebService.png" alt="RestFulWebService"><br>使用POSTMan进行测试：<br><img src="/assets/blogImg/RestFulWebService%E4%BD%BF%E7%94%A8_POST.png" alt="RestFulWebService使用_POST"><br>RestFul WebService 的JAR包较 Soap WebService 要区别以下几个：<br>-javax.ws.rs-api-2.1.1.jar<br>-cxf-rt-frontend-jaxrs-3.2.7.jar</p><p>参考文献：<br>[1]<a href="http://www.differencebetween.net/technology/protocols-formats/difference-between-rpc-and-web-service/#ixzz5YLemRQhd" target="_blank" rel="noopener">http://www.differencebetween.net/technology/protocols-formats/difference-between-rpc-and-web-service/#ixzz5YLemRQhd</a><br>[2]<a href="https://www.cnblogs.com/zhuyiqizhi/p/6213502.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuyiqizhi/p/6213502.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebService的两种实现方式，Soap WebService、Restful WebService。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWEB" scheme="https://www.leezy.top/tags/JavaWEB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Tomcat</title>
    <link href="https://www.leezy.top/2018/11/20/CentOS%E5%AE%89%E8%A3%85Tomcat/"/>
    <id>https://www.leezy.top/2018/11/20/CentOS安装Tomcat/</id>
    <published>2018-11-20T14:46:41.000Z</published>
    <updated>2020-11-28T08:46:52.497Z</updated>
    
    <content type="html"><![CDATA[<p>系统：CentOS Linux release 7.5.1804<br>Tomcat版本： apache-tomcat-7.0.92.tar.gz</p><a id="more"></a><h3 id="1-下载Tomcat"><a href="#1-下载Tomcat" class="headerlink" title="1. 下载Tomcat"></a>1. 下载Tomcat</h3><p>下载链接：<a href="https://www-us.apache.org/dist/tomcat/tomcat-7/v7.0.92/bin/apache-tomcat-7.0.92.tar.gz" target="_blank" rel="noopener">https://www-us.apache.org/dist/tomcat/tomcat-7/v7.0.92/bin/apache-tomcat-7.0.92.tar.gz</a></p><h3 id="2-解压缩文件"><a href="#2-解压缩文件" class="headerlink" title="2. 解压缩文件"></a>2. 解压缩文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-7.0.92.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-打开8080端口并重启防火墙"><a href="#3-打开8080端口并重启防火墙" class="headerlink" title="3. 打开8080端口并重启防火墙"></a>3. 打开8080端口并重启防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="4-配置tomcat-users-xml"><a href="#4-配置tomcat-users-xml" class="headerlink" title="4. 配置tomcat-users.xml"></a>4. 配置tomcat-users.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在最后添加用户角色用户名密码 参数意义可以在自带的文档上查看--&gt;</span><br><span class="line">&lt;role rolename="admin-gui"/&gt;</span><br><span class="line">&lt;role rolename="manager-gui"/&gt;</span><br><span class="line">&lt;role rolename="manager-jmx"/&gt;</span><br><span class="line">&lt;user username="admin" password="admin" roles="admin-gui,manager-gui,manager-jmx" /&gt;</span><br></pre></td></tr></table></figure><h3 id="5-访问Tomcat-Manager"><a href="#5-访问Tomcat-Manager" class="headerlink" title="5. 访问Tomcat Manager"></a>5. 访问Tomcat Manager</h3><p>访问地址： <a href="http://192.168.56.101:8080/" target="_blank" rel="noopener">http://192.168.56.101:8080/</a> 并登陆 admin admin<br><img src="/assets/blogImg/Tomcat%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="Tomcat控制台"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统：CentOS Linux release 7.5.1804&lt;br&gt;Tomcat版本： apache-tomcat-7.0.92.tar.gz&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Tomcat" scheme="https://www.leezy.top/tags/Tomcat/"/>
    
      <category term="Linux" scheme="https://www.leezy.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装</title>
    <link href="https://www.leezy.top/2018/11/20/MongoDB%E5%AE%89%E8%A3%85/"/>
    <id>https://www.leezy.top/2018/11/20/MongoDB安装/</id>
    <published>2018-11-20T01:08:25.000Z</published>
    <updated>2020-11-28T08:46:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>安装解压缩版本的MongoDB(mongodb-win32-x86_64-2008plus-ssl-4.0.4)的简单命令。</p><a id="more"></a><h3 id="1-配置环境变量"><a href="#1-配置环境变量" class="headerlink" title="1. 配置环境变量"></a>1. 配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加入环境变量</span><br><span class="line">C:\Program Files\mongodb-win32-x86_64-2008plus-ssl-4.0.4\bin</span><br></pre></td></tr></table></figure><h3 id="2-创建-data-文件夹-及-log-文件夹"><a href="#2-创建-data-文件夹-及-log-文件夹" class="headerlink" title="2. 创建 data 文件夹 及 log 文件夹"></a>2. 创建 data 文件夹 及 log 文件夹</h3><p>创建 mongodb-data 和 mongodb-log 文件夹</p><h3 id="3-用管理员权限执行安装命令"><a href="#3-用管理员权限执行安装命令" class="headerlink" title="3. 用管理员权限执行安装命令"></a>3. 用管理员权限执行安装命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Program Files\mongodb-win32-x86_64-2008plus-ssl-4.0.4\bin</span><br><span class="line">mongod --dbpath "C:\Program Files\mongodb-win32-x86_64-2008plus-ssl-4.0.4\mongodb-data" --logpath "C:\Program Files\mongodb-win32-x86_64-2008plus-ssl-4.0.4\mongodb-log\MongoDB.log" --install --serviceName "mongo" --logappend --directoryperdb</span><br></pre></td></tr></table></figure><h3 id="4-测试安装结果"><a href="#4-测试安装结果" class="headerlink" title="4. 测试安装结果"></a>4. 测试安装结果</h3><p>访问 <a href="http://127.0.0.1:27017/" target="_blank" rel="noopener">http://127.0.0.1:27017/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装解压缩版本的MongoDB(mongodb-win32-x86_64-2008plus-ssl-4.0.4)的简单命令。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MongoDB" scheme="https://www.leezy.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow实验记录</title>
    <link href="https://www.leezy.top/2018/03/06/TensorFlow%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.leezy.top/2018/03/06/TensorFlow实验记录/</id>
    <published>2018-03-06T03:28:53.000Z</published>
    <updated>2020-11-28T08:46:52.504Z</updated>
    
    <content type="html"><![CDATA[<p>环境说明：<br>系统：Ubuntu Server 16.04.1 LTS 64位<br>Python版本：Python 3.5.2<br>TensorFlow版本：1.4</p><a id="more"></a><h3 id="用户切换（最好启用root否则会有Bug）"><a href="#用户切换（最好启用root否则会有Bug）" class="headerlink" title="用户切换（最好启用root否则会有Bug）"></a>用户切换（最好启用root否则会有Bug）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输入Linux root用户密码</span><br><span class="line">sudo passwd root</span><br><span class="line"># 默认用户切换到root用户</span><br><span class="line">su root</span><br></pre></td></tr></table></figure><h3 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 不用默认的2.7 安装python3.5</span><br><span class="line">sudo apt-get install python3.5</span><br><span class="line"># 系统环境切换成python3.5</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure><h3 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 采用pip安装，首先安装</span><br><span class="line"># 查看系统内置的pip版本</span><br><span class="line">pip3 -V</span><br><span class="line"># 更新并安装</span><br><span class="line">sudo apt-get install python3-pip python3-dev</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line"># 安装CPU版本的TensorFlow</span><br><span class="line">pip3 install tensorflow</span><br></pre></td></tr></table></figure><p>注意要保证pip是最新版本否则会出现以下错误：<br><img src="/assets/blogImg/pip%E6%9C%AA%E8%BE%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC.png" alt="pip未达到最新版本"></p><h3 id="测试TensorFlow"><a href="#测试TensorFlow" class="headerlink" title="测试TensorFlow"></a>测试TensorFlow</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello = tf.constant(<span class="string">'Hello, TensorFlow'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sess.run(hello))</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/%E6%B5%8B%E8%AF%95TensorFlow%E5%AE%89%E8%A3%85.png" alt="测试TensorFlow安装"></p><h3 id="查看TensorFlow版本"><a href="#查看TensorFlow版本" class="headerlink" title="查看TensorFlow版本"></a>查看TensorFlow版本</h3><p><img src="/assets/blogImg/%E6%9F%A5%E7%9C%8BTensFlow%E7%89%88%E6%9C%AC.png" alt="查看TensFlow版本"></p><hr><h3 id="备用知识点-Note"><a href="#备用知识点-Note" class="headerlink" title="备用知识点(Note)"></a>备用知识点(Note)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. vim -r filename 恢复未正常保存生成的.swap文件</span><br><span class="line">2. (Note)</span><br><span class="line">convolutional neural network 卷积神经网络</span><br><span class="line">rectified linear unit 线性修正单元 ReLU</span><br><span class="line">input layer --&gt; hidden layer(more than one) --&gt; output layer</span><br></pre></td></tr></table></figure><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U scikit-learn</span><br><span class="line"></span><br><span class="line">pip3 install scipy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下载 MNIST 数据集（http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_download.html）</span><br><span class="line">wget http://tensorflow-1253902462.cosgz.myqcloud.com/mnist_cnn/t10k-images-idx3-ubyte.gz</span><br><span class="line">wget http://tensorflow-1253902462.cosgz.myqcloud.com/mnist_cnn/t10k-labels-idx1-ubyte.gz</span><br><span class="line">wget http://tensorflow-1253902462.cosgz.myqcloud.com/mnist_cnn/train-images-idx3-ubyte.gz</span><br><span class="line">wget http://tensorflow-1253902462.cosgz.myqcloud.com/mnist_cnn/train-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">pip3 install \</span><br><span class="line">  -i https://pypi.tuna.tsinghua.edu.cn/simple/ \</span><br><span class="line">  https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/cpu/tensorflow-1.7.0-cp35-cp35m-linux_x86_64.whl</span><br></pre></td></tr></table></figure><h3 id="Windows环境下-ipynb文件相关（python笔记）"><a href="#Windows环境下-ipynb文件相关（python笔记）" class="headerlink" title="Windows环境下.ipynb文件相关（python笔记）"></a>Windows环境下.ipynb文件相关（python笔记）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 安装python环境不必多说</span><br><span class="line">pip install ipython</span><br><span class="line"></span><br><span class="line">pip install &quot;ipython[notebook]&quot;</span><br><span class="line"></span><br><span class="line"># cd 到有.ipynb文件的目录下执行下列命令就会自动打开浏览器点击文件即可打开文件</span><br><span class="line">ipython notebook</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/ipynb%E6%96%87%E4%BB%B6.png" alt="Windows10安装效果"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境说明：&lt;br&gt;系统：Ubuntu Server 16.04.1 LTS 64位&lt;br&gt;Python版本：Python 3.5.2&lt;br&gt;TensorFlow版本：1.4&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://www.leezy.top/tags/Linux/"/>
    
      <category term="TensorFlow" scheme="https://www.leezy.top/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>C++标准模板库STL学习笔记</title>
    <link href="https://www.leezy.top/2018/02/27/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.leezy.top/2018/02/27/C++标准模板库STL学习笔记/</id>
    <published>2018-02-27T14:35:25.000Z</published>
    <updated>2020-11-28T08:46:52.497Z</updated>
    
    <content type="html"><![CDATA[<p>面试笔试算法必备知识点！文章内容总结自《算法笔记》，时刻巩固以免忘记(lll￢ω￢)</p><a id="more"></a><h3 id="1-vectory用法："><a href="#1-vectory用法：" class="headerlink" title="1.vectory用法："></a>1.vectory用法：</h3><p>Vectory：变长数组</p><ol><li><p>定义方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vectory&lt;<span class="keyword">typename</span>&gt; name;</span><br><span class="line"><span class="comment">// eg:</span></span><br><span class="line">vectory&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果typename类型也是一个STL容器，定义方式如下：</span></span><br><span class="line">vectory&lt;vectory&lt;<span class="keyword">int</span>&gt; &gt; name; <span class="comment">// &gt;&gt;之间有空格避免歧义 --》两维都可变的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vectory数组的定义方式如下：</span></span><br><span class="line">vectory&lt;<span class="keyword">typename</span>&gt; Arrayname[arraySize] <span class="comment">// 一维可变的二维数组</span></span><br><span class="line"><span class="comment">// eg:</span></span><br><span class="line">vectory&lt;<span class="keyword">int</span>&gt; nums[<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li><li><p>访问方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过下标访问：</span></span><br><span class="line">nums[<span class="number">0</span>], nums[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过迭代器访问：</span></span><br><span class="line">vectory&lt;<span class="keyword">typename</span>&gt;::iterator it;</span><br><span class="line"><span class="comment">//eg:</span></span><br><span class="line">vectory&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">// 得到迭代器it，通过*it进行访问vectory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nums[i] 等价于 *(it + i)</span></span><br></pre></td></tr></table></figure></li><li><p>常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. push_back(x) 在vectory末尾添加一个元素x O(1) nums.push_back(i);</span><br><span class="line">2. pop_back() 在vectory末尾删除一个元素 O(1) nums.pop_back();</span><br><span class="line">3. size() 求得vectory元素个数 O(1) nums.size()</span><br><span class="line">4. begin() 求得vectory数组nums首地址与it指向地址一样 O(1) nums.beagin()</span><br><span class="line">5. end() 求得vectory数组nums尾元素的下一个地址 O(1) nums.end()</span><br><span class="line">6. clear() 清空vectory所有元素 O(n) nums.clear()</span><br><span class="line">7. insert(it, x) 向vectory任意迭代器it处插入一个元素x O(N) nums.insert(nums.begin() + 2， 3)</span><br><span class="line">8. erase(it) 删除迭代器it处元素 O(n) nums.erase(nums.begin() + 2)</span><br><span class="line">9. erase(first, last) 删除[first, last)内的所有元素 O(n) nums.erase(num.begin() + 1, num.end())删除除第一个元素外的其他元素</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试笔试算法必备知识点！文章内容总结自《算法笔记》，时刻巩固以免忘记(lll￢ω￢)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="https://www.leezy.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架总结</title>
    <link href="https://www.leezy.top/2017/08/09/SSM%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.leezy.top/2017/08/09/SSM框架总结/</id>
    <published>2017-08-09T12:10:41.000Z</published>
    <updated>2020-11-28T08:46:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>SSM框架的一些基本知识总结。</p><a id="more"></a><h3 id="1-SSM定义"><a href="#1-SSM定义" class="headerlink" title="1.SSM定义"></a>1.SSM定义</h3><p>SSM = Spring + SpringMVC + MyBatis<br>Spring:<br>Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p><p>SpringMVC命名及分层：<br>edu.xju.common.util 公共部分<br>edu.xju.controller 控制层<br>edu.xju.dao 数据层<br>edu.xju.entity 实体层<br>edu.xju.service 服务层</p><p>MyBatis:<br>比Hibernate要灵活多用于需求不断变更的项目。</p><h3 id="2-Web项目执行顺序"><a href="#2-Web项目执行顺序" class="headerlink" title="2.Web项目执行顺序"></a>2.Web项目执行顺序</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml 程序执行入口 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用如下配置，Spring Web MVC框架将加载“classpath:spring-mvc.xml”来进行初始化上下文而不是“/WEB-INF/[servlet名字]-servlet.xml”。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 传给上下文实例（由contextClass指定）的字符串，用来指定上下文的位置。这个字符串可以被分成多个字符串（使用逗号作为分隔符） 来支持多个上下文（在多上下文的情况下，如果同一个bean被定义两次，后面一个优先）。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- load-on-startup：表示启动容器时初始化该Servlet； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.json<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 从main.jsp开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>main.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DispatcherServlet拦截所有请求，在这里是拦截.do和.json结尾的请求。<br>该DispatcherServlet默认使用WebApplicationContext作为上下文，Spring默认配置文件为“/WEB-INF/[servlet名字]-servlet.xml”。<br><strong>ContextLoaderListener初始化的上下文和DispatcherServlet初始化的上下文关系</strong><br><img src="/assets/blogImg/%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%B3%E7%B3%BB.jpg" alt="初始化上下文关系"><br>ContextLoaderListener初始化的上下文加载的Bean是对整个应用程序共享的；<br>DispatcherServlet初始化的上下文加载的Bean是只对Spring Web MVC有效的Bean；即只加载Web相关的组件。<br><strong>DispatcherServlet的继承关系</strong><br><img src="/assets/blogImg/DispatcherServlet%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="DispatcherServlet继承关系"></p><p><strong>DispatcherServlet initialization parameters</strong><br>![DispatcherServlet initialization parameters](/assets/blogImg/DispatcherServlet initialization parameters.png)</p><ol><li><em>HttpServletBean继承HttpServlet</em>，因此在Web容器启动时将调用它的init方法，该初始化方法的主要作用<br>将Servlet初始化参数（init-param）设置到该组件上（如contextAttribute、contextClass、namespace、contextConfigLocation），通过BeanWrapper简化设值过程，方便后续使用；提供给子类初始化扩展点，initServletBean()，该方法由FrameworkServlet覆盖。</li><li><em>FrameworkServlet继承HttpServletBean</em>，通过initServletBean()进行Web上下文初始化，该方法主要覆盖一下两件事情：<br> 初始化web上下文；<br> 提供给子类初始化扩展点；</li><li><em>DispatcherServlet继承FrameworkServlet</em>，并实现了onRefresh()方法提供一些前端控制器相关的配置；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-mvc.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描这个控制包内部的Controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"edu.xju.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// spring-mybatis.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"edu"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb?charsetEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sessionFactory代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"edu.xju.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring 事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义事务声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceAop"</span> <span class="attr">expression</span>=<span class="string">"execution(* edu.xju.service.*Service.*(..))"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceAop"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// main.jsp</span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>基本的 ssm 框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">a&#123;</span></span><br><span class="line"><span class="undefined">font-size: 20px;</span></span><br><span class="line"><span class="undefined">display: block;</span></span><br><span class="line"><span class="undefined">margin-top: 30px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/addUser.do"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/list.do"</span>&gt;</span>查找所有用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/getUserA.json?id=1"</span>&gt;</span>获取某个用户JSON格式1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/getUserB.json?id=2"</span>&gt;</span>获取某个用户JSON格式2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController.java</span></span><br><span class="line"><span class="keyword">package</span> edu.xju.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.xju.common.util.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> edu.xju.entity.User;</span><br><span class="line"><span class="keyword">import</span> edu.xju.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个是返回页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsers</span><span class="params">(Model model,HttpSession session)</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userService.getAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取json 的第一种方式</span></span><br><span class="line"><span class="comment">     * 返回json 格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUserA.json"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getUserByIdA</span><span class="params">(Model model,HttpSession session,Integer id )</span></span>&#123;</span><br><span class="line">    User user = userService.findUserById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取第json 的第二种方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUserB.json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByIdB</span><span class="params">(Model model,HttpServletResponse response,HttpSession session,Integer id )</span></span>&#123;</span><br><span class="line">    User user = userService.findUserById(id);</span><br><span class="line">    JsonUtil.printByJSON(response, user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addUser.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(Model model,HttpSession session,Integer id,String name,Integer age )</span></span>&#123;</span><br><span class="line">    name = <span class="string">"测试姓名"</span>;</span><br><span class="line">    age = <span class="number">99</span>;</span><br><span class="line">    User user = <span class="keyword">new</span> User(name, age);</span><br><span class="line">    userService.addUser(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"insertOK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="keyword">package</span> edu.xju.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">( String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">package</span> edu.xju.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.xju.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> edu.xju.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.xju.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> edu.xju.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMapper.getUserById(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">userMapper.insertUser(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MyBatis</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserMapper.java</span></span><br><span class="line"><span class="keyword">package</span> edu.xju.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.xju.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// UserMapper.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"edu.xju.dao.UserMapper"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明属性与查询字段之间的的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"edu.xju.entity.User"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">      select id,name,age from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">      select id,name,age from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"edu.xju.entity.User"</span>&gt;</span></span><br><span class="line">        insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-序列图"><a href="#3-序列图" class="headerlink" title="3.序列图"></a>3.序列图</h3><p><img src="/assets/blogImg/%E5%BA%8F%E5%88%97%E5%9B%BE.png" alt="流程序列图"></p><h3 id="4-常用注解解析："><a href="#4-常用注解解析：" class="headerlink" title="4.常用注解解析："></a>4.常用注解解析：</h3><blockquote><p>@Autowired 和 @Resource的使用场景和区别</p></blockquote><p>@Autowired 是byType自动注入，是Spring的注解。@Resource默认是byName注入，默认使用成员属性的变量名注入，是Java自带的注解。</p><blockquote><p>@Scope(“prototype”) 和 @Scope(“singleton”) 的区别</p></blockquote><p>singleton 表示Spring容器中的单例，通过spring 容器获取该bean时总是返回唯一的实例。<br>prototype 表示每次获取该bean时都会new 一个新的对象实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTestService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码所示，如果设置为singleton，当a++和b++时，a和b都会增加。如果设置为prototype的话，则只有a会增加，b不会增加。</p><blockquote><p>static 静态变量</p></blockquote><p>静态变量整个内存中<code>只有一个副本</code>，为所有对象所共享，当且仅当类加载时才会被初始化；而非静态变量是对象所拥有的，在创建对象时被初始化，<code>存在多个副本</code>，每个对象之间拥有的副本互不影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSM框架的一些基本知识总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWEB" scheme="https://www.leezy.top/tags/JavaWEB/"/>
    
  </entry>
  
  <entry>
    <title>数据库设计技巧</title>
    <link href="https://www.leezy.top/2017/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.leezy.top/2017/08/09/数据库设计技巧/</id>
    <published>2017-08-09T01:58:25.000Z</published>
    <updated>2020-11-28T08:46:52.505Z</updated>
    
    <content type="html"><![CDATA[<p>设计数据库的一些坑的总结。</p><a id="more"></a><h3 id="1-Int与Integer的区别"><a href="#1-Int与Integer的区别" class="headerlink" title="1.Int与Integer的区别"></a>1.Int与Integer的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生</span></span><br><span class="line"><span class="comment"> * 在使用Hibernate设计数据表声明数据类型时，Java代码中ID一般都设置成Integer类型，因为它可以默认为null，而</span></span><br><span class="line"><span class="comment"> * 在使用性别时，一般都是使用Int类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage=CacheConcurrencyStrategy.READ_WRITE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-有依赖关联表与无依赖关联表"><a href="#2-有依赖关联表与无依赖关联表" class="headerlink" title="2.有依赖关联表与无依赖关联表"></a>2.有依赖关联表与无依赖关联表</h3><p><em>一张表里只能有一个主键，或者有一种情况是one primary key included two fileds.</em><br><strong>有依赖关联表：通过在用户信息表里加入用户ID实现两张表的关联。</strong></p><p><img src="/assets/blogImg/%E6%9C%89%E4%BE%9D%E8%B5%96%E7%9A%84%E5%85%B3%E8%81%94.png" alt="有依赖关联表"><br>具体实现：<br><strong>逻辑模型</strong><br><img src="/assets/blogImg/%E9%80%BB%E8%BE%91%E6%A8%A1%E5%9E%8B.png" alt="有依赖关联表"><br><strong>物理模型</strong><br><img src="/assets/blogImg/%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.png" alt="有依赖关联表"></p><hr><p><strong>无依赖关联表：通过引入第三张表来进行用户表与用户信息表的关联。</strong></p><p><img src="/assets/blogImg/%E6%97%A0%E4%BE%9D%E8%B5%96%E5%85%B3%E8%81%94.png" alt="无依赖关联表"></p><h3 id="3-Hibernate中一对一、一对多以及多对多的注解实现"><a href="#3-Hibernate中一对一、一对多以及多对多的注解实现" class="headerlink" title="3.Hibernate中一对一、一对多以及多对多的注解实现"></a>3.Hibernate中一对一、一对多以及多对多的注解实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1:1 &lt;==&gt; Person:IdCard</span></span><br><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 身份证</span></span><br><span class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"person"</span>)  <span class="comment">//放弃维护主控权</span></span><br><span class="line"><span class="keyword">private</span> IdCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IdCard.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_idcard"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 身份证号</span></span><br><span class="line"><span class="keyword">private</span> String sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所属人</span></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"person_id"</span>, unique=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1:n &lt;==&gt; Department:Employee</span></span><br><span class="line"><span class="comment">// Department.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_dept"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage=CacheConcurrencyStrategy.READ_WRITE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 名称</span></span><br><span class="line"><span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认实体类所有字段都映射, 可使用@Transient声明不做映射</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sn;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拥有多个员工</span></span><br><span class="line"><span class="meta">@OneToMany</span>(mappedBy = <span class="string">"dept"</span>)  <span class="comment">//mappedBy：表示放弃维护主控权</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Employee&gt; emps = <span class="keyword">new</span> HashSet&lt;Employee&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Employee.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_emp"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage=CacheConcurrencyStrategy.READ_WRITE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"dept_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Department dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n:n &lt;==&gt; Course:Student</span></span><br><span class="line"><span class="comment">// Course.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_course"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">// 名称</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生</span></span><br><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"tb_student_course"</span>, </span><br><span class="line">joinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"course_id"</span>), </span><br><span class="line">inverseJoinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"student_id"</span>))</span><br><span class="line"><span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Student.java</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// 课程</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"students"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;Course&gt; courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计数据库的一些坑的总结。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://www.leezy.top/tags/MySQL/"/>
    
      <category term="Hibernate" scheme="https://www.leezy.top/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>面试-Java基础知识</title>
    <link href="https://www.leezy.top/2017/07/28/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E9%9D%A2%E8%AF%95/"/>
    <id>https://www.leezy.top/2017/07/28/JAVA基础知识-面试/</id>
    <published>2017-07-28T11:26:59.000Z</published>
    <updated>2020-11-28T08:46:52.500Z</updated>
    
    <content type="html"><![CDATA[<p>扎实基础！</p><a id="more"></a><p>笔试让我明白了自己的一些问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> c = a + b;</span><br><span class="line"><span class="comment">// 报错 默认最低是Int类型</span></span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>)a + b;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lzy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line">System.out.println(a);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">int</span> c = ++a;</span><br><span class="line">System.out.println(a);<span class="comment">//2</span></span><br><span class="line">System.out.println(a++);<span class="comment">//2</span></span><br><span class="line">System.out.println(++a);<span class="comment">//4</span></span><br><span class="line">System.out.println(b);<span class="comment">//0</span></span><br><span class="line">System.out.println(c);<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// a的变化：6   7     8     9    10</span></span><br><span class="line"><span class="comment">// b的变化： 5    7     7     8     10</span></span><br><span class="line"><span class="keyword">int</span> b = a++ + ++a + a++ + a++ + ++a;</span><br><span class="line">System.out.println(b); <span class="comment">//37</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//&amp;对每一个都判断；</span></span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">0</span> &amp; a++==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"&amp;"</span>);<span class="comment">//不输出</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a);<span class="comment">//1</span></span><br><span class="line"><span class="comment">//&amp;&amp;只要前面是false就输出false，而不继续判断后面了</span></span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">0</span> &amp;&amp; a++==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"&amp;&amp;"</span>);<span class="comment">//不输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">1</span> &amp;&amp; a++==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"&amp;&amp;"</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 随机数产生的范围是[0, 1)</span></span><br><span class="line"><span class="keyword">double</span> num = Math.random();</span><br><span class="line"><span class="comment">// 这样子[0, 0.5) [0.5, 1)才能真正平衡</span></span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">0.5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"成都"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"赵雷"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出指定范围的数字</span></span><br><span class="line"><span class="comment">// [26, 38]</span></span><br><span class="line"><span class="comment">// 方法一： (int)(Math.random()*(max - min) + min);</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">38</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  scal = (<span class="keyword">int</span>)(Math.random()*(b - a + <span class="number">1</span>)) + a;</span><br><span class="line">System.out.println(scal);</span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="keyword">int</span> scall = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span> % <span class="number">12</span>) + a;</span><br><span class="line">System.out.println(scall);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><h3 id="一：-与-equal的区别："><a href="#一：-与-equal的区别：" class="headerlink" title="一：== 与 equal的区别："></a>一：== 与 equal的区别：</h3><ol><li>== 是一个运算符。</li><li>Equals则是string对象的方法，可以.（点）出来。</li><li>因为对象变量的存储的是对象在内存中的路径，即内存地址。所以用“==”比较时，即使<br>对象的值相等，但是他们的内存地址不同(引用数据类型)，所以==的结果为false。故“==”用于比较两<br>个变量的值是否相等，而不是变量引用的对象是否相等。</li><li>equal用于比较两个对象是否相同。 </li><li>“==”比较的是值【变量(栈)内存中存放的对象的(堆)内存地址】<br>equal用于比较两个对象的值是否相同【不是比地址】 </li></ol><p>【特别注意】Object类中的equals方法和“==”是一样的，没有区别，而String类，Integer类等等一些类，是重写了equals方法，才使得equals和“==不同”，所以，当自己创建类时，自动继承了Object的equals方法，要想实现不同的等于比较，必须重写equals方法。”==”比”equal”运行速度快,因为”==”只是比较引用.</p><h3 id="二：public、protected、private、default（friendly）的区别"><a href="#二：public、protected、private、default（friendly）的区别" class="headerlink" title="二：public、protected、private、default（friendly）的区别:"></a>二：public、protected、private、default（friendly）的区别:</h3><p><img src="/assets/blogImg/public_protected_private_default.png" alt="Java中作用范围表"></p><p>public：可以被其他类访问<br>private：只能被自己访问和修改<br>protected:类内部、子类、同一个包中的类之间可以访问<br>default：作用域是包，可以不写。被认为是friendly</p><h3 id="final关键字："><a href="#final关键字：" class="headerlink" title="final关键字："></a>final关键字：</h3><p>修饰类：表示该类不能被继承，final类的所有成员方法都会被隐式的指定为final方法<br>修饰方法：变是该方法不能被子类修改，类的private方法会被隐式的指定为final方法<br>修饰变量：基本数据变量不可以被更改<br>         引用类型变量不可以再更改指向另一个对象</p><h3 id="Java线程安全与非线程安全："><a href="#Java线程安全与非线程安全：" class="headerlink" title="Java线程安全与非线程安全："></a>Java线程安全与非线程安全：</h3><p>多线程安全优点体现在多个线程操作同一个对象，非线程安全 != 不安全<br>线程安全是通过线程同步控制来实现的，也就是synchronized关键字。<br>ArrayList是非线程安全 Vector是线程安全；<br>HashMap是非线程安全 HashTable是线程安全；<br>StringBuilder是非线程安全 StringBuffer是线程安全；<br><a href="http://blog.csdn.net/YiZhiCXY/article/details/51335385" target="_blank" rel="noopener">http://blog.csdn.net/YiZhiCXY/article/details/51335385</a></p><h3 id="String、StringBuffer、StringBuilder的区别："><a href="#String、StringBuffer、StringBuilder的区别：" class="headerlink" title="String、StringBuffer、StringBuilder的区别："></a>String、StringBuffer、StringBuilder的区别：</h3><p>String： 字符串常量<br>StringBuffer: 字符串变量（线程安全） 多线程下有优势<br>StringBuilder: 字符串变量（非线程安全） 单线程下有优势</p><h3 id="Array、ArrayList、Vectory、LinkedList的区别：-推荐看源码"><a href="#Array、ArrayList、Vectory、LinkedList的区别：-推荐看源码" class="headerlink" title="Array、ArrayList、Vectory、LinkedList的区别：(推荐看源码)"></a>Array、ArrayList、Vectory、LinkedList的区别：(推荐看源码)</h3><p>ArrayList是为可变数组实现的，当更多的元素添加到ArrayList的时候，它的大小会动态增大。它的元素可以通过get/set方法直接访问，因为ArrayList本质上是一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resizable-array implementation of the &#123;<span class="doctag">@code</span> List&#125; interface.  Implements</span></span><br><span class="line"><span class="comment"> * all optional list operations, and permits all elements, including</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125;.  In addition to implementing the &#123;<span class="doctag">@code</span> List&#125; interface,</span></span><br><span class="line"><span class="comment"> * this class provides methods to manipulate the size of the array that is</span></span><br><span class="line"><span class="comment"> * used internally to store the list.  (This class is roughly equivalent to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Vector&#125;, except that it is unsynchronized.)</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;The &#123;<span class="doctag">@code</span> size&#125;, &#123;<span class="doctag">@code</span> isEmpty&#125;, &#123;<span class="doctag">@code</span> get&#125;, &#123;<span class="doctag">@code</span> set&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> iterator&#125;, and &#123;<span class="doctag">@code</span> listIterator&#125; operations run in constant</span></span><br><span class="line"><span class="comment"> * time.  The &#123;<span class="doctag">@code</span> add&#125; operation runs in &lt;i&gt;amortized constant time&lt;/i&gt;,</span></span><br><span class="line"><span class="comment"> * that is, adding n elements requires O(n) time.  All of the other operations</span></span><br><span class="line"><span class="comment"> * run in linear time (roughly speaking).  The constant factor is low compared</span></span><br><span class="line"><span class="comment"> * to that for the &#123;<span class="doctag">@code</span> LinkedList&#125; implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>LinkedList是为双向链表实现的,非线程安全(not )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Doubly-linked list implementation of the &#123;<span class="doctag">@code</span> List&#125; and &#123;<span class="doctag">@code</span> Deque&#125;</span></span><br><span class="line"><span class="comment"> * interfaces.  Implements all optional list operations, and permits all</span></span><br><span class="line"><span class="comment"> * elements (including &#123;<span class="doctag">@code</span> null&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All of the operations perform as could be expected for a doubly-linked</span></span><br><span class="line"><span class="comment"> * list.  Operations that index into the list will traverse the list from</span></span><br><span class="line"><span class="comment"> * the beginning or the end, whichever is closer to the specified index.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * If multiple threads access a linked list concurrently, and at least</span></span><br><span class="line"><span class="comment"> * one of the threads modifies the list structurally, it &lt;i&gt;must&lt;/i&gt; be</span></span><br><span class="line"><span class="comment"> * synchronized externally.  (A structural modification is any operation</span></span><br><span class="line"><span class="comment"> * that adds or deletes one or more elements; merely setting the value of</span></span><br><span class="line"><span class="comment"> * an element is not a structural modification.)  This is typically</span></span><br><span class="line"><span class="comment"> * accomplished by synchronizing on some object that naturally</span></span><br><span class="line"><span class="comment"> * encapsulates the list.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>Vector与ArrayList相似，但是它是同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> Vector&#125; class implements a growable array of</span></span><br><span class="line"><span class="comment"> * objects. Like an array, it contains components that can be</span></span><br><span class="line"><span class="comment"> * accessed using an integer index. However, the size of a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Vector&#125; can grow or shrink as needed to accommodate</span></span><br><span class="line"><span class="comment"> * adding and removing items after the &#123;<span class="doctag">@code</span> Vector&#125; has been created.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Each vector tries to optimize storage management by maintaining a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> capacity&#125; and a &#123;<span class="doctag">@code</span> capacityIncrement&#125;. The</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> capacity&#125; is always at least as large as the vector</span></span><br><span class="line"><span class="comment"> * size; it is usually larger because as components are added to the</span></span><br><span class="line"><span class="comment"> * vector, the vector's storage increases in chunks the size of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> capacityIncrement&#125;. An application can increase the</span></span><br><span class="line"><span class="comment"> * capacity of a vector before inserting a large number of</span></span><br><span class="line"><span class="comment"> * components; this reduces the amount of incremental reallocation.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>如果你的程序是线程安全的，ArrayList是一个比较好的选择。当更多的元素被添加的时候，Vector和ArrayList需要更多的空间。Vector每次扩容会增加一倍的空间，而ArrayList增加50%。</p><p>注意：ArrayList默认的初始空间大小相当的小，通过构造函数去初始化一个更大的空间是一个好习惯，可以避免扩容开销。<br>部分引自于：<a href="https://www.cnblogs.com/chenpi/p/5505375.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpi/p/5505375.html</a> </p><h3 id="Map、List、Set、Array的区别："><a href="#Map、List、Set、Array的区别：" class="headerlink" title="Map、List、Set、Array的区别："></a>Map、List、Set、Array的区别：</h3><p><a href="https://www.cnblogs.com/chuanheliu/p/6363948.html" target="_blank" rel="noopener">https://www.cnblogs.com/chuanheliu/p/6363948.html</a></p><h3 id="Iterator-的hasNext方法和next方法"><a href="#Iterator-的hasNext方法和next方法" class="headerlink" title="Iterator 的hasNext方法和next方法:"></a>Iterator 的hasNext方法和next方法:</h3><p>hasNext():如果仍有元素可以迭代，则返回 true。（换句话说，如果 next 返回了元素而不是抛出异常，则返回 true）。<br>next():返回迭代的下一个元素。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment"> * (In other words, returns &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #next&#125; would</span></span><br><span class="line"><span class="comment"> * return an element rather than throwing an exception.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the next element in the iteration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the iteration has no more elements</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="JAVA多线程和并发基础面试问答"><a href="#JAVA多线程和并发基础面试问答" class="headerlink" title="JAVA多线程和并发基础面试问答:"></a>JAVA多线程和并发基础面试问答:</h3><p><a href="http://www.cnblogs.com/dolphin0520/p/3932934.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3932934.html</a></p><h3 id="Oracle数据库中TRUNCATE-与-DELETE-的区别："><a href="#Oracle数据库中TRUNCATE-与-DELETE-的区别：" class="headerlink" title="Oracle数据库中TRUNCATE 与 DELETE 的区别："></a>Oracle数据库中TRUNCATE 与 DELETE 的区别：</h3><ol><li>ROLLBACK可以撤销DELETE操作但撤销不了TRUNCATE操作</li><li>TRUNCATE TABLE比DELETE的速度快；</li><li>TRUNCATE TABLE是删除表的所有行，而DELETE是删除表的一行或者多行</li><li>TRUNCATE TABLE在遇到任何一行违反约束(外键约束)时仍然删除表的所有行，但表的结构及其列、约束、索引等保持不变，DELETE则直接返回报错。</li><li>对于被外键约束的表，不能使用TRUNCATE TABLE，而应该使用不带WHERE语句的DELETE语句。</li><li>如果想保留标识计数值，要用DELETE，因为TRUNCATE TABLE会对新行标志符列搜用的计数值重置为该列的种子。</li></ol><h3 id="序列化的作用："><a href="#序列化的作用：" class="headerlink" title="序列化的作用："></a>序列化的作用：</h3><p>为了保存在内存中的各种对象的状态（序列化），并且可以把保存的对象状态再读出来（反序列化）。</p><h3 id="JAVA-中的-super和this"><a href="#JAVA-中的-super和this" class="headerlink" title="JAVA 中的 super和this"></a>JAVA 中的 super和this</h3><blockquote><p>this的用法</p></blockquote><ol><li>指向当前对象本身。</li><li>形参与成员名字重名，用this来区分<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 形参与成员名字重名，用this来区分</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>super用法</p></blockquote><ol><li>指向当前对象的父类</li><li>子类中的成员变量或方法与父类同名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTest</span> <span class="keyword">extends</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"Shanghai"</span>;</span><br><span class="line">        <span class="keyword">super</span>.value();</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestTest tt = <span class="keyword">new</span> TestTest();</span><br><span class="line">        tt.value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"China"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扎实基础！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="https://www.leezy.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Npm模块学习</title>
    <link href="https://www.leezy.top/2017/07/27/Npm%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.leezy.top/2017/07/27/Npm模块学习/</id>
    <published>2017-07-27T11:33:30.000Z</published>
    <updated>2020-11-28T08:46:52.502Z</updated>
    
    <content type="html"><![CDATA[<p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;// TODO&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Npm" scheme="https://www.leezy.top/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://www.leezy.top/2017/07/27/%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.leezy.top/2017/07/27/随笔/</id>
    <published>2017-07-27T11:33:30.000Z</published>
    <updated>2020-11-28T08:46:52.505Z</updated>
    
    <content type="html"><![CDATA[<p>今年7月中旬，我来到了成都，见识到了成都的美。</p><a id="more"></a><p><img src="/assets/blogImg/Work_Palce_Chengdu.jpg" alt="成都大数据中心"></p><h1 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h1><hr><p>让我掉下眼泪的 不止昨夜的酒</p><p>让我依依不舍的 不止你的温柔</p><p>余路还要走多久 你攥着我的手</p><p>让我感到为难的 是挣扎的自由</p><p>分别总是在九月 回忆是思念的愁</p><p>深秋嫩绿的垂柳 亲吻着我额头</p><p>在那座阴雨的小城里 我从未忘记你</p><p>成都 带不走的 只有你</p><p>和我在成都的街头走一走</p><p>直到所有的灯都熄灭了也不停留</p><p>你会挽着我的衣袖 我会把手揣进裤兜</p><p>走到玉林路的尽头 坐在(走过)小酒馆的门口</p><p>分别总是在九月 回忆是思念的愁</p><p>深秋嫩绿的垂柳 亲吻着我额头</p><p>在那座阴雨的小城里 我从未忘记你</p><p>成都 带不走的 只有你</p><p>和我在成都的街头走一走</p><p>直到所有的灯都熄灭了也不停留</p><p>你会挽着我的衣袖 我会把手揣进裤兜</p><p>走到玉林路的尽头 坐在(走过)小酒馆的门口</p><p>和我在成都的街头走一走</p><p>直到所有的灯都熄灭了也不停留</p><p>和我在成都的街头走一走</p><p>直到所有的灯都熄灭了也不停留</p><p>你会挽着我的衣袖 我会把手揣进裤兜</p><p>走到玉林路的尽头 坐在(走过)小酒馆的门口</p><p>和我在成都的街头走一走</p><p>直到所有的灯都熄灭了也不停留</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年7月中旬，我来到了成都，见识到了成都的美。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://www.leezy.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
